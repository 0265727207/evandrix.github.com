/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 39 "./sipQsciQsciScintilla.cpp"

#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "./sipQsciQsciScintilla.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 52 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 55 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qscilexer.sip"
#include <Qsci/qscilexer.h>
#line 58 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 61 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qpoint.sip"
#include <qpoint.h>
#line 64 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qscicommandset.sip"
#include <Qsci/qscicommandset.h>
#line 67 "./sipQsciQsciScintilla.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 70 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qscistyle.sip"
#include <Qsci/qscistyle.h>
#line 73 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qscistyledtext.sip"
#include <Qsci/qscistyledtext.h>
#line 76 "./sipQsciQsciScintilla.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qscidocument.sip"
#include <Qsci/qscidocument.h>
#line 82 "./sipQsciQsciScintilla.cpp"
#line 633 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 88 "./sipQsciQsciScintilla.cpp"
#line 418 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 91 "./sipQsciQsciScintilla.cpp"
#line 391 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 94 "./sipQsciQsciScintilla.cpp"
#line 236 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 97 "./sipQsciQsciScintilla.cpp"
#line 504 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 100 "./sipQsciQsciScintilla.cpp"
#line 344 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 103 "./sipQsciQsciScintilla.cpp"
#line 372 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "./sipQsciQsciScintilla.cpp"
#line 547 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 109 "./sipQsciQsciScintilla.cpp"
#line 571 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 112 "./sipQsciQsciScintilla.cpp"
#line 598 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 115 "./sipQsciQsciScintilla.cpp"
#line 587 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 118 "./sipQsciQsciScintilla.cpp"
#line 475 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 121 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 124 "./sipQsciQsciScintilla.cpp"
#line 42 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 127 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 130 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 133 "./sipQsciQsciScintilla.cpp"
#line 34 "sip/qsciscintillabase4.sip"
#include <Qsci/qsciscintillabase.h>
#line 136 "./sipQsciQsciScintilla.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 139 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 142 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 145 "./sipQsciQsciScintilla.cpp"
#line 275 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 148 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 151 "./sipQsciQsciScintilla.cpp"
#line 44 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qmargins.sip"
#include <qmargins.h>
#line 154 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 157 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 160 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qframe.sip"
#include <qframe.h>
#line 163 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 166 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 169 "./sipQsciQsciScintilla.cpp"
#line 44 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 172 "./sipQsciQsciScintilla.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 175 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlocale.sip"
#include <qlocale.h>
#line 178 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 181 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qregion.sip"
#include <qregion.h>
#line 184 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 187 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 190 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 193 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 196 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpalette.sip"
#include <qpalette.h>
#line 199 "./sipQsciQsciScintilla.cpp"
#line 243 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 202 "./sipQsciQsciScintilla.cpp"
#line 464 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 205 "./sipQsciQsciScintilla.cpp"
#line 453 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 208 "./sipQsciQsciScintilla.cpp"
#line 650 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 211 "./sipQsciQsciScintilla.cpp"
#line 296 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 214 "./sipQsciQsciScintilla.cpp"
#line 431 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 217 "./sipQsciQsciScintilla.cpp"
#line 405 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qevent.sip"
#include <qevent.h>
#line 220 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 223 "./sipQsciQsciScintilla.cpp"
#line 66 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 226 "./sipQsciQsciScintilla.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 229 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qaction.sip"
#include <qaction.h>
#line 232 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qlayout.sip"
#include <qlayout.h>
#line 235 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 238 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 241 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 244 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcursor.sip"
#include <qcursor.h>
#line 247 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qicon.sip"
#include <qicon.h>
#line 250 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 253 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qstyle.sip"
#include <qstyle.h>
#line 256 "./sipQsciQsciScintilla.cpp"
#line 315 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 259 "./sipQsciQsciScintilla.cpp"
#line 303 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 262 "./sipQsciQsciScintilla.cpp"
#line 39 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 265 "./sipQsciQsciScintilla.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 268 "./sipQsciQsciScintilla.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 271 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 274 "./sipQsciQsciScintilla.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 277 "./sipQsciQsciScintilla.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 280 "./sipQsciQsciScintilla.cpp"


class sipQsciScintilla : public QsciScintilla
{
public:
    sipQsciScintilla(QWidget *);
    virtual ~sipQsciScintilla();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QStringList apiContext(int,int&,int&);
    bool findFirst(const QString&,bool,bool,bool,bool,bool,int,int,bool);
    bool findNext();
    void recolor(int,int);
    void replace(const QString&);
    void append(const QString&);
    void autoCompleteFromAll();
    void autoCompleteFromAPIs();
    void autoCompleteFromDocument();
    void callTip();
    void clear();
    void copy();
    void cut();
    void ensureCursorVisible();
    void ensureLineVisible(int);
    void foldAll(bool);
    void foldLine(int);
    void indent(int);
    void insert(const QString&);
    void insertAt(const QString&,int,int);
    void moveToMatchingBrace();
    void paste();
    void redo();
    void removeSelectedText();
    void replaceSelectedText(const QString&);
    void resetSelectionBackgroundColor();
    void resetSelectionForegroundColor();
    void selectAll(bool);
    void selectToMatchingBrace();
    void setAutoCompletionCaseSensitivity(bool);
    void setAutoCompletionReplaceWord(bool);
    void setAutoCompletionShowSingle(bool);
    void setAutoCompletionSource(QsciScintilla::AutoCompletionSource);
    void setAutoCompletionThreshold(int);
    void setAutoCompletionUseSingle(QsciScintilla::AutoCompletionUseSingle);
    void setAutoIndent(bool);
    void setBraceMatching(QsciScintilla::BraceMatch);
    void setBackspaceUnindents(bool);
    void setCaretForegroundColor(const QColor&);
    void setCaretLineBackgroundColor(const QColor&);
    void setCaretLineVisible(bool);
    void setCaretWidth(int);
    void setColor(const QColor&);
    void setCursorPosition(int,int);
    void setEolMode(QsciScintilla::EolMode);
    void setEolVisibility(bool);
    void setFolding(QsciScintilla::FoldStyle,int);
    void setIndentation(int,int);
    void setIndentationGuides(bool);
    void setIndentationGuidesBackgroundColor(const QColor&);
    void setIndentationGuidesForegroundColor(const QColor&);
    void setIndentationsUseTabs(bool);
    void setIndentationWidth(int);
    void setLexer(QsciLexer *);
    void setMarginsBackgroundColor(const QColor&);
    void setMarginsFont(const QFont&);
    void setMarginsForegroundColor(const QColor&);
    void setMarginLineNumbers(int,bool);
    void setMarginMarkerMask(int,int);
    void setMarginSensitivity(int,bool);
    void setMarginWidth(int,int);
    void setMarginWidth(int,const QString&);
    void setModified(bool);
    void setPaper(const QColor&);
    void setReadOnly(bool);
    void setSelection(int,int,int,int);
    void setSelectionBackgroundColor(const QColor&);
    void setSelectionForegroundColor(const QColor&);
    void setTabIndents(bool);
    void setTabWidth(int);
    void setText(const QString&);
    void setUtf8(bool);
    void setWhitespaceVisibility(QsciScintilla::WhitespaceVisibility);
    void setWrapMode(QsciScintilla::WrapMode);
    void undo();
    void unindent(int);
    void zoomIn(int);
    void zoomIn();
    void zoomOut(int);
    void zoomOut();
    void zoomTo(int);
    bool canInsertFromMimeData(const QMimeData *) const;
    QByteArray fromMimeData(const QMimeData *,bool&) const;
    QMimeData * toMimeData(const QByteArray&,bool) const;
    void contextMenuEvent(QContextMenuEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    bool focusNextPrevChild(bool);
    void keyPressEvent(QKeyEvent *);
    void inputMethodEvent(QInputMethodEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void paintEvent(QPaintEvent *);
    void resizeEvent(QResizeEvent *);
    void scrollContentsBy(int,int);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    bool event(QEvent *);
    bool viewportEvent(QEvent *);
    void wheelEvent(QWheelEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciScintilla(const sipQsciScintilla &);
    sipQsciScintilla &operator = (const sipQsciScintilla &);

    char sipPyMethods[133];
};

sipQsciScintilla::sipQsciScintilla(QWidget *a0): QsciScintilla(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciScintilla::~sipQsciScintilla()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciScintilla::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciScintilla);
}

int sipQsciScintilla::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciScintilla::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciScintilla,_c,_id,_a);

    return _id;
}

void *sipQsciScintilla::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast && sip_Qsci_qt_metacast(sipPySelf,sipType_QsciScintilla,_clname)) ? this : QsciScintilla::qt_metacast(_clname);
}

QStringList sipQsciScintilla::apiContext(int a0,int& a1,int& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_apiContext);

    if (!sipMeth)
        return QsciScintilla::apiContext(a0,a1,a2);

    extern QStringList sipVH_Qsci_28(sip_gilstate_t,PyObject *,int,int&,int&);

    return sipVH_Qsci_28(sipGILState,sipMeth,a0,a1,a2);
}

bool sipQsciScintilla::findFirst(const QString& a0,bool a1,bool a2,bool a3,bool a4,bool a5,int a6,int a7,bool a8)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_findFirst);

    if (!sipMeth)
        return QsciScintilla::findFirst(a0,a1,a2,a3,a4,a5,a6,a7,a8);

    extern bool sipVH_Qsci_27(sip_gilstate_t,PyObject *,const QString&,bool,bool,bool,bool,bool,int,int,bool);

    return sipVH_Qsci_27(sipGILState,sipMeth,a0,a1,a2,a3,a4,a5,a6,a7,a8);
}

bool sipQsciScintilla::findNext()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_findNext);

    if (!sipMeth)
        return QsciScintilla::findNext();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_Qsci_QtCore->em_virthandlers[7]))(sipGILState,sipMeth);
}

void sipQsciScintilla::recolor(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_recolor);

    if (!sipMeth)
    {
        QsciScintilla::recolor(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::replace(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_replace);

    if (!sipMeth)
    {
        QsciScintilla::replace(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_Qsci_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::append(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_append);

    if (!sipMeth)
    {
        QsciScintilla::append(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_Qsci_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::autoCompleteFromAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_autoCompleteFromAll);

    if (!sipMeth)
    {
        QsciScintilla::autoCompleteFromAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::autoCompleteFromAPIs()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_autoCompleteFromAPIs);

    if (!sipMeth)
    {
        QsciScintilla::autoCompleteFromAPIs();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::autoCompleteFromDocument()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_autoCompleteFromDocument);

    if (!sipMeth)
    {
        QsciScintilla::autoCompleteFromDocument();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::callTip()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_callTip);

    if (!sipMeth)
    {
        QsciScintilla::callTip();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QsciScintilla::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::copy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
    {
        QsciScintilla::copy();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::cut()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_cut);

    if (!sipMeth)
    {
        QsciScintilla::cut();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::ensureCursorVisible()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_ensureCursorVisible);

    if (!sipMeth)
    {
        QsciScintilla::ensureCursorVisible();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::ensureLineVisible(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_ensureLineVisible);

    if (!sipMeth)
    {
        QsciScintilla::ensureLineVisible(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::foldAll(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_foldAll);

    if (!sipMeth)
    {
        QsciScintilla::foldAll(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::foldLine(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_foldLine);

    if (!sipMeth)
    {
        QsciScintilla::foldLine(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::indent(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_indent);

    if (!sipMeth)
    {
        QsciScintilla::indent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::insert(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_insert);

    if (!sipMeth)
    {
        QsciScintilla::insert(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_Qsci_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::insertAt(const QString& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_insertAt);

    if (!sipMeth)
    {
        QsciScintilla::insertAt(a0,a1,a2);
        return;
    }

    extern void sipVH_Qsci_26(sip_gilstate_t,PyObject *,const QString&,int,int);

    sipVH_Qsci_26(sipGILState,sipMeth,a0,a1,a2);
}

void sipQsciScintilla::moveToMatchingBrace()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveToMatchingBrace);

    if (!sipMeth)
    {
        QsciScintilla::moveToMatchingBrace();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::paste()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_paste);

    if (!sipMeth)
    {
        QsciScintilla::paste();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::redo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_redo);

    if (!sipMeth)
    {
        QsciScintilla::redo();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::removeSelectedText()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_removeSelectedText);

    if (!sipMeth)
    {
        QsciScintilla::removeSelectedText();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::replaceSelectedText(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_replaceSelectedText);

    if (!sipMeth)
    {
        QsciScintilla::replaceSelectedText(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_Qsci_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::resetSelectionBackgroundColor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_resetSelectionBackgroundColor);

    if (!sipMeth)
    {
        QsciScintilla::resetSelectionBackgroundColor();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::resetSelectionForegroundColor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_resetSelectionForegroundColor);

    if (!sipMeth)
    {
        QsciScintilla::resetSelectionForegroundColor();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::selectAll(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QsciScintilla::selectAll(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::selectToMatchingBrace()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_selectToMatchingBrace);

    if (!sipMeth)
    {
        QsciScintilla::selectToMatchingBrace();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::setAutoCompletionCaseSensitivity(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_setAutoCompletionCaseSensitivity);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionCaseSensitivity(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoCompletionReplaceWord(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setAutoCompletionReplaceWord);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionReplaceWord(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoCompletionShowSingle(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setAutoCompletionShowSingle);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionShowSingle(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoCompletionSource(QsciScintilla::AutoCompletionSource a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setAutoCompletionSource);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionSource(a0);
        return;
    }

    extern void sipVH_Qsci_25(sip_gilstate_t,PyObject *,QsciScintilla::AutoCompletionSource);

    sipVH_Qsci_25(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoCompletionThreshold(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_setAutoCompletionThreshold);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionThreshold(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoCompletionUseSingle(QsciScintilla::AutoCompletionUseSingle a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_setAutoCompletionUseSingle);

    if (!sipMeth)
    {
        QsciScintilla::setAutoCompletionUseSingle(a0);
        return;
    }

    extern void sipVH_Qsci_24(sip_gilstate_t,PyObject *,QsciScintilla::AutoCompletionUseSingle);

    sipVH_Qsci_24(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setAutoIndent(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setAutoIndent);

    if (!sipMeth)
    {
        QsciScintilla::setAutoIndent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setBraceMatching(QsciScintilla::BraceMatch a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_setBraceMatching);

    if (!sipMeth)
    {
        QsciScintilla::setBraceMatching(a0);
        return;
    }

    extern void sipVH_Qsci_23(sip_gilstate_t,PyObject *,QsciScintilla::BraceMatch);

    sipVH_Qsci_23(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setBackspaceUnindents(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_setBackspaceUnindents);

    if (!sipMeth)
    {
        QsciScintilla::setBackspaceUnindents(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setCaretForegroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setCaretForegroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setCaretForegroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setCaretLineBackgroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_setCaretLineBackgroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setCaretLineBackgroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setCaretLineVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_setCaretLineVisible);

    if (!sipMeth)
    {
        QsciScintilla::setCaretLineVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setCaretWidth(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_setCaretWidth);

    if (!sipMeth)
    {
        QsciScintilla::setCaretWidth(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciScintilla::setColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setCursorPosition(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_setCursorPosition);

    if (!sipMeth)
    {
        QsciScintilla::setCursorPosition(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setEolMode(QsciScintilla::EolMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_setEolMode);

    if (!sipMeth)
    {
        QsciScintilla::setEolMode(a0);
        return;
    }

    extern void sipVH_Qsci_22(sip_gilstate_t,PyObject *,QsciScintilla::EolMode);

    sipVH_Qsci_22(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setEolVisibility(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_setEolVisibility);

    if (!sipMeth)
    {
        QsciScintilla::setEolVisibility(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setFolding(QsciScintilla::FoldStyle a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_setFolding);

    if (!sipMeth)
    {
        QsciScintilla::setFolding(a0,a1);
        return;
    }

    extern void sipVH_Qsci_21(sip_gilstate_t,PyObject *,QsciScintilla::FoldStyle,int);

    sipVH_Qsci_21(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setIndentation(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_setIndentation);

    if (!sipMeth)
    {
        QsciScintilla::setIndentation(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setIndentationGuides(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_setIndentationGuides);

    if (!sipMeth)
    {
        QsciScintilla::setIndentationGuides(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setIndentationGuidesBackgroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_setIndentationGuidesBackgroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setIndentationGuidesBackgroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setIndentationGuidesForegroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_setIndentationGuidesForegroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setIndentationGuidesForegroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setIndentationsUseTabs(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_setIndentationsUseTabs);

    if (!sipMeth)
    {
        QsciScintilla::setIndentationsUseTabs(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setIndentationWidth(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_setIndentationWidth);

    if (!sipMeth)
    {
        QsciScintilla::setIndentationWidth(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setLexer(QsciLexer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_setLexer);

    if (!sipMeth)
    {
        QsciScintilla::setLexer(a0);
        return;
    }

    extern void sipVH_Qsci_20(sip_gilstate_t,PyObject *,QsciLexer *);

    sipVH_Qsci_20(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setMarginsBackgroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_setMarginsBackgroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setMarginsBackgroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setMarginsFont(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_setMarginsFont);

    if (!sipMeth)
    {
        QsciScintilla::setMarginsFont(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t,PyObject *,const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_Qsci_QtGui->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setMarginsForegroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_setMarginsForegroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setMarginsForegroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setMarginLineNumbers(int a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_setMarginLineNumbers);

    if (!sipMeth)
    {
        QsciScintilla::setMarginLineNumbers(a0,a1);
        return;
    }

    extern void sipVH_Qsci_19(sip_gilstate_t,PyObject *,int,bool);

    sipVH_Qsci_19(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setMarginMarkerMask(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_setMarginMarkerMask);

    if (!sipMeth)
    {
        QsciScintilla::setMarginMarkerMask(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setMarginSensitivity(int a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_setMarginSensitivity);

    if (!sipMeth)
    {
        QsciScintilla::setMarginSensitivity(a0,a1);
        return;
    }

    extern void sipVH_Qsci_19(sip_gilstate_t,PyObject *,int,bool);

    sipVH_Qsci_19(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setMarginWidth(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_setMarginWidth);

    if (!sipMeth)
    {
        QsciScintilla::setMarginWidth(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setMarginWidth(int a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_setMarginWidth);

    if (!sipMeth)
    {
        QsciScintilla::setMarginWidth(a0,a1);
        return;
    }

    extern void sipVH_Qsci_18(sip_gilstate_t,PyObject *,int,const QString&);

    sipVH_Qsci_18(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::setModified(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_setModified);

    if (!sipMeth)
    {
        QsciScintilla::setModified(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setPaper(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciScintilla::setPaper(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setReadOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_setReadOnly);

    if (!sipMeth)
    {
        QsciScintilla::setReadOnly(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setSelection(int a0,int a1,int a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QsciScintilla::setSelection(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_Qsci_17(sip_gilstate_t,PyObject *,int,int,int,int);

    sipVH_Qsci_17(sipGILState,sipMeth,a0,a1,a2,a3);
}

void sipQsciScintilla::setSelectionBackgroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_setSelectionBackgroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setSelectionBackgroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setSelectionForegroundColor(const QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_setSelectionForegroundColor);

    if (!sipMeth)
    {
        QsciScintilla::setSelectionForegroundColor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_151)(sip_gilstate_t,PyObject *,const QColor&);

    ((sipVH_QtGui_151)(sipModuleAPI_Qsci_QtGui->em_virthandlers[151]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setTabIndents(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_setTabIndents);

    if (!sipMeth)
    {
        QsciScintilla::setTabIndents(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setTabWidth(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_setTabWidth);

    if (!sipMeth)
    {
        QsciScintilla::setTabWidth(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setText(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_setText);

    if (!sipMeth)
    {
        QsciScintilla::setText(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_Qsci_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setUtf8(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_setUtf8);

    if (!sipMeth)
    {
        QsciScintilla::setUtf8(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setWhitespaceVisibility(QsciScintilla::WhitespaceVisibility a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_setWhitespaceVisibility);

    if (!sipMeth)
    {
        QsciScintilla::setWhitespaceVisibility(a0);
        return;
    }

    extern void sipVH_Qsci_16(sip_gilstate_t,PyObject *,QsciScintilla::WhitespaceVisibility);

    sipVH_Qsci_16(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::setWrapMode(QsciScintilla::WrapMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_setWrapMode);

    if (!sipMeth)
    {
        QsciScintilla::setWrapMode(a0);
        return;
    }

    extern void sipVH_Qsci_2(sip_gilstate_t,PyObject *,QsciScintilla::WrapMode);

    sipVH_Qsci_2(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::undo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_undo);

    if (!sipMeth)
    {
        QsciScintilla::undo();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::unindent(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_unindent);

    if (!sipMeth)
    {
        QsciScintilla::unindent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::zoomIn(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_zoomIn);

    if (!sipMeth)
    {
        QsciScintilla::zoomIn(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::zoomIn()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_zoomIn);

    if (!sipMeth)
    {
        QsciScintilla::zoomIn();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::zoomOut(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_zoomOut);

    if (!sipMeth)
    {
        QsciScintilla::zoomOut(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::zoomOut()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_zoomOut);

    if (!sipMeth)
    {
        QsciScintilla::zoomOut();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void sipQsciScintilla::zoomTo(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_zoomTo);

    if (!sipMeth)
    {
        QsciScintilla::zoomTo(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

bool sipQsciScintilla::canInsertFromMimeData(const QMimeData *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!sipMeth)
        return QsciScintillaBase::canInsertFromMimeData(a0);

    typedef bool (*sipVH_QtGui_60)(sip_gilstate_t,PyObject *,const QMimeData *);

    return ((sipVH_QtGui_60)(sipModuleAPI_Qsci_QtGui->em_virthandlers[60]))(sipGILState,sipMeth,a0);
}

QByteArray sipQsciScintilla::fromMimeData(const QMimeData *a0,bool& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_fromMimeData);

    if (!sipMeth)
        return QsciScintillaBase::fromMimeData(a0,a1);

    extern QByteArray sipVH_Qsci_1(sip_gilstate_t,PyObject *,const QMimeData *,bool&);

    return sipVH_Qsci_1(sipGILState,sipMeth,a0,a1);
}

QMimeData * sipQsciScintilla::toMimeData(const QByteArray& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_toMimeData);

    if (!sipMeth)
        return QsciScintillaBase::toMimeData(a0,a1);

    extern QMimeData * sipVH_Qsci_0(sip_gilstate_t,PyObject *,const QByteArray&,bool);

    return sipVH_Qsci_0(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    ((sipVH_QtGui_21)(sipModuleAPI_Qsci_QtGui->em_virthandlers[21]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    ((sipVH_QtGui_18)(sipModuleAPI_Qsci_QtGui->em_virthandlers[18]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    ((sipVH_QtGui_16)(sipModuleAPI_Qsci_QtGui->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    ((sipVH_QtGui_17)(sipModuleAPI_Qsci_QtGui->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,QDropEvent *);

    ((sipVH_QtGui_15)(sipModuleAPI_Qsci_QtGui->em_virthandlers[15]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_Qsci_QtGui->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[90],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_Qsci_QtGui->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

bool sipQsciScintilla::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[91],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QsciScintillaBase::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_Qsci_QtGui->em_virthandlers[11]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[92],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_Qsci_QtGui->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[93],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    ((sipVH_QtGui_13)(sipModuleAPI_Qsci_QtGui->em_virthandlers[13]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[94],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_Qsci_QtGui->em_virthandlers[26]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[95],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_Qsci_QtGui->em_virthandlers[26]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[96],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_Qsci_QtGui->em_virthandlers[26]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[97],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_Qsci_QtGui->em_virthandlers[26]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[98],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *,QPaintEvent *);

    ((sipVH_QtGui_4)(sipModuleAPI_Qsci_QtGui->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[99],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QsciScintillaBase::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t,PyObject *,QResizeEvent *);

    ((sipVH_QtGui_3)(sipModuleAPI_Qsci_QtGui->em_virthandlers[3]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[100],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QsciScintillaBase::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_Qsci_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

QSize sipQsciScintilla::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[101]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractScrollArea::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_5)(sipModuleAPI_Qsci_QtGui->em_virthandlers[5]))(sipGILState,sipMeth);
}

QSize sipQsciScintilla::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[102]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractScrollArea::sizeHint();

    typedef QSize (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_5)(sipModuleAPI_Qsci_QtGui->em_virthandlers[5]))(sipGILState,sipMeth);
}

bool sipQsciScintilla::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[103],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractScrollArea::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState,sipMeth,a0);
}

bool sipQsciScintilla::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[104],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QAbstractScrollArea::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[105],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t,PyObject *,QWheelEvent *);

    ((sipVH_QtGui_0)(sipModuleAPI_Qsci_QtGui->em_virthandlers[0]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[106],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

int sipQsciScintilla::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[107]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

void sipQsciScintilla::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[108],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

int sipQsciScintilla::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[109]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_28)(sipModuleAPI_Qsci_QtGui->em_virthandlers[28]))(sipGILState,sipMeth,a0);
}

QPaintEngine * sipQsciScintilla::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[110]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QWidget::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_Qsci_QtGui->em_virthandlers[27]))(sipGILState,sipMeth);
}

void sipQsciScintilla::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[111],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_Qsci_QtGui->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[112],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[113],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[114],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t,PyObject *,QMoveEvent *);

    ((sipVH_QtGui_23)(sipModuleAPI_Qsci_QtGui->em_virthandlers[23]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[115],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,QCloseEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_Qsci_QtGui->em_virthandlers[22]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[116],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t,PyObject *,QTabletEvent *);

    ((sipVH_QtGui_20)(sipModuleAPI_Qsci_QtGui->em_virthandlers[20]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[117],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t,PyObject *,QActionEvent *);

    ((sipVH_QtGui_19)(sipModuleAPI_Qsci_QtGui->em_virthandlers[19]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[118],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,QShowEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_Qsci_QtGui->em_virthandlers[2]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[119],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,QHideEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_Qsci_QtGui->em_virthandlers[1]))(sipGILState,sipMeth,a0);
}

int sipQsciScintilla::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[120]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_Qsci_QtGui->em_virthandlers[14]))(sipGILState,sipMeth,a0);
}

QVariant sipQsciScintilla::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[121]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_Qsci_QtGui->em_virthandlers[12]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[122],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[123],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t,PyObject *,const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_Qsci_QtGui->em_virthandlers[10]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[124],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t,PyObject *,const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_Qsci_QtGui->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[125],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[126],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

bool sipQsciScintilla::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[127],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciScintilla::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[128],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[129],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[130],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[131],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

void sipQsciScintilla::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[132],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_QsciScintilla_apiContext, "QsciScintilla.apiContext(int) -> (QStringList, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_apiContext(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_apiContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QsciScintilla::apiContext(a0,a1,a2) : sipCpp->apiContext(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
            return sipBuildResult(0,"(Rii)",sipResObj,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_apiContext, doc_QsciScintilla_apiContext);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_annotate, "QsciScintilla.annotate(int, QString, int)\n"
    "QsciScintilla.annotate(int, QString, QsciStyle)\n"
    "QsciScintilla.annotate(int, QsciStyledText)\n"
    "QsciScintilla.annotate(int, list-of-QsciStyledText)");

extern "C" {static PyObject *meth_QsciScintilla_annotate(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_annotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        int a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->annotate(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        const QsciStyle * a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J9", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QsciStyle, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->annotate(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QsciStyledText * a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QsciStyledText, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->annotate(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QList<QsciStyledText> * a1;
        int a1State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QList_0100QsciStyledText,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->annotate(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QsciStyledText> *>(a1),sipType_QList_0100QsciStyledText,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_annotate, doc_QsciScintilla_annotate);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_annotation, "QsciScintilla.annotation(int) -> QString");

extern "C" {static PyObject *meth_QsciScintilla_annotation(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_annotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->annotation(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_annotation, doc_QsciScintilla_annotation);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_annotationDisplay, "QsciScintilla.annotationDisplay() -> QsciScintilla.AnnotationDisplay");

extern "C" {static PyObject *meth_QsciScintilla_annotationDisplay(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_annotationDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::AnnotationDisplay sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->annotationDisplay();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_AnnotationDisplay);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_annotationDisplay, doc_QsciScintilla_annotationDisplay);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clearAnnotations, "QsciScintilla.clearAnnotations(int line=-1)");

extern "C" {static PyObject *meth_QsciScintilla_clearAnnotations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clearAnnotations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearAnnotations(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clearAnnotations, doc_QsciScintilla_clearAnnotations);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionCaseSensitivity, "QsciScintilla.autoCompletionCaseSensitivity() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionCaseSensitivity();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionCaseSensitivity, doc_QsciScintilla_autoCompletionCaseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionFillupsEnabled, "QsciScintilla.autoCompletionFillupsEnabled() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionFillupsEnabled(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionFillupsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionFillupsEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionFillupsEnabled, doc_QsciScintilla_autoCompletionFillupsEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionReplaceWord, "QsciScintilla.autoCompletionReplaceWord() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionReplaceWord(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionReplaceWord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionReplaceWord();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionReplaceWord, doc_QsciScintilla_autoCompletionReplaceWord);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionShowSingle, "QsciScintilla.autoCompletionShowSingle() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionShowSingle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionShowSingle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionShowSingle();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionShowSingle, doc_QsciScintilla_autoCompletionShowSingle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionSource, "QsciScintilla.autoCompletionSource() -> QsciScintilla.AutoCompletionSource");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionSource(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::AutoCompletionSource sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionSource();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_AutoCompletionSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionSource, doc_QsciScintilla_autoCompletionSource);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionThreshold, "QsciScintilla.autoCompletionThreshold() -> int");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionThreshold(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionThreshold();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionThreshold, doc_QsciScintilla_autoCompletionThreshold);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompletionUseSingle, "QsciScintilla.autoCompletionUseSingle() -> QsciScintilla.AutoCompletionUseSingle");

extern "C" {static PyObject *meth_QsciScintilla_autoCompletionUseSingle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompletionUseSingle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::AutoCompletionUseSingle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoCompletionUseSingle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_AutoCompletionUseSingle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompletionUseSingle, doc_QsciScintilla_autoCompletionUseSingle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoIndent, "QsciScintilla.autoIndent() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_autoIndent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoIndent();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoIndent, doc_QsciScintilla_autoIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_backspaceUnindents, "QsciScintilla.backspaceUnindents() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_backspaceUnindents(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_backspaceUnindents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->backspaceUnindents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_backspaceUnindents, doc_QsciScintilla_backspaceUnindents);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_beginUndoAction, "QsciScintilla.beginUndoAction()");

extern "C" {static PyObject *meth_QsciScintilla_beginUndoAction(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_beginUndoAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginUndoAction();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_beginUndoAction, doc_QsciScintilla_beginUndoAction);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_braceMatching, "QsciScintilla.braceMatching() -> QsciScintilla.BraceMatch");

extern "C" {static PyObject *meth_QsciScintilla_braceMatching(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_braceMatching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::BraceMatch sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->braceMatching();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_BraceMatch);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_braceMatching, doc_QsciScintilla_braceMatching);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_callTipsStyle, "QsciScintilla.callTipsStyle() -> QsciScintilla.CallTipsStyle");

extern "C" {static PyObject *meth_QsciScintilla_callTipsStyle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_callTipsStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::CallTipsStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->callTipsStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_CallTipsStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_callTipsStyle, doc_QsciScintilla_callTipsStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_callTipsVisible, "QsciScintilla.callTipsVisible() -> int");

extern "C" {static PyObject *meth_QsciScintilla_callTipsVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_callTipsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->callTipsVisible();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_callTipsVisible, doc_QsciScintilla_callTipsVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_cancelList, "QsciScintilla.cancelList()");

extern "C" {static PyObject *meth_QsciScintilla_cancelList(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_cancelList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cancelList();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_cancelList, doc_QsciScintilla_cancelList);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_caseSensitive, "QsciScintilla.caseSensitive() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_caseSensitive(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_caseSensitive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->caseSensitive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_caseSensitive, doc_QsciScintilla_caseSensitive);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clearRegisteredImages, "QsciScintilla.clearRegisteredImages()");

extern "C" {static PyObject *meth_QsciScintilla_clearRegisteredImages(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clearRegisteredImages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearRegisteredImages();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clearRegisteredImages, doc_QsciScintilla_clearRegisteredImages);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_color, "QsciScintilla.color() -> QColor");

extern "C" {static PyObject *meth_QsciScintilla_color(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->color());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_color, doc_QsciScintilla_color);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_contractedFolds, "QsciScintilla.contractedFolds() -> list-of-int");

extern "C" {static PyObject *meth_QsciScintilla_contractedFolds(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_contractedFolds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QList<int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->contractedFolds());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_contractedFolds, doc_QsciScintilla_contractedFolds);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_convertEols, "QsciScintilla.convertEols(QsciScintilla.EolMode)");

extern "C" {static PyObject *meth_QsciScintilla_convertEols(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_convertEols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::EolMode a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_EolMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->convertEols(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_convertEols, doc_QsciScintilla_convertEols);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_document, "QsciScintilla.document() -> QsciDocument");

extern "C" {static PyObject *meth_QsciScintilla_document(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QsciDocument(sipCpp->document());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QsciDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_document, doc_QsciScintilla_document);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_endUndoAction, "QsciScintilla.endUndoAction()");

extern "C" {static PyObject *meth_QsciScintilla_endUndoAction(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_endUndoAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endUndoAction();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_endUndoAction, doc_QsciScintilla_endUndoAction);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_edgeColor, "QsciScintilla.edgeColor() -> QColor");

extern "C" {static PyObject *meth_QsciScintilla_edgeColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_edgeColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->edgeColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_edgeColor, doc_QsciScintilla_edgeColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_edgeColumn, "QsciScintilla.edgeColumn() -> int");

extern "C" {static PyObject *meth_QsciScintilla_edgeColumn(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_edgeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->edgeColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_edgeColumn, doc_QsciScintilla_edgeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_edgeMode, "QsciScintilla.edgeMode() -> QsciScintilla.EdgeMode");

extern "C" {static PyObject *meth_QsciScintilla_edgeMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_edgeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::EdgeMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->edgeMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_EdgeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_edgeMode, doc_QsciScintilla_edgeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_eolMode, "QsciScintilla.eolMode() -> QsciScintilla.EolMode");

extern "C" {static PyObject *meth_QsciScintilla_eolMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_eolMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::EolMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->eolMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_EolMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_eolMode, doc_QsciScintilla_eolMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_eolVisibility, "QsciScintilla.eolVisibility() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_eolVisibility(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_eolVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->eolVisibility();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_eolVisibility, doc_QsciScintilla_eolVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_extraAscent, "QsciScintilla.extraAscent() -> int");

extern "C" {static PyObject *meth_QsciScintilla_extraAscent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_extraAscent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->extraAscent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_extraAscent, doc_QsciScintilla_extraAscent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_extraDescent, "QsciScintilla.extraDescent() -> int");

extern "C" {static PyObject *meth_QsciScintilla_extraDescent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_extraDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->extraDescent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_extraDescent, doc_QsciScintilla_extraDescent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_findFirst, "QsciScintilla.findFirst(QString, bool, bool, bool, bool, bool forward=True, int line=-1, int index=-1, bool show=True) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_findFirst(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_findFirst(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        bool a2;
        bool a3;
        bool a4;
        bool a5 = 1;
        int a6 = -1;
        int a7 = -1;
        bool a8 = 1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_forward,
            sipName_line,
            sipName_index,
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1bbbb|biib", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciScintilla::findFirst(*a0,a1,a2,a3,a4,a5,a6,a7,a8) : sipCpp->findFirst(*a0,a1,a2,a3,a4,a5,a6,a7,a8));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_findFirst, doc_QsciScintilla_findFirst);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_findNext, "QsciScintilla.findNext() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_findNext(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_findNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciScintilla::findNext() : sipCpp->findNext());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_findNext, doc_QsciScintilla_findNext);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_firstVisibleLine, "QsciScintilla.firstVisibleLine() -> int");

extern "C" {static PyObject *meth_QsciScintilla_firstVisibleLine(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_firstVisibleLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->firstVisibleLine();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_firstVisibleLine, doc_QsciScintilla_firstVisibleLine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_folding, "QsciScintilla.folding() -> QsciScintilla.FoldStyle");

extern "C" {static PyObject *meth_QsciScintilla_folding(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_folding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::FoldStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->folding();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_FoldStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_folding, doc_QsciScintilla_folding);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_getCursorPosition, "QsciScintilla.getCursorPosition() -> (int, int)");

extern "C" {static PyObject *meth_QsciScintilla_getCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_getCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getCursorPosition(&a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ii)",a0,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_getCursorPosition, doc_QsciScintilla_getCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_getSelection, "QsciScintilla.getSelection() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_getSelection(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_getSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getSelection(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_getSelection, doc_QsciScintilla_getSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_hasSelectedText, "QsciScintilla.hasSelectedText() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelectedText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_hasSelectedText, doc_QsciScintilla_hasSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indentation, "QsciScintilla.indentation(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_indentation(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentation(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indentation, doc_QsciScintilla_indentation);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indentationGuides, "QsciScintilla.indentationGuides() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_indentationGuides(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indentationGuides(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentationGuides();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indentationGuides, doc_QsciScintilla_indentationGuides);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indentationsUseTabs, "QsciScintilla.indentationsUseTabs() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_indentationsUseTabs(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indentationsUseTabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentationsUseTabs();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indentationsUseTabs, doc_QsciScintilla_indentationsUseTabs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indentationWidth, "QsciScintilla.indentationWidth() -> int");

extern "C" {static PyObject *meth_QsciScintilla_indentationWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indentationWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentationWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indentationWidth, doc_QsciScintilla_indentationWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clearIndicatorRange, "QsciScintilla.clearIndicatorRange(int, int, int, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_clearIndicatorRange(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clearIndicatorRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearIndicatorRange(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clearIndicatorRange, doc_QsciScintilla_clearIndicatorRange);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_fillIndicatorRange, "QsciScintilla.fillIndicatorRange(int, int, int, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_fillIndicatorRange(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_fillIndicatorRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillIndicatorRange(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_fillIndicatorRange, doc_QsciScintilla_fillIndicatorRange);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indicatorDefine, "QsciScintilla.indicatorDefine(QsciScintilla.IndicatorStyle, int indicatorNumber=-1) -> int");

extern "C" {static PyObject *meth_QsciScintilla_indicatorDefine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indicatorDefine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::IndicatorStyle a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_indicatorNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_IndicatorStyle, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indicatorDefine(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indicatorDefine, doc_QsciScintilla_indicatorDefine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indicatorDrawUnder, "QsciScintilla.indicatorDrawUnder(int) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_indicatorDrawUnder(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indicatorDrawUnder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indicatorDrawUnder(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indicatorDrawUnder, doc_QsciScintilla_indicatorDrawUnder);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isCallTipActive, "QsciScintilla.isCallTipActive() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isCallTipActive(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isCallTipActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCallTipActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isCallTipActive, doc_QsciScintilla_isCallTipActive);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isListActive, "QsciScintilla.isListActive() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isListActive(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isListActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isListActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isListActive, doc_QsciScintilla_isListActive);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isModified, "QsciScintilla.isModified() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isModified(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isModified, doc_QsciScintilla_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isReadOnly, "QsciScintilla.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isReadOnly, doc_QsciScintilla_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isRedoAvailable, "QsciScintilla.isRedoAvailable() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRedoAvailable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isRedoAvailable, doc_QsciScintilla_isRedoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isUndoAvailable, "QsciScintilla.isUndoAvailable() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndoAvailable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isUndoAvailable, doc_QsciScintilla_isUndoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isUtf8, "QsciScintilla.isUtf8() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isUtf8(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUtf8();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isUtf8, doc_QsciScintilla_isUtf8);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_isWordCharacter, "QsciScintilla.isWordCharacter(str) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_isWordCharacter(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_isWordCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWordCharacter(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_isWordCharacter, doc_QsciScintilla_isWordCharacter);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_lineAt, "QsciScintilla.lineAt(QPoint) -> int");

extern "C" {static PyObject *meth_QsciScintilla_lineAt(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_lineAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineAt(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_lineAt, doc_QsciScintilla_lineAt);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_lineIndexFromPosition, "QsciScintilla.lineIndexFromPosition(int) -> (int, int)");

extern "C" {static PyObject *meth_QsciScintilla_lineIndexFromPosition(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_lineIndexFromPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lineIndexFromPosition(a0,&a1,&a2);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ii)",a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_lineIndexFromPosition, doc_QsciScintilla_lineIndexFromPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_lineLength, "QsciScintilla.lineLength(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_lineLength(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_lineLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineLength(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_lineLength, doc_QsciScintilla_lineLength);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_lines, "QsciScintilla.lines() -> int");

extern "C" {static PyObject *meth_QsciScintilla_lines(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_lines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lines();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_lines, doc_QsciScintilla_lines);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_length, "QsciScintilla.length() -> int");

extern "C" {static PyObject *meth_QsciScintilla_length(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_length, doc_QsciScintilla_length);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_lexer, "QsciScintilla.lexer() -> QsciLexer");

extern "C" {static PyObject *meth_QsciScintilla_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciLexer *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lexer();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QsciLexer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_lexer, doc_QsciScintilla_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_marginLineNumbers, "QsciScintilla.marginLineNumbers(int) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_marginLineNumbers(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_marginLineNumbers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->marginLineNumbers(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_marginLineNumbers, doc_QsciScintilla_marginLineNumbers);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_marginMarkerMask, "QsciScintilla.marginMarkerMask(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_marginMarkerMask(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_marginMarkerMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->marginMarkerMask(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_marginMarkerMask, doc_QsciScintilla_marginMarkerMask);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_marginSensitivity, "QsciScintilla.marginSensitivity(int) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_marginSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_marginSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->marginSensitivity(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_marginSensitivity, doc_QsciScintilla_marginSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_marginType, "QsciScintilla.marginType(int) -> QsciScintilla.MarginType");

extern "C" {static PyObject *meth_QsciScintilla_marginType(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_marginType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            QsciScintilla::MarginType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->marginType(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_MarginType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_marginType, doc_QsciScintilla_marginType);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_marginWidth, "QsciScintilla.marginWidth(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_marginWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_marginWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->marginWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_marginWidth, doc_QsciScintilla_marginWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerDefine, "QsciScintilla.markerDefine(QsciScintilla.MarkerSymbol, int markerNumber=-1) -> int\n"
    "QsciScintilla.markerDefine(str, int markerNumber=-1) -> int\n"
    "QsciScintilla.markerDefine(QPixmap, int markerNumber=-1) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markerDefine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerDefine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::MarkerSymbol a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_MarkerSymbol, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerDefine(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        char a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bc|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerDefine(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QPixmap * a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QPixmap, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerDefine(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerDefine, doc_QsciScintilla_markerDefine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerAdd, "QsciScintilla.markerAdd(int, int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markerAdd(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerAdd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerAdd(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerAdd, doc_QsciScintilla_markerAdd);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markersAtLine, "QsciScintilla.markersAtLine(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markersAtLine(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markersAtLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markersAtLine(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markersAtLine, doc_QsciScintilla_markersAtLine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerDelete, "QsciScintilla.markerDelete(int, int markerNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_markerDelete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerDelete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->markerDelete(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerDelete, doc_QsciScintilla_markerDelete);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerDeleteAll, "QsciScintilla.markerDeleteAll(int markerNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_markerDeleteAll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerDeleteAll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->markerDeleteAll(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerDeleteAll, doc_QsciScintilla_markerDeleteAll);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerDeleteHandle, "QsciScintilla.markerDeleteHandle(int)");

extern "C" {static PyObject *meth_QsciScintilla_markerDeleteHandle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerDeleteHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->markerDeleteHandle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerDeleteHandle, doc_QsciScintilla_markerDeleteHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerLine, "QsciScintilla.markerLine(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markerLine(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerLine(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerLine, doc_QsciScintilla_markerLine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerFindNext, "QsciScintilla.markerFindNext(int, int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markerFindNext(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerFindNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        uint a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biu", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerFindNext(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerFindNext, doc_QsciScintilla_markerFindNext);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_markerFindPrevious, "QsciScintilla.markerFindPrevious(int, int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_markerFindPrevious(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_markerFindPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        uint a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biu", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->markerFindPrevious(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_markerFindPrevious, doc_QsciScintilla_markerFindPrevious);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_paper, "QsciScintilla.paper() -> QColor");

extern "C" {static PyObject *meth_QsciScintilla_paper(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_paper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->paper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_paper, doc_QsciScintilla_paper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_positionFromLineIndex, "QsciScintilla.positionFromLineIndex(int, int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_positionFromLineIndex(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_positionFromLineIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->positionFromLineIndex(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_positionFromLineIndex, doc_QsciScintilla_positionFromLineIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_read, "QsciScintilla.read(QIODevice) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_read(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->read(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_read, doc_QsciScintilla_read);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_recolor, "QsciScintilla.recolor(int start=0, int end=-1)");

extern "C" {static PyObject *meth_QsciScintilla_recolor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_recolor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
            sipName_end,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|ii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::recolor(a0,a1) : sipCpp->recolor(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_recolor, doc_QsciScintilla_recolor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_registerImage, "QsciScintilla.registerImage(int, QPixmap)");

extern "C" {static PyObject *meth_QsciScintilla_registerImage(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_registerImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPixmap * a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerImage(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_registerImage, doc_QsciScintilla_registerImage);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_replace, "QsciScintilla.replace(QString)");

extern "C" {static PyObject *meth_QsciScintilla_replace(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::replace(*a0) : sipCpp->replace(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_replace, doc_QsciScintilla_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_resetFoldMarginColors, "QsciScintilla.resetFoldMarginColors()");

extern "C" {static PyObject *meth_QsciScintilla_resetFoldMarginColors(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_resetFoldMarginColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetFoldMarginColors();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_resetFoldMarginColors, doc_QsciScintilla_resetFoldMarginColors);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setFoldMarginColors, "QsciScintilla.setFoldMarginColors(QColor, QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setFoldMarginColors(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setFoldMarginColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        const QColor * a1;
        int a1State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFoldMarginColors(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setFoldMarginColors, doc_QsciScintilla_setFoldMarginColors);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAnnotationDisplay, "QsciScintilla.setAnnotationDisplay(QsciScintilla.AnnotationDisplay)");

extern "C" {static PyObject *meth_QsciScintilla_setAnnotationDisplay(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAnnotationDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::AnnotationDisplay a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_AnnotationDisplay, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnnotationDisplay(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAnnotationDisplay, doc_QsciScintilla_setAnnotationDisplay);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionFillupsEnabled, "QsciScintilla.setAutoCompletionFillupsEnabled(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionFillupsEnabled(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionFillupsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoCompletionFillupsEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionFillupsEnabled, doc_QsciScintilla_setAutoCompletionFillupsEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionFillups, "QsciScintilla.setAutoCompletionFillups(str)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionFillups(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionFillups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoCompletionFillups(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionFillups, doc_QsciScintilla_setAutoCompletionFillups);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionWordSeparators, "QsciScintilla.setAutoCompletionWordSeparators(QStringList)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionWordSeparators(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionWordSeparators(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoCompletionWordSeparators(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionWordSeparators, doc_QsciScintilla_setAutoCompletionWordSeparators);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCallTipsBackgroundColor, "QsciScintilla.setCallTipsBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setCallTipsBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCallTipsBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCallTipsBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCallTipsBackgroundColor, doc_QsciScintilla_setCallTipsBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCallTipsForegroundColor, "QsciScintilla.setCallTipsForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setCallTipsForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCallTipsForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCallTipsForegroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCallTipsForegroundColor, doc_QsciScintilla_setCallTipsForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCallTipsHighlightColor, "QsciScintilla.setCallTipsHighlightColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setCallTipsHighlightColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCallTipsHighlightColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCallTipsHighlightColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCallTipsHighlightColor, doc_QsciScintilla_setCallTipsHighlightColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCallTipsStyle, "QsciScintilla.setCallTipsStyle(QsciScintilla.CallTipsStyle)");

extern "C" {static PyObject *meth_QsciScintilla_setCallTipsStyle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCallTipsStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::CallTipsStyle a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_CallTipsStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCallTipsStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCallTipsStyle, doc_QsciScintilla_setCallTipsStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCallTipsVisible, "QsciScintilla.setCallTipsVisible(int)");

extern "C" {static PyObject *meth_QsciScintilla_setCallTipsVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCallTipsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCallTipsVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCallTipsVisible, doc_QsciScintilla_setCallTipsVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setContractedFolds, "QsciScintilla.setContractedFolds(list-of-int)");

extern "C" {static PyObject *meth_QsciScintilla_setContractedFolds(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setContractedFolds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<int> * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QList_1800,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContractedFolds(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<int> *>(a0),sipType_QList_1800,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setContractedFolds, doc_QsciScintilla_setContractedFolds);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setDocument, "QsciScintilla.setDocument(QsciDocument)");

extern "C" {static PyObject *meth_QsciScintilla_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciDocument * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setDocument, doc_QsciScintilla_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setEdgeColor, "QsciScintilla.setEdgeColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setEdgeColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setEdgeColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEdgeColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setEdgeColor, doc_QsciScintilla_setEdgeColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setEdgeColumn, "QsciScintilla.setEdgeColumn(int)");

extern "C" {static PyObject *meth_QsciScintilla_setEdgeColumn(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setEdgeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEdgeColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setEdgeColumn, doc_QsciScintilla_setEdgeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setEdgeMode, "QsciScintilla.setEdgeMode(QsciScintilla.EdgeMode)");

extern "C" {static PyObject *meth_QsciScintilla_setEdgeMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setEdgeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::EdgeMode a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_EdgeMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEdgeMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setEdgeMode, doc_QsciScintilla_setEdgeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setFirstVisibleLine, "QsciScintilla.setFirstVisibleLine(int)");

extern "C" {static PyObject *meth_QsciScintilla_setFirstVisibleLine(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setFirstVisibleLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstVisibleLine(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setFirstVisibleLine, doc_QsciScintilla_setFirstVisibleLine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setFont, "QsciScintilla.setFont(QFont)");

extern "C" {static PyObject *meth_QsciScintilla_setFont(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setFont, doc_QsciScintilla_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndicatorDrawUnder, "QsciScintilla.setIndicatorDrawUnder(bool, int indicatorNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_setIndicatorDrawUnder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndicatorDrawUnder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_indicatorNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndicatorDrawUnder(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndicatorDrawUnder, doc_QsciScintilla_setIndicatorDrawUnder);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndicatorForegroundColor, "QsciScintilla.setIndicatorForegroundColor(QColor, int indicatorNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_setIndicatorForegroundColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndicatorForegroundColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_indicatorNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndicatorForegroundColor(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndicatorForegroundColor, doc_QsciScintilla_setIndicatorForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginText, "QsciScintilla.setMarginText(int, QString, int)\n"
    "QsciScintilla.setMarginText(int, QString, QsciStyle)\n"
    "QsciScintilla.setMarginText(int, QsciStyledText)\n"
    "QsciScintilla.setMarginText(int, list-of-QsciStyledText)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        int a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarginText(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        const QsciStyle * a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J9", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QsciStyle, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarginText(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QsciStyledText * a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QsciStyledText, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarginText(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QList<QsciStyledText> * a1;
        int a1State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QList_0100QsciStyledText,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarginText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QsciStyledText> *>(a1),sipType_QList_0100QsciStyledText,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginText, doc_QsciScintilla_setMarginText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginType, "QsciScintilla.setMarginType(int, QsciScintilla.MarginType)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginType(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla::MarginType a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QsciScintilla_MarginType, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarginType(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginType, doc_QsciScintilla_setMarginType);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clearMarginText, "QsciScintilla.clearMarginText(int line=-1)");

extern "C" {static PyObject *meth_QsciScintilla_clearMarginText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clearMarginText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMarginText(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clearMarginText, doc_QsciScintilla_clearMarginText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarkerBackgroundColor, "QsciScintilla.setMarkerBackgroundColor(QColor, int markerNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_setMarkerBackgroundColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarkerBackgroundColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarkerBackgroundColor(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarkerBackgroundColor, doc_QsciScintilla_setMarkerBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarkerForegroundColor, "QsciScintilla.setMarkerForegroundColor(QColor, int markerNumber=-1)");

extern "C" {static PyObject *meth_QsciScintilla_setMarkerForegroundColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarkerForegroundColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        int a1 = -1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_markerNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMarkerForegroundColor(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarkerForegroundColor, doc_QsciScintilla_setMarkerForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMatchedBraceBackgroundColor, "QsciScintilla.setMatchedBraceBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setMatchedBraceBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMatchedBraceBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatchedBraceBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMatchedBraceBackgroundColor, doc_QsciScintilla_setMatchedBraceBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMatchedBraceForegroundColor, "QsciScintilla.setMatchedBraceForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setMatchedBraceForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMatchedBraceForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatchedBraceForegroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMatchedBraceForegroundColor, doc_QsciScintilla_setMatchedBraceForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setUnmatchedBraceBackgroundColor, "QsciScintilla.setUnmatchedBraceBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setUnmatchedBraceBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setUnmatchedBraceBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnmatchedBraceBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setUnmatchedBraceBackgroundColor, doc_QsciScintilla_setUnmatchedBraceBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setUnmatchedBraceForegroundColor, "QsciScintilla.setUnmatchedBraceForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setUnmatchedBraceForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setUnmatchedBraceForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnmatchedBraceForegroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setUnmatchedBraceForegroundColor, doc_QsciScintilla_setUnmatchedBraceForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWrapVisualFlags, "QsciScintilla.setWrapVisualFlags(QsciScintilla.WrapVisualFlag, QsciScintilla.WrapVisualFlag startFlag=QsciScintilla.WrapFlagNone, int indent=0)");

extern "C" {static PyObject *meth_QsciScintilla_setWrapVisualFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWrapVisualFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::WrapVisualFlag a0;
        QsciScintilla::WrapVisualFlag a1 = QsciScintilla::WrapFlagNone;
        int a2 = 0;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_startFlag,
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|Ei", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_WrapVisualFlag, &a0, sipType_QsciScintilla_WrapVisualFlag, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapVisualFlags(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWrapVisualFlags, doc_QsciScintilla_setWrapVisualFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_selectedText, "QsciScintilla.selectedText() -> QString");

extern "C" {static PyObject *meth_QsciScintilla_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_selectedText, doc_QsciScintilla_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_selectionToEol, "QsciScintilla.selectionToEol() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_selectionToEol(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_selectionToEol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionToEol();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_selectionToEol, doc_QsciScintilla_selectionToEol);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setSelectionToEol, "QsciScintilla.setSelectionToEol(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setSelectionToEol(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setSelectionToEol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionToEol(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setSelectionToEol, doc_QsciScintilla_setSelectionToEol);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setExtraAscent, "QsciScintilla.setExtraAscent(int)");

extern "C" {static PyObject *meth_QsciScintilla_setExtraAscent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setExtraAscent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraAscent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setExtraAscent, doc_QsciScintilla_setExtraAscent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setExtraDescent, "QsciScintilla.setExtraDescent(int)");

extern "C" {static PyObject *meth_QsciScintilla_setExtraDescent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setExtraDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraDescent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setExtraDescent, doc_QsciScintilla_setExtraDescent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWhitespaceBackgroundColor, "QsciScintilla.setWhitespaceBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setWhitespaceBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWhitespaceBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhitespaceBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWhitespaceBackgroundColor, doc_QsciScintilla_setWhitespaceBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWhitespaceForegroundColor, "QsciScintilla.setWhitespaceForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setWhitespaceForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWhitespaceForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhitespaceForegroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWhitespaceForegroundColor, doc_QsciScintilla_setWhitespaceForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWhitespaceSize, "QsciScintilla.setWhitespaceSize(int)");

extern "C" {static PyObject *meth_QsciScintilla_setWhitespaceSize(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWhitespaceSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhitespaceSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWhitespaceSize, doc_QsciScintilla_setWhitespaceSize);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWrapIndentMode, "QsciScintilla.setWrapIndentMode(QsciScintilla.WrapIndentMode)");

extern "C" {static PyObject *meth_QsciScintilla_setWrapIndentMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWrapIndentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla::WrapIndentMode a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_WrapIndentMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapIndentMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWrapIndentMode, doc_QsciScintilla_setWrapIndentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_showUserList, "QsciScintilla.showUserList(int, QStringList)");

extern "C" {static PyObject *meth_QsciScintilla_showUserList(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_showUserList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QStringList * a1;
        int a1State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showUserList(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_showUserList, doc_QsciScintilla_showUserList);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_standardCommands, "QsciScintilla.standardCommands() -> QsciCommandSet");

extern "C" {static PyObject *meth_QsciScintilla_standardCommands(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_standardCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciCommandSet *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->standardCommands();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QsciCommandSet,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_standardCommands, doc_QsciScintilla_standardCommands);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_tabIndents, "QsciScintilla.tabIndents() -> bool");

extern "C" {static PyObject *meth_QsciScintilla_tabIndents(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_tabIndents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabIndents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_tabIndents, doc_QsciScintilla_tabIndents);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_tabWidth, "QsciScintilla.tabWidth() -> int");

extern "C" {static PyObject *meth_QsciScintilla_tabWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_tabWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_tabWidth, doc_QsciScintilla_tabWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_text, "QsciScintilla.text() -> QString\n"
    "QsciScintilla.text(int) -> QString");

extern "C" {static PyObject *meth_QsciScintilla_text(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_text, doc_QsciScintilla_text);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_textHeight, "QsciScintilla.textHeight(int) -> int");

extern "C" {static PyObject *meth_QsciScintilla_textHeight(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_textHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textHeight(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_textHeight, doc_QsciScintilla_textHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_whitespaceSize, "QsciScintilla.whitespaceSize() -> int");

extern "C" {static PyObject *meth_QsciScintilla_whitespaceSize(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_whitespaceSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->whitespaceSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_whitespaceSize, doc_QsciScintilla_whitespaceSize);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_whitespaceVisibility, "QsciScintilla.whitespaceVisibility() -> QsciScintilla.WhitespaceVisibility");

extern "C" {static PyObject *meth_QsciScintilla_whitespaceVisibility(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_whitespaceVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::WhitespaceVisibility sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->whitespaceVisibility();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_WhitespaceVisibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_whitespaceVisibility, doc_QsciScintilla_whitespaceVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_wordAtPoint, "QsciScintilla.wordAtPoint(QPoint) -> QString");

extern "C" {static PyObject *meth_QsciScintilla_wordAtPoint(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_wordAtPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QPoint, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->wordAtPoint(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_wordAtPoint, doc_QsciScintilla_wordAtPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_wordCharacters, "QsciScintilla.wordCharacters() -> str");

extern "C" {static PyObject *meth_QsciScintilla_wordCharacters(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_wordCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordCharacters();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_wordCharacters, doc_QsciScintilla_wordCharacters);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_wrapMode, "QsciScintilla.wrapMode() -> QsciScintilla.WrapMode");

extern "C" {static PyObject *meth_QsciScintilla_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_wrapMode, doc_QsciScintilla_wrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_wrapIndentMode, "QsciScintilla.wrapIndentMode() -> QsciScintilla.WrapIndentMode");

extern "C" {static PyObject *meth_QsciScintilla_wrapIndentMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_wrapIndentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            QsciScintilla::WrapIndentMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapIndentMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_WrapIndentMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_wrapIndentMode, doc_QsciScintilla_wrapIndentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_write, "QsciScintilla.write(QIODevice) -> bool");

extern "C" {static PyObject *meth_QsciScintilla_write(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_write, doc_QsciScintilla_write);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_append, "QsciScintilla.append(QString)");

extern "C" {static PyObject *meth_QsciScintilla_append(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::append(*a0) : sipCpp->append(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_append, doc_QsciScintilla_append);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompleteFromAll, "QsciScintilla.autoCompleteFromAll()");

extern "C" {static PyObject *meth_QsciScintilla_autoCompleteFromAll(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompleteFromAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::autoCompleteFromAll() : sipCpp->autoCompleteFromAll());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompleteFromAll, doc_QsciScintilla_autoCompleteFromAll);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompleteFromAPIs, "QsciScintilla.autoCompleteFromAPIs()");

extern "C" {static PyObject *meth_QsciScintilla_autoCompleteFromAPIs(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompleteFromAPIs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::autoCompleteFromAPIs() : sipCpp->autoCompleteFromAPIs());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompleteFromAPIs, doc_QsciScintilla_autoCompleteFromAPIs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_autoCompleteFromDocument, "QsciScintilla.autoCompleteFromDocument()");

extern "C" {static PyObject *meth_QsciScintilla_autoCompleteFromDocument(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_autoCompleteFromDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::autoCompleteFromDocument() : sipCpp->autoCompleteFromDocument());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_autoCompleteFromDocument, doc_QsciScintilla_autoCompleteFromDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_callTip, "QsciScintilla.callTip()");

extern "C" {static PyObject *meth_QsciScintilla_callTip(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_callTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::callTip() : sipCpp->callTip());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_callTip, doc_QsciScintilla_callTip);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clear, "QsciScintilla.clear()");

extern "C" {static PyObject *meth_QsciScintilla_clear(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clear, doc_QsciScintilla_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_copy, "QsciScintilla.copy()");

extern "C" {static PyObject *meth_QsciScintilla_copy(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::copy() : sipCpp->copy());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_copy, doc_QsciScintilla_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_cut, "QsciScintilla.cut()");

extern "C" {static PyObject *meth_QsciScintilla_cut(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::cut() : sipCpp->cut());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_cut, doc_QsciScintilla_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_ensureCursorVisible, "QsciScintilla.ensureCursorVisible()");

extern "C" {static PyObject *meth_QsciScintilla_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::ensureCursorVisible() : sipCpp->ensureCursorVisible());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_ensureCursorVisible, doc_QsciScintilla_ensureCursorVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_ensureLineVisible, "QsciScintilla.ensureLineVisible(int)");

extern "C" {static PyObject *meth_QsciScintilla_ensureLineVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_ensureLineVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::ensureLineVisible(a0) : sipCpp->ensureLineVisible(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_ensureLineVisible, doc_QsciScintilla_ensureLineVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_foldAll, "QsciScintilla.foldAll(bool children=False)");

extern "C" {static PyObject *meth_QsciScintilla_foldAll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_foldAll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0 = 0;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_children,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::foldAll(a0) : sipCpp->foldAll(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_foldAll, doc_QsciScintilla_foldAll);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_foldLine, "QsciScintilla.foldLine(int)");

extern "C" {static PyObject *meth_QsciScintilla_foldLine(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_foldLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::foldLine(a0) : sipCpp->foldLine(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_foldLine, doc_QsciScintilla_foldLine);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_indent, "QsciScintilla.indent(int)");

extern "C" {static PyObject *meth_QsciScintilla_indent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::indent(a0) : sipCpp->indent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_indent, doc_QsciScintilla_indent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_insert, "QsciScintilla.insert(QString)");

extern "C" {static PyObject *meth_QsciScintilla_insert(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::insert(*a0) : sipCpp->insert(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_insert, doc_QsciScintilla_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_insertAt, "QsciScintilla.insertAt(QString, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_insertAt(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_insertAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        int a1;
        int a2;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1ii", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::insertAt(*a0,a1,a2) : sipCpp->insertAt(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_insertAt, doc_QsciScintilla_insertAt);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_moveToMatchingBrace, "QsciScintilla.moveToMatchingBrace()");

extern "C" {static PyObject *meth_QsciScintilla_moveToMatchingBrace(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_moveToMatchingBrace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::moveToMatchingBrace() : sipCpp->moveToMatchingBrace());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_moveToMatchingBrace, doc_QsciScintilla_moveToMatchingBrace);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_paste, "QsciScintilla.paste()");

extern "C" {static PyObject *meth_QsciScintilla_paste(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::paste() : sipCpp->paste());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_paste, doc_QsciScintilla_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_redo, "QsciScintilla.redo()");

extern "C" {static PyObject *meth_QsciScintilla_redo(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::redo() : sipCpp->redo());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_redo, doc_QsciScintilla_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_removeSelectedText, "QsciScintilla.removeSelectedText()");

extern "C" {static PyObject *meth_QsciScintilla_removeSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_removeSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::removeSelectedText() : sipCpp->removeSelectedText());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_removeSelectedText, doc_QsciScintilla_removeSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_replaceSelectedText, "QsciScintilla.replaceSelectedText(QString)");

extern "C" {static PyObject *meth_QsciScintilla_replaceSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_replaceSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::replaceSelectedText(*a0) : sipCpp->replaceSelectedText(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_replaceSelectedText, doc_QsciScintilla_replaceSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_resetSelectionBackgroundColor, "QsciScintilla.resetSelectionBackgroundColor()");

extern "C" {static PyObject *meth_QsciScintilla_resetSelectionBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_resetSelectionBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::resetSelectionBackgroundColor() : sipCpp->resetSelectionBackgroundColor());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_resetSelectionBackgroundColor, doc_QsciScintilla_resetSelectionBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_resetSelectionForegroundColor, "QsciScintilla.resetSelectionForegroundColor()");

extern "C" {static PyObject *meth_QsciScintilla_resetSelectionForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_resetSelectionForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::resetSelectionForegroundColor() : sipCpp->resetSelectionForegroundColor());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_resetSelectionForegroundColor, doc_QsciScintilla_resetSelectionForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_selectAll, "QsciScintilla.selectAll(bool select=True)");

extern "C" {static PyObject *meth_QsciScintilla_selectAll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_selectAll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0 = 1;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_select,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::selectAll(a0) : sipCpp->selectAll(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_selectAll, doc_QsciScintilla_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_selectToMatchingBrace, "QsciScintilla.selectToMatchingBrace()");

extern "C" {static PyObject *meth_QsciScintilla_selectToMatchingBrace(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_selectToMatchingBrace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::selectToMatchingBrace() : sipCpp->selectToMatchingBrace());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_selectToMatchingBrace, doc_QsciScintilla_selectToMatchingBrace);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionCaseSensitivity, "QsciScintilla.setAutoCompletionCaseSensitivity(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionCaseSensitivity(a0) : sipCpp->setAutoCompletionCaseSensitivity(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionCaseSensitivity, doc_QsciScintilla_setAutoCompletionCaseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionReplaceWord, "QsciScintilla.setAutoCompletionReplaceWord(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionReplaceWord(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionReplaceWord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionReplaceWord(a0) : sipCpp->setAutoCompletionReplaceWord(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionReplaceWord, doc_QsciScintilla_setAutoCompletionReplaceWord);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionShowSingle, "QsciScintilla.setAutoCompletionShowSingle(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionShowSingle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionShowSingle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionShowSingle(a0) : sipCpp->setAutoCompletionShowSingle(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionShowSingle, doc_QsciScintilla_setAutoCompletionShowSingle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionSource, "QsciScintilla.setAutoCompletionSource(QsciScintilla.AutoCompletionSource)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionSource(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::AutoCompletionSource a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_AutoCompletionSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionSource(a0) : sipCpp->setAutoCompletionSource(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionSource, doc_QsciScintilla_setAutoCompletionSource);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionThreshold, "QsciScintilla.setAutoCompletionThreshold(int)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionThreshold(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionThreshold(a0) : sipCpp->setAutoCompletionThreshold(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionThreshold, doc_QsciScintilla_setAutoCompletionThreshold);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoCompletionUseSingle, "QsciScintilla.setAutoCompletionUseSingle(QsciScintilla.AutoCompletionUseSingle)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoCompletionUseSingle(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoCompletionUseSingle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::AutoCompletionUseSingle a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_AutoCompletionUseSingle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoCompletionUseSingle(a0) : sipCpp->setAutoCompletionUseSingle(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoCompletionUseSingle, doc_QsciScintilla_setAutoCompletionUseSingle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setAutoIndent, "QsciScintilla.setAutoIndent(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setAutoIndent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setAutoIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setAutoIndent(a0) : sipCpp->setAutoIndent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setAutoIndent, doc_QsciScintilla_setAutoIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setBraceMatching, "QsciScintilla.setBraceMatching(QsciScintilla.BraceMatch)");

extern "C" {static PyObject *meth_QsciScintilla_setBraceMatching(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setBraceMatching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::BraceMatch a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_BraceMatch, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setBraceMatching(a0) : sipCpp->setBraceMatching(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setBraceMatching, doc_QsciScintilla_setBraceMatching);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setBackspaceUnindents, "QsciScintilla.setBackspaceUnindents(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setBackspaceUnindents(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setBackspaceUnindents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setBackspaceUnindents(a0) : sipCpp->setBackspaceUnindents(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setBackspaceUnindents, doc_QsciScintilla_setBackspaceUnindents);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCaretForegroundColor, "QsciScintilla.setCaretForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setCaretForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCaretForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setCaretForegroundColor(*a0) : sipCpp->setCaretForegroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCaretForegroundColor, doc_QsciScintilla_setCaretForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCaretLineBackgroundColor, "QsciScintilla.setCaretLineBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setCaretLineBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCaretLineBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setCaretLineBackgroundColor(*a0) : sipCpp->setCaretLineBackgroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCaretLineBackgroundColor, doc_QsciScintilla_setCaretLineBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCaretLineVisible, "QsciScintilla.setCaretLineVisible(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setCaretLineVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCaretLineVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setCaretLineVisible(a0) : sipCpp->setCaretLineVisible(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCaretLineVisible, doc_QsciScintilla_setCaretLineVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCaretWidth, "QsciScintilla.setCaretWidth(int)");

extern "C" {static PyObject *meth_QsciScintilla_setCaretWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCaretWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setCaretWidth(a0) : sipCpp->setCaretWidth(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCaretWidth, doc_QsciScintilla_setCaretWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setColor, "QsciScintilla.setColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setColor(*a0) : sipCpp->setColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setColor, doc_QsciScintilla_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setCursorPosition, "QsciScintilla.setCursorPosition(int, int)");

extern "C" {static PyObject *meth_QsciScintilla_setCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setCursorPosition(a0,a1) : sipCpp->setCursorPosition(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setCursorPosition, doc_QsciScintilla_setCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setEolMode, "QsciScintilla.setEolMode(QsciScintilla.EolMode)");

extern "C" {static PyObject *meth_QsciScintilla_setEolMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setEolMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::EolMode a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_EolMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setEolMode(a0) : sipCpp->setEolMode(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setEolMode, doc_QsciScintilla_setEolMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setEolVisibility, "QsciScintilla.setEolVisibility(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setEolVisibility(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setEolVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setEolVisibility(a0) : sipCpp->setEolVisibility(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setEolVisibility, doc_QsciScintilla_setEolVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setFolding, "QsciScintilla.setFolding(QsciScintilla.FoldStyle, int margin=2)");

extern "C" {static PyObject *meth_QsciScintilla_setFolding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setFolding(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::FoldStyle a0;
        int a1 = 2;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|i", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_FoldStyle, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setFolding(a0,a1) : sipCpp->setFolding(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setFolding, doc_QsciScintilla_setFolding);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_clearFolds, "QsciScintilla.clearFolds()");

extern "C" {static PyObject *meth_QsciScintilla_clearFolds(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_clearFolds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearFolds();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_clearFolds, doc_QsciScintilla_clearFolds);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentation, "QsciScintilla.setIndentation(int, int)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentation(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentation(a0,a1) : sipCpp->setIndentation(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentation, doc_QsciScintilla_setIndentation);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentationGuides, "QsciScintilla.setIndentationGuides(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentationGuides(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentationGuides(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentationGuides(a0) : sipCpp->setIndentationGuides(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentationGuides, doc_QsciScintilla_setIndentationGuides);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentationGuidesBackgroundColor, "QsciScintilla.setIndentationGuidesBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentationGuidesBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentationGuidesBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentationGuidesBackgroundColor(*a0) : sipCpp->setIndentationGuidesBackgroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentationGuidesBackgroundColor, doc_QsciScintilla_setIndentationGuidesBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentationGuidesForegroundColor, "QsciScintilla.setIndentationGuidesForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentationGuidesForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentationGuidesForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentationGuidesForegroundColor(*a0) : sipCpp->setIndentationGuidesForegroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentationGuidesForegroundColor, doc_QsciScintilla_setIndentationGuidesForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentationsUseTabs, "QsciScintilla.setIndentationsUseTabs(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentationsUseTabs(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentationsUseTabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentationsUseTabs(a0) : sipCpp->setIndentationsUseTabs(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentationsUseTabs, doc_QsciScintilla_setIndentationsUseTabs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setIndentationWidth, "QsciScintilla.setIndentationWidth(int)");

extern "C" {static PyObject *meth_QsciScintilla_setIndentationWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setIndentationWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setIndentationWidth(a0) : sipCpp->setIndentationWidth(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setIndentationWidth, doc_QsciScintilla_setIndentationWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setLexer, "QsciScintilla.setLexer(QsciLexer lexer=None)");

extern "C" {static PyObject *meth_QsciScintilla_setLexer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setLexer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer * a0 = 0;
        QsciScintilla *sipCpp;

        static const char *sipKwdList[] = {
            sipName_lexer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciLexer, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setLexer(a0) : sipCpp->setLexer(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setLexer, doc_QsciScintilla_setLexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginsBackgroundColor, "QsciScintilla.setMarginsBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginsBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginsBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginsBackgroundColor(*a0) : sipCpp->setMarginsBackgroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginsBackgroundColor, doc_QsciScintilla_setMarginsBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginsFont, "QsciScintilla.setMarginsFont(QFont)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginsFont(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginsFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginsFont(*a0) : sipCpp->setMarginsFont(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginsFont, doc_QsciScintilla_setMarginsFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginsForegroundColor, "QsciScintilla.setMarginsForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginsForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginsForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginsForegroundColor(*a0) : sipCpp->setMarginsForegroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginsForegroundColor, doc_QsciScintilla_setMarginsForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginLineNumbers, "QsciScintilla.setMarginLineNumbers(int, bool)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginLineNumbers(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginLineNumbers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        bool a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginLineNumbers(a0,a1) : sipCpp->setMarginLineNumbers(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginLineNumbers, doc_QsciScintilla_setMarginLineNumbers);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginMarkerMask, "QsciScintilla.setMarginMarkerMask(int, int)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginMarkerMask(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginMarkerMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginMarkerMask(a0,a1) : sipCpp->setMarginMarkerMask(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginMarkerMask, doc_QsciScintilla_setMarginMarkerMask);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginSensitivity, "QsciScintilla.setMarginSensitivity(int, bool)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        bool a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginSensitivity(a0,a1) : sipCpp->setMarginSensitivity(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginSensitivity, doc_QsciScintilla_setMarginSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setMarginWidth, "QsciScintilla.setMarginWidth(int, int)\n"
    "QsciScintilla.setMarginWidth(int, QString)");

extern "C" {static PyObject *meth_QsciScintilla_setMarginWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setMarginWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginWidth(a0,a1) : sipCpp->setMarginWidth(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setMarginWidth(a0,*a1) : sipCpp->setMarginWidth(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setMarginWidth, doc_QsciScintilla_setMarginWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setModified, "QsciScintilla.setModified(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setModified(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setModified(a0) : sipCpp->setModified(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setModified, doc_QsciScintilla_setModified);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setPaper, "QsciScintilla.setPaper(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setPaper(*a0) : sipCpp->setPaper(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setPaper, doc_QsciScintilla_setPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setReadOnly, "QsciScintilla.setReadOnly(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setReadOnly(a0) : sipCpp->setReadOnly(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setReadOnly, doc_QsciScintilla_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setSelection, "QsciScintilla.setSelection(int, int, int, int)");

extern "C" {static PyObject *meth_QsciScintilla_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setSelection(a0,a1,a2,a3) : sipCpp->setSelection(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setSelection, doc_QsciScintilla_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setSelectionBackgroundColor, "QsciScintilla.setSelectionBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setSelectionBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setSelectionBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setSelectionBackgroundColor(*a0) : sipCpp->setSelectionBackgroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setSelectionBackgroundColor, doc_QsciScintilla_setSelectionBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setSelectionForegroundColor, "QsciScintilla.setSelectionForegroundColor(QColor)");

extern "C" {static PyObject *meth_QsciScintilla_setSelectionForegroundColor(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setSelectionForegroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setSelectionForegroundColor(*a0) : sipCpp->setSelectionForegroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setSelectionForegroundColor, doc_QsciScintilla_setSelectionForegroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setTabIndents, "QsciScintilla.setTabIndents(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setTabIndents(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setTabIndents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setTabIndents(a0) : sipCpp->setTabIndents(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setTabIndents, doc_QsciScintilla_setTabIndents);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setTabWidth, "QsciScintilla.setTabWidth(int)");

extern "C" {static PyObject *meth_QsciScintilla_setTabWidth(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setTabWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setTabWidth(a0) : sipCpp->setTabWidth(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setTabWidth, doc_QsciScintilla_setTabWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setText, "QsciScintilla.setText(QString)");

extern "C" {static PyObject *meth_QsciScintilla_setText(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setText(*a0) : sipCpp->setText(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setText, doc_QsciScintilla_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setUtf8, "QsciScintilla.setUtf8(bool)");

extern "C" {static PyObject *meth_QsciScintilla_setUtf8(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setUtf8(a0) : sipCpp->setUtf8(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setUtf8, doc_QsciScintilla_setUtf8);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWhitespaceVisibility, "QsciScintilla.setWhitespaceVisibility(QsciScintilla.WhitespaceVisibility)");

extern "C" {static PyObject *meth_QsciScintilla_setWhitespaceVisibility(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWhitespaceVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::WhitespaceVisibility a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_WhitespaceVisibility, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setWhitespaceVisibility(a0) : sipCpp->setWhitespaceVisibility(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWhitespaceVisibility, doc_QsciScintilla_setWhitespaceVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_setWrapMode, "QsciScintilla.setWrapMode(QsciScintilla.WrapMode)");

extern "C" {static PyObject *meth_QsciScintilla_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::WrapMode a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciScintilla, &sipCpp, sipType_QsciScintilla_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::setWrapMode(a0) : sipCpp->setWrapMode(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_setWrapMode, doc_QsciScintilla_setWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_undo, "QsciScintilla.undo()");

extern "C" {static PyObject *meth_QsciScintilla_undo(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::undo() : sipCpp->undo());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_undo, doc_QsciScintilla_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_unindent, "QsciScintilla.unindent(int)");

extern "C" {static PyObject *meth_QsciScintilla_unindent(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_unindent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::unindent(a0) : sipCpp->unindent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_unindent, doc_QsciScintilla_unindent);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_zoomIn, "QsciScintilla.zoomIn(int)\n"
    "QsciScintilla.zoomIn()");

extern "C" {static PyObject *meth_QsciScintilla_zoomIn(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_zoomIn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::zoomIn(a0) : sipCpp->zoomIn(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::zoomIn() : sipCpp->zoomIn());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_zoomIn, doc_QsciScintilla_zoomIn);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_zoomOut, "QsciScintilla.zoomOut(int)\n"
    "QsciScintilla.zoomOut()");

extern "C" {static PyObject *meth_QsciScintilla_zoomOut(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_zoomOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::zoomOut(a0) : sipCpp->zoomOut(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciScintilla, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::zoomOut() : sipCpp->zoomOut());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_zoomOut, doc_QsciScintilla_zoomOut);

    return NULL;
}


PyDoc_STRVAR(doc_QsciScintilla_zoomTo, "QsciScintilla.zoomTo(int)");

extern "C" {static PyObject *meth_QsciScintilla_zoomTo(PyObject *, PyObject *);}
static PyObject *meth_QsciScintilla_zoomTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciScintilla *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciScintilla, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciScintilla::zoomTo(a0) : sipCpp->zoomTo(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciScintilla, sipName_zoomTo, doc_QsciScintilla_zoomTo);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciScintilla(void *, const sipTypeDef *);}
static void *cast_QsciScintilla(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciScintilla)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciScintillaBase)->ctd_cast((QsciScintillaBase *)(QsciScintilla *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciScintilla(void *, int);}
static void release_QsciScintilla(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    QsciScintilla *sipCpp = reinterpret_cast<QsciScintilla *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QsciScintilla(sipSimpleWrapper *);}
static void dealloc_QsciScintilla(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciScintilla *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciScintilla(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QsciScintilla(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QsciScintilla(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciScintilla *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQsciScintilla(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciScintilla[] = {{61, 255, 1}};


static PyMethodDef methods_QsciScintilla[] = {
    {SIP_MLNAME_CAST(sipName_annotate), meth_QsciScintilla_annotate, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_annotate)},
    {SIP_MLNAME_CAST(sipName_annotation), meth_QsciScintilla_annotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_annotation)},
    {SIP_MLNAME_CAST(sipName_annotationDisplay), meth_QsciScintilla_annotationDisplay, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_annotationDisplay)},
    {SIP_MLNAME_CAST(sipName_apiContext), meth_QsciScintilla_apiContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_apiContext)},
    {SIP_MLNAME_CAST(sipName_append), meth_QsciScintilla_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_append)},
    {SIP_MLNAME_CAST(sipName_autoCompleteFromAPIs), meth_QsciScintilla_autoCompleteFromAPIs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompleteFromAPIs)},
    {SIP_MLNAME_CAST(sipName_autoCompleteFromAll), meth_QsciScintilla_autoCompleteFromAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompleteFromAll)},
    {SIP_MLNAME_CAST(sipName_autoCompleteFromDocument), meth_QsciScintilla_autoCompleteFromDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompleteFromDocument)},
    {SIP_MLNAME_CAST(sipName_autoCompletionCaseSensitivity), meth_QsciScintilla_autoCompletionCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_autoCompletionFillupsEnabled), meth_QsciScintilla_autoCompletionFillupsEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionFillupsEnabled)},
    {SIP_MLNAME_CAST(sipName_autoCompletionReplaceWord), meth_QsciScintilla_autoCompletionReplaceWord, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionReplaceWord)},
    {SIP_MLNAME_CAST(sipName_autoCompletionShowSingle), meth_QsciScintilla_autoCompletionShowSingle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionShowSingle)},
    {SIP_MLNAME_CAST(sipName_autoCompletionSource), meth_QsciScintilla_autoCompletionSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionSource)},
    {SIP_MLNAME_CAST(sipName_autoCompletionThreshold), meth_QsciScintilla_autoCompletionThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionThreshold)},
    {SIP_MLNAME_CAST(sipName_autoCompletionUseSingle), meth_QsciScintilla_autoCompletionUseSingle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoCompletionUseSingle)},
    {SIP_MLNAME_CAST(sipName_autoIndent), meth_QsciScintilla_autoIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_autoIndent)},
    {SIP_MLNAME_CAST(sipName_backspaceUnindents), meth_QsciScintilla_backspaceUnindents, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_backspaceUnindents)},
    {SIP_MLNAME_CAST(sipName_beginUndoAction), meth_QsciScintilla_beginUndoAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_beginUndoAction)},
    {SIP_MLNAME_CAST(sipName_braceMatching), meth_QsciScintilla_braceMatching, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_braceMatching)},
    {SIP_MLNAME_CAST(sipName_callTip), meth_QsciScintilla_callTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_callTip)},
    {SIP_MLNAME_CAST(sipName_callTipsStyle), meth_QsciScintilla_callTipsStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_callTipsStyle)},
    {SIP_MLNAME_CAST(sipName_callTipsVisible), meth_QsciScintilla_callTipsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_callTipsVisible)},
    {SIP_MLNAME_CAST(sipName_cancelList), meth_QsciScintilla_cancelList, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_cancelList)},
    {SIP_MLNAME_CAST(sipName_caseSensitive), meth_QsciScintilla_caseSensitive, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_caseSensitive)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QsciScintilla_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_clear)},
    {SIP_MLNAME_CAST(sipName_clearAnnotations), (PyCFunction)meth_QsciScintilla_clearAnnotations, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_clearAnnotations)},
    {SIP_MLNAME_CAST(sipName_clearFolds), meth_QsciScintilla_clearFolds, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_clearFolds)},
    {SIP_MLNAME_CAST(sipName_clearIndicatorRange), meth_QsciScintilla_clearIndicatorRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_clearIndicatorRange)},
    {SIP_MLNAME_CAST(sipName_clearMarginText), (PyCFunction)meth_QsciScintilla_clearMarginText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_clearMarginText)},
    {SIP_MLNAME_CAST(sipName_clearRegisteredImages), meth_QsciScintilla_clearRegisteredImages, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_clearRegisteredImages)},
    {SIP_MLNAME_CAST(sipName_color), meth_QsciScintilla_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_color)},
    {SIP_MLNAME_CAST(sipName_contractedFolds), meth_QsciScintilla_contractedFolds, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_contractedFolds)},
    {SIP_MLNAME_CAST(sipName_convertEols), meth_QsciScintilla_convertEols, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_convertEols)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QsciScintilla_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_copy)},
    {SIP_MLNAME_CAST(sipName_cut), meth_QsciScintilla_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_cut)},
    {SIP_MLNAME_CAST(sipName_document), meth_QsciScintilla_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_document)},
    {SIP_MLNAME_CAST(sipName_edgeColor), meth_QsciScintilla_edgeColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_edgeColor)},
    {SIP_MLNAME_CAST(sipName_edgeColumn), meth_QsciScintilla_edgeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_edgeColumn)},
    {SIP_MLNAME_CAST(sipName_edgeMode), meth_QsciScintilla_edgeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_edgeMode)},
    {SIP_MLNAME_CAST(sipName_endUndoAction), meth_QsciScintilla_endUndoAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_endUndoAction)},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QsciScintilla_ensureCursorVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_ensureCursorVisible)},
    {SIP_MLNAME_CAST(sipName_ensureLineVisible), meth_QsciScintilla_ensureLineVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_ensureLineVisible)},
    {SIP_MLNAME_CAST(sipName_eolMode), meth_QsciScintilla_eolMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_eolMode)},
    {SIP_MLNAME_CAST(sipName_eolVisibility), meth_QsciScintilla_eolVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_eolVisibility)},
    {SIP_MLNAME_CAST(sipName_extraAscent), meth_QsciScintilla_extraAscent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_extraAscent)},
    {SIP_MLNAME_CAST(sipName_extraDescent), meth_QsciScintilla_extraDescent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_extraDescent)},
    {SIP_MLNAME_CAST(sipName_fillIndicatorRange), meth_QsciScintilla_fillIndicatorRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_fillIndicatorRange)},
    {SIP_MLNAME_CAST(sipName_findFirst), (PyCFunction)meth_QsciScintilla_findFirst, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_findFirst)},
    {SIP_MLNAME_CAST(sipName_findNext), meth_QsciScintilla_findNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_findNext)},
    {SIP_MLNAME_CAST(sipName_firstVisibleLine), meth_QsciScintilla_firstVisibleLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_firstVisibleLine)},
    {SIP_MLNAME_CAST(sipName_foldAll), (PyCFunction)meth_QsciScintilla_foldAll, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_foldAll)},
    {SIP_MLNAME_CAST(sipName_foldLine), meth_QsciScintilla_foldLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_foldLine)},
    {SIP_MLNAME_CAST(sipName_folding), meth_QsciScintilla_folding, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_folding)},
    {SIP_MLNAME_CAST(sipName_getCursorPosition), meth_QsciScintilla_getCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_getCursorPosition)},
    {SIP_MLNAME_CAST(sipName_getSelection), meth_QsciScintilla_getSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_getSelection)},
    {SIP_MLNAME_CAST(sipName_hasSelectedText), meth_QsciScintilla_hasSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_hasSelectedText)},
    {SIP_MLNAME_CAST(sipName_indent), meth_QsciScintilla_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indent)},
    {SIP_MLNAME_CAST(sipName_indentation), meth_QsciScintilla_indentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indentation)},
    {SIP_MLNAME_CAST(sipName_indentationGuides), meth_QsciScintilla_indentationGuides, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indentationGuides)},
    {SIP_MLNAME_CAST(sipName_indentationWidth), meth_QsciScintilla_indentationWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indentationWidth)},
    {SIP_MLNAME_CAST(sipName_indentationsUseTabs), meth_QsciScintilla_indentationsUseTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indentationsUseTabs)},
    {SIP_MLNAME_CAST(sipName_indicatorDefine), (PyCFunction)meth_QsciScintilla_indicatorDefine, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_indicatorDefine)},
    {SIP_MLNAME_CAST(sipName_indicatorDrawUnder), meth_QsciScintilla_indicatorDrawUnder, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_indicatorDrawUnder)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QsciScintilla_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_insert)},
    {SIP_MLNAME_CAST(sipName_insertAt), meth_QsciScintilla_insertAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_insertAt)},
    {SIP_MLNAME_CAST(sipName_isCallTipActive), meth_QsciScintilla_isCallTipActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isCallTipActive)},
    {SIP_MLNAME_CAST(sipName_isListActive), meth_QsciScintilla_isListActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isListActive)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QsciScintilla_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isModified)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QsciScintilla_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isRedoAvailable), meth_QsciScintilla_isRedoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isRedoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUndoAvailable), meth_QsciScintilla_isUndoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isUndoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUtf8), meth_QsciScintilla_isUtf8, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isUtf8)},
    {SIP_MLNAME_CAST(sipName_isWordCharacter), meth_QsciScintilla_isWordCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_isWordCharacter)},
    {SIP_MLNAME_CAST(sipName_length), meth_QsciScintilla_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_length)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciScintilla_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_lexer)},
    {SIP_MLNAME_CAST(sipName_lineAt), meth_QsciScintilla_lineAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_lineAt)},
    {SIP_MLNAME_CAST(sipName_lineIndexFromPosition), meth_QsciScintilla_lineIndexFromPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_lineIndexFromPosition)},
    {SIP_MLNAME_CAST(sipName_lineLength), meth_QsciScintilla_lineLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_lineLength)},
    {SIP_MLNAME_CAST(sipName_lines), meth_QsciScintilla_lines, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_lines)},
    {SIP_MLNAME_CAST(sipName_marginLineNumbers), meth_QsciScintilla_marginLineNumbers, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_marginLineNumbers)},
    {SIP_MLNAME_CAST(sipName_marginMarkerMask), meth_QsciScintilla_marginMarkerMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_marginMarkerMask)},
    {SIP_MLNAME_CAST(sipName_marginSensitivity), meth_QsciScintilla_marginSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_marginSensitivity)},
    {SIP_MLNAME_CAST(sipName_marginType), meth_QsciScintilla_marginType, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_marginType)},
    {SIP_MLNAME_CAST(sipName_marginWidth), meth_QsciScintilla_marginWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_marginWidth)},
    {SIP_MLNAME_CAST(sipName_markerAdd), meth_QsciScintilla_markerAdd, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markerAdd)},
    {SIP_MLNAME_CAST(sipName_markerDefine), (PyCFunction)meth_QsciScintilla_markerDefine, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_markerDefine)},
    {SIP_MLNAME_CAST(sipName_markerDelete), (PyCFunction)meth_QsciScintilla_markerDelete, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_markerDelete)},
    {SIP_MLNAME_CAST(sipName_markerDeleteAll), (PyCFunction)meth_QsciScintilla_markerDeleteAll, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_markerDeleteAll)},
    {SIP_MLNAME_CAST(sipName_markerDeleteHandle), meth_QsciScintilla_markerDeleteHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markerDeleteHandle)},
    {SIP_MLNAME_CAST(sipName_markerFindNext), meth_QsciScintilla_markerFindNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markerFindNext)},
    {SIP_MLNAME_CAST(sipName_markerFindPrevious), meth_QsciScintilla_markerFindPrevious, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markerFindPrevious)},
    {SIP_MLNAME_CAST(sipName_markerLine), meth_QsciScintilla_markerLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markerLine)},
    {SIP_MLNAME_CAST(sipName_markersAtLine), meth_QsciScintilla_markersAtLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_markersAtLine)},
    {SIP_MLNAME_CAST(sipName_moveToMatchingBrace), meth_QsciScintilla_moveToMatchingBrace, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_moveToMatchingBrace)},
    {SIP_MLNAME_CAST(sipName_paper), meth_QsciScintilla_paper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_paper)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QsciScintilla_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_paste)},
    {SIP_MLNAME_CAST(sipName_positionFromLineIndex), meth_QsciScintilla_positionFromLineIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_positionFromLineIndex)},
    {SIP_MLNAME_CAST(sipName_read), meth_QsciScintilla_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_read)},
    {SIP_MLNAME_CAST(sipName_recolor), (PyCFunction)meth_QsciScintilla_recolor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_recolor)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QsciScintilla_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_redo)},
    {SIP_MLNAME_CAST(sipName_registerImage), meth_QsciScintilla_registerImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_registerImage)},
    {SIP_MLNAME_CAST(sipName_removeSelectedText), meth_QsciScintilla_removeSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_removeSelectedText)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QsciScintilla_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_replace)},
    {SIP_MLNAME_CAST(sipName_replaceSelectedText), meth_QsciScintilla_replaceSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_replaceSelectedText)},
    {SIP_MLNAME_CAST(sipName_resetFoldMarginColors), meth_QsciScintilla_resetFoldMarginColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_resetFoldMarginColors)},
    {SIP_MLNAME_CAST(sipName_resetSelectionBackgroundColor), meth_QsciScintilla_resetSelectionBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_resetSelectionBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_resetSelectionForegroundColor), meth_QsciScintilla_resetSelectionForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_resetSelectionForegroundColor)},
    {SIP_MLNAME_CAST(sipName_selectAll), (PyCFunction)meth_QsciScintilla_selectAll, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectToMatchingBrace), meth_QsciScintilla_selectToMatchingBrace, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_selectToMatchingBrace)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QsciScintilla_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_selectedText)},
    {SIP_MLNAME_CAST(sipName_selectionToEol), meth_QsciScintilla_selectionToEol, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_selectionToEol)},
    {SIP_MLNAME_CAST(sipName_setAnnotationDisplay), meth_QsciScintilla_setAnnotationDisplay, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAnnotationDisplay)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionCaseSensitivity), meth_QsciScintilla_setAutoCompletionCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionFillups), meth_QsciScintilla_setAutoCompletionFillups, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionFillups)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionFillupsEnabled), meth_QsciScintilla_setAutoCompletionFillupsEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionFillupsEnabled)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionReplaceWord), meth_QsciScintilla_setAutoCompletionReplaceWord, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionReplaceWord)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionShowSingle), meth_QsciScintilla_setAutoCompletionShowSingle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionShowSingle)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionSource), meth_QsciScintilla_setAutoCompletionSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionSource)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionThreshold), meth_QsciScintilla_setAutoCompletionThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionThreshold)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionUseSingle), meth_QsciScintilla_setAutoCompletionUseSingle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionUseSingle)},
    {SIP_MLNAME_CAST(sipName_setAutoCompletionWordSeparators), meth_QsciScintilla_setAutoCompletionWordSeparators, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoCompletionWordSeparators)},
    {SIP_MLNAME_CAST(sipName_setAutoIndent), meth_QsciScintilla_setAutoIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setAutoIndent)},
    {SIP_MLNAME_CAST(sipName_setBackspaceUnindents), meth_QsciScintilla_setBackspaceUnindents, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setBackspaceUnindents)},
    {SIP_MLNAME_CAST(sipName_setBraceMatching), meth_QsciScintilla_setBraceMatching, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setBraceMatching)},
    {SIP_MLNAME_CAST(sipName_setCallTipsBackgroundColor), meth_QsciScintilla_setCallTipsBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCallTipsBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setCallTipsForegroundColor), meth_QsciScintilla_setCallTipsForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCallTipsForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setCallTipsHighlightColor), meth_QsciScintilla_setCallTipsHighlightColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCallTipsHighlightColor)},
    {SIP_MLNAME_CAST(sipName_setCallTipsStyle), meth_QsciScintilla_setCallTipsStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCallTipsStyle)},
    {SIP_MLNAME_CAST(sipName_setCallTipsVisible), meth_QsciScintilla_setCallTipsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCallTipsVisible)},
    {SIP_MLNAME_CAST(sipName_setCaretForegroundColor), meth_QsciScintilla_setCaretForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCaretForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setCaretLineBackgroundColor), meth_QsciScintilla_setCaretLineBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCaretLineBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setCaretLineVisible), meth_QsciScintilla_setCaretLineVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCaretLineVisible)},
    {SIP_MLNAME_CAST(sipName_setCaretWidth), meth_QsciScintilla_setCaretWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCaretWidth)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QsciScintilla_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setColor)},
    {SIP_MLNAME_CAST(sipName_setContractedFolds), meth_QsciScintilla_setContractedFolds, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setContractedFolds)},
    {SIP_MLNAME_CAST(sipName_setCursorPosition), meth_QsciScintilla_setCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setCursorPosition)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QsciScintilla_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setDocument)},
    {SIP_MLNAME_CAST(sipName_setEdgeColor), meth_QsciScintilla_setEdgeColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setEdgeColor)},
    {SIP_MLNAME_CAST(sipName_setEdgeColumn), meth_QsciScintilla_setEdgeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setEdgeColumn)},
    {SIP_MLNAME_CAST(sipName_setEdgeMode), meth_QsciScintilla_setEdgeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setEdgeMode)},
    {SIP_MLNAME_CAST(sipName_setEolMode), meth_QsciScintilla_setEolMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setEolMode)},
    {SIP_MLNAME_CAST(sipName_setEolVisibility), meth_QsciScintilla_setEolVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setEolVisibility)},
    {SIP_MLNAME_CAST(sipName_setExtraAscent), meth_QsciScintilla_setExtraAscent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setExtraAscent)},
    {SIP_MLNAME_CAST(sipName_setExtraDescent), meth_QsciScintilla_setExtraDescent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setExtraDescent)},
    {SIP_MLNAME_CAST(sipName_setFirstVisibleLine), meth_QsciScintilla_setFirstVisibleLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setFirstVisibleLine)},
    {SIP_MLNAME_CAST(sipName_setFoldMarginColors), meth_QsciScintilla_setFoldMarginColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setFoldMarginColors)},
    {SIP_MLNAME_CAST(sipName_setFolding), (PyCFunction)meth_QsciScintilla_setFolding, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setFolding)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QsciScintilla_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setFont)},
    {SIP_MLNAME_CAST(sipName_setIndentation), meth_QsciScintilla_setIndentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentation)},
    {SIP_MLNAME_CAST(sipName_setIndentationGuides), meth_QsciScintilla_setIndentationGuides, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentationGuides)},
    {SIP_MLNAME_CAST(sipName_setIndentationGuidesBackgroundColor), meth_QsciScintilla_setIndentationGuidesBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentationGuidesBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setIndentationGuidesForegroundColor), meth_QsciScintilla_setIndentationGuidesForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentationGuidesForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setIndentationWidth), meth_QsciScintilla_setIndentationWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentationWidth)},
    {SIP_MLNAME_CAST(sipName_setIndentationsUseTabs), meth_QsciScintilla_setIndentationsUseTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndentationsUseTabs)},
    {SIP_MLNAME_CAST(sipName_setIndicatorDrawUnder), (PyCFunction)meth_QsciScintilla_setIndicatorDrawUnder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndicatorDrawUnder)},
    {SIP_MLNAME_CAST(sipName_setIndicatorForegroundColor), (PyCFunction)meth_QsciScintilla_setIndicatorForegroundColor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setIndicatorForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setLexer), (PyCFunction)meth_QsciScintilla_setLexer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setLexer)},
    {SIP_MLNAME_CAST(sipName_setMarginLineNumbers), meth_QsciScintilla_setMarginLineNumbers, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginLineNumbers)},
    {SIP_MLNAME_CAST(sipName_setMarginMarkerMask), meth_QsciScintilla_setMarginMarkerMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginMarkerMask)},
    {SIP_MLNAME_CAST(sipName_setMarginSensitivity), meth_QsciScintilla_setMarginSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginSensitivity)},
    {SIP_MLNAME_CAST(sipName_setMarginText), meth_QsciScintilla_setMarginText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginText)},
    {SIP_MLNAME_CAST(sipName_setMarginType), meth_QsciScintilla_setMarginType, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginType)},
    {SIP_MLNAME_CAST(sipName_setMarginWidth), meth_QsciScintilla_setMarginWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginWidth)},
    {SIP_MLNAME_CAST(sipName_setMarginsBackgroundColor), meth_QsciScintilla_setMarginsBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginsBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setMarginsFont), meth_QsciScintilla_setMarginsFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginsFont)},
    {SIP_MLNAME_CAST(sipName_setMarginsForegroundColor), meth_QsciScintilla_setMarginsForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarginsForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setMarkerBackgroundColor), (PyCFunction)meth_QsciScintilla_setMarkerBackgroundColor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarkerBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setMarkerForegroundColor), (PyCFunction)meth_QsciScintilla_setMarkerForegroundColor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setMarkerForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setMatchedBraceBackgroundColor), meth_QsciScintilla_setMatchedBraceBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMatchedBraceBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setMatchedBraceForegroundColor), meth_QsciScintilla_setMatchedBraceForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setMatchedBraceForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setModified), meth_QsciScintilla_setModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setModified)},
    {SIP_MLNAME_CAST(sipName_setPaper), meth_QsciScintilla_setPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setPaper)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QsciScintilla_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QsciScintilla_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionBackgroundColor), meth_QsciScintilla_setSelectionBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setSelectionBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setSelectionForegroundColor), meth_QsciScintilla_setSelectionForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setSelectionForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setSelectionToEol), meth_QsciScintilla_setSelectionToEol, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setSelectionToEol)},
    {SIP_MLNAME_CAST(sipName_setTabIndents), meth_QsciScintilla_setTabIndents, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setTabIndents)},
    {SIP_MLNAME_CAST(sipName_setTabWidth), meth_QsciScintilla_setTabWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setTabWidth)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QsciScintilla_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setText)},
    {SIP_MLNAME_CAST(sipName_setUnmatchedBraceBackgroundColor), meth_QsciScintilla_setUnmatchedBraceBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setUnmatchedBraceBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setUnmatchedBraceForegroundColor), meth_QsciScintilla_setUnmatchedBraceForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setUnmatchedBraceForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setUtf8), meth_QsciScintilla_setUtf8, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setUtf8)},
    {SIP_MLNAME_CAST(sipName_setWhitespaceBackgroundColor), meth_QsciScintilla_setWhitespaceBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWhitespaceBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setWhitespaceForegroundColor), meth_QsciScintilla_setWhitespaceForegroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWhitespaceForegroundColor)},
    {SIP_MLNAME_CAST(sipName_setWhitespaceSize), meth_QsciScintilla_setWhitespaceSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWhitespaceSize)},
    {SIP_MLNAME_CAST(sipName_setWhitespaceVisibility), meth_QsciScintilla_setWhitespaceVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWhitespaceVisibility)},
    {SIP_MLNAME_CAST(sipName_setWrapIndentMode), meth_QsciScintilla_setWrapIndentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWrapIndentMode)},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QsciScintilla_setWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_setWrapMode)},
    {SIP_MLNAME_CAST(sipName_setWrapVisualFlags), (PyCFunction)meth_QsciScintilla_setWrapVisualFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciScintilla_setWrapVisualFlags)},
    {SIP_MLNAME_CAST(sipName_showUserList), meth_QsciScintilla_showUserList, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_showUserList)},
    {SIP_MLNAME_CAST(sipName_standardCommands), meth_QsciScintilla_standardCommands, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_standardCommands)},
    {SIP_MLNAME_CAST(sipName_tabIndents), meth_QsciScintilla_tabIndents, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_tabIndents)},
    {SIP_MLNAME_CAST(sipName_tabWidth), meth_QsciScintilla_tabWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_tabWidth)},
    {SIP_MLNAME_CAST(sipName_text), meth_QsciScintilla_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_text)},
    {SIP_MLNAME_CAST(sipName_textHeight), meth_QsciScintilla_textHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_textHeight)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QsciScintilla_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_undo)},
    {SIP_MLNAME_CAST(sipName_unindent), meth_QsciScintilla_unindent, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_unindent)},
    {SIP_MLNAME_CAST(sipName_whitespaceSize), meth_QsciScintilla_whitespaceSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_whitespaceSize)},
    {SIP_MLNAME_CAST(sipName_whitespaceVisibility), meth_QsciScintilla_whitespaceVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_whitespaceVisibility)},
    {SIP_MLNAME_CAST(sipName_wordAtPoint), meth_QsciScintilla_wordAtPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_wordAtPoint)},
    {SIP_MLNAME_CAST(sipName_wordCharacters), meth_QsciScintilla_wordCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_wordCharacters)},
    {SIP_MLNAME_CAST(sipName_wrapIndentMode), meth_QsciScintilla_wrapIndentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_wrapIndentMode)},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QsciScintilla_wrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_wrapMode)},
    {SIP_MLNAME_CAST(sipName_write), meth_QsciScintilla_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_write)},
    {SIP_MLNAME_CAST(sipName_zoomIn), meth_QsciScintilla_zoomIn, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_zoomIn)},
    {SIP_MLNAME_CAST(sipName_zoomOut), meth_QsciScintilla_zoomOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_zoomOut)},
    {SIP_MLNAME_CAST(sipName_zoomTo), meth_QsciScintilla_zoomTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciScintilla_zoomTo)}
};

static sipEnumMemberDef enummembers_QsciScintilla[] = {
    {sipName_AcsAPIs, QsciScintilla::AcsAPIs, 47},
    {sipName_AcsAll, QsciScintilla::AcsAll, 47},
    {sipName_AcsDocument, QsciScintilla::AcsDocument, 47},
    {sipName_AcsNone, QsciScintilla::AcsNone, 47},
    {sipName_AcusAlways, QsciScintilla::AcusAlways, 48},
    {sipName_AcusExplicit, QsciScintilla::AcusExplicit, 48},
    {sipName_AcusNever, QsciScintilla::AcusNever, 48},
    {sipName_AiClosing, QsciScintilla::AiClosing, -1},
    {sipName_AiMaintain, QsciScintilla::AiMaintain, -1},
    {sipName_AiOpening, QsciScintilla::AiOpening, -1},
    {sipName_AnnotationBoxed, QsciScintilla::AnnotationBoxed, 46},
    {sipName_AnnotationHidden, QsciScintilla::AnnotationHidden, 46},
    {sipName_AnnotationStandard, QsciScintilla::AnnotationStandard, 46},
    {sipName_Background, QsciScintilla::Background, 56},
    {sipName_BottomLeftCorner, QsciScintilla::BottomLeftCorner, 56},
    {sipName_BoxIndicator, QsciScintilla::BoxIndicator, 54},
    {sipName_BoxedFoldStyle, QsciScintilla::BoxedFoldStyle, 53},
    {sipName_BoxedMinus, QsciScintilla::BoxedMinus, 56},
    {sipName_BoxedMinusConnected, QsciScintilla::BoxedMinusConnected, 56},
    {sipName_BoxedPlus, QsciScintilla::BoxedPlus, 56},
    {sipName_BoxedPlusConnected, QsciScintilla::BoxedPlusConnected, 56},
    {sipName_BoxedTreeFoldStyle, QsciScintilla::BoxedTreeFoldStyle, 53},
    {sipName_CallTipsContext, QsciScintilla::CallTipsContext, 50},
    {sipName_CallTipsNoAutoCompletionContext, QsciScintilla::CallTipsNoAutoCompletionContext, 50},
    {sipName_CallTipsNoContext, QsciScintilla::CallTipsNoContext, 50},
    {sipName_CallTipsNone, QsciScintilla::CallTipsNone, 50},
    {sipName_Circle, QsciScintilla::Circle, 56},
    {sipName_CircledFoldStyle, QsciScintilla::CircledFoldStyle, 53},
    {sipName_CircledMinus, QsciScintilla::CircledMinus, 56},
    {sipName_CircledMinusConnected, QsciScintilla::CircledMinusConnected, 56},
    {sipName_CircledPlus, QsciScintilla::CircledPlus, 56},
    {sipName_CircledPlusConnected, QsciScintilla::CircledPlusConnected, 56},
    {sipName_CircledTreeFoldStyle, QsciScintilla::CircledTreeFoldStyle, 53},
    {sipName_DiagonalIndicator, QsciScintilla::DiagonalIndicator, 54},
    {sipName_DownTriangle, QsciScintilla::DownTriangle, 56},
    {sipName_EdgeBackground, QsciScintilla::EdgeBackground, 51},
    {sipName_EdgeLine, QsciScintilla::EdgeLine, 51},
    {sipName_EdgeNone, QsciScintilla::EdgeNone, 51},
    {sipName_EolMac, QsciScintilla::EolMac, 52},
    {sipName_EolUnix, QsciScintilla::EolUnix, 52},
    {sipName_EolWindows, QsciScintilla::EolWindows, 52},
    {sipName_FullRectangle, QsciScintilla::FullRectangle, 56},
    {sipName_HiddenIndicator, QsciScintilla::HiddenIndicator, 54},
    {sipName_Invisible, QsciScintilla::Invisible, 56},
    {sipName_LeftRectangle, QsciScintilla::LeftRectangle, 56},
    {sipName_LeftSideRoundedSplitter, QsciScintilla::LeftSideRoundedSplitter, 56},
    {sipName_LeftSideSplitter, QsciScintilla::LeftSideSplitter, 56},
    {sipName_Minus, QsciScintilla::Minus, 56},
    {sipName_NoBraceMatch, QsciScintilla::NoBraceMatch, 49},
    {sipName_NoFoldStyle, QsciScintilla::NoFoldStyle, 53},
    {sipName_NumberMargin, QsciScintilla::NumberMargin, 55},
    {sipName_PlainFoldStyle, QsciScintilla::PlainFoldStyle, 53},
    {sipName_PlainIndicator, QsciScintilla::PlainIndicator, 54},
    {sipName_Plus, QsciScintilla::Plus, 56},
    {sipName_Rectangle, QsciScintilla::Rectangle, 56},
    {sipName_RightArrow, QsciScintilla::RightArrow, 56},
    {sipName_RightTriangle, QsciScintilla::RightTriangle, 56},
    {sipName_RoundBoxIndicator, QsciScintilla::RoundBoxIndicator, 54},
    {sipName_RoundedBottomLeftCorner, QsciScintilla::RoundedBottomLeftCorner, 56},
    {sipName_SloppyBraceMatch, QsciScintilla::SloppyBraceMatch, 49},
    {sipName_SmallRectangle, QsciScintilla::SmallRectangle, 56},
    {sipName_SquiggleIndicator, QsciScintilla::SquiggleIndicator, 54},
    {sipName_StrictBraceMatch, QsciScintilla::StrictBraceMatch, 49},
    {sipName_StrikeIndicator, QsciScintilla::StrikeIndicator, 54},
    {sipName_SymbolMargin, QsciScintilla::SymbolMargin, 55},
    {sipName_SymbolMarginDefaultBackgroundColor, QsciScintilla::SymbolMarginDefaultBackgroundColor, 55},
    {sipName_SymbolMarginDefaultForegroundColor, QsciScintilla::SymbolMarginDefaultForegroundColor, 55},
    {sipName_TTIndicator, QsciScintilla::TTIndicator, 54},
    {sipName_TextMargin, QsciScintilla::TextMargin, 55},
    {sipName_TextMarginRightJustified, QsciScintilla::TextMarginRightJustified, 55},
    {sipName_ThreeDots, QsciScintilla::ThreeDots, 56},
    {sipName_ThreeRightArrows, QsciScintilla::ThreeRightArrows, 56},
    {sipName_Underline, QsciScintilla::Underline, 56},
    {sipName_VerticalLine, QsciScintilla::VerticalLine, 56},
    {sipName_WrapCharacter, QsciScintilla::WrapCharacter, 59},
    {sipName_WrapFlagByBorder, QsciScintilla::WrapFlagByBorder, 60},
    {sipName_WrapFlagByText, QsciScintilla::WrapFlagByText, 60},
    {sipName_WrapFlagNone, QsciScintilla::WrapFlagNone, 60},
    {sipName_WrapIndentFixed, QsciScintilla::WrapIndentFixed, 58},
    {sipName_WrapIndentIndented, QsciScintilla::WrapIndentIndented, 58},
    {sipName_WrapIndentSame, QsciScintilla::WrapIndentSame, 58},
    {sipName_WrapNone, QsciScintilla::WrapNone, 59},
    {sipName_WrapWord, QsciScintilla::WrapWord, 59},
    {sipName_WsInvisible, QsciScintilla::WsInvisible, 57},
    {sipName_WsVisible, QsciScintilla::WsVisible, 57},
    {sipName_WsVisibleAfterIndent, QsciScintilla::WsVisibleAfterIndent, 57},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QsciScintilla[] = {
    {"userListActivated(int,QString)", "\1QsciScintilla.userListActivated[int, QString]", 0},
    {"textChanged()", "\1QsciScintilla.textChanged[]", 0},
    {"selectionChanged()", "\1QsciScintilla.selectionChanged[]", 0},
    {"modificationChanged(bool)", "\1QsciScintilla.modificationChanged[bool]", 0},
    {"modificationAttempted()", "\1QsciScintilla.modificationAttempted[]", 0},
    {"marginClicked(int,int,Qt::KeyboardModifiers)", "\1QsciScintilla.marginClicked[int, int, Qt.KeyboardModifiers]", 0},
    {"linesChanged()", "\1QsciScintilla.linesChanged[]", 0},
    {"indicatorReleased(int,int,Qt::KeyboardModifiers)", "\1QsciScintilla.indicatorReleased[int, int, Qt.KeyboardModifiers]", 0},
    {"indicatorClicked(int,int,Qt::KeyboardModifiers)", "\1QsciScintilla.indicatorClicked[int, int, Qt.KeyboardModifiers]", 0},
    {"copyAvailable(bool)", "\1QsciScintilla.copyAvailable[bool]", 0},
    {"cursorPositionChanged(int,int)", "\1QsciScintilla.cursorPositionChanged[int, int]", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QsciScintilla, "\1QsciScintilla(QWidget parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciScintilla = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciScintilla,
        {0}
    },
    {
        sipNameNr_QsciScintilla,
        {0, 0, 1},
        208, methods_QsciScintilla,
        86, enummembers_QsciScintilla,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciScintilla,
    -1,
    -1,
    supers_QsciScintilla,
    0,
    init_QsciScintilla,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciScintilla,
    0,
    0,
    0,
    release_QsciScintilla,
    cast_QsciScintilla,
    0,
    0,
    0
},
    &QsciScintilla::staticMetaObject,
    0,
    pyqt4_signals_QsciScintilla
};
