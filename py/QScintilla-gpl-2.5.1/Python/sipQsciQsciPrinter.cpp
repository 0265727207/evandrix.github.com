/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qsciprinter.sip"
#include <Qsci/qsciprinter.h>
#line 39 "./sipQsciQsciPrinter.cpp"

#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qprinter.sip"
#include <qprinter.h>
#line 43 "./sipQsciQsciPrinter.cpp"
#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 46 "./sipQsciQsciPrinter.cpp"
#line 34 "sip/qsciscintillabase4.sip"
#include <Qsci/qsciscintillabase.h>
#line 49 "./sipQsciQsciPrinter.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 52 "./sipQsciQsciPrinter.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 55 "./sipQsciQsciPrinter.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qprintengine.sip"
#include <qprintengine.h>
#line 58 "./sipQsciQsciPrinter.cpp"
#line 66 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 61 "./sipQsciQsciPrinter.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 64 "./sipQsciQsciPrinter.cpp"
#line 108 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 67 "./sipQsciQsciPrinter.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 70 "./sipQsciQsciPrinter.cpp"
#line 169 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 73 "./sipQsciQsciPrinter.cpp"
#line 633 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "./sipQsciQsciPrinter.cpp"


class sipQsciPrinter : public QsciPrinter
{
public:
    sipQsciPrinter(QPrinter::PrinterMode);
    virtual ~sipQsciPrinter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void formatPage(QPainter&,bool,QRect&,int);
    void setMagnification(int);
    int printRange(QsciScintillaBase *,int,int);
    void setWrapMode(QsciScintilla::WrapMode);
    int devType() const;
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciPrinter(const sipQsciPrinter &);
    sipQsciPrinter &operator = (const sipQsciPrinter &);

    char sipPyMethods[7];
};

sipQsciPrinter::sipQsciPrinter(QPrinter::PrinterMode a0): QsciPrinter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciPrinter::~sipQsciPrinter()
{
    sipCommonDtor(sipPySelf);
}

void sipQsciPrinter::formatPage(QPainter& a0,bool a1,QRect& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_formatPage);

    if (!sipMeth)
    {
        QsciPrinter::formatPage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_Qsci_4(sip_gilstate_t,PyObject *,QPainter&,bool,QRect&,int);

    sipVH_Qsci_4(sipGILState,sipMeth,a0,a1,a2,a3);
}

void sipQsciPrinter::setMagnification(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setMagnification);

    if (!sipMeth)
    {
        QsciPrinter::setMagnification(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

int sipQsciPrinter::printRange(QsciScintillaBase *a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_printRange);

    if (!sipMeth)
        return QsciPrinter::printRange(a0,a1,a2);

    extern int sipVH_Qsci_3(sip_gilstate_t,PyObject *,QsciScintillaBase *,int,int);

    return sipVH_Qsci_3(sipGILState,sipMeth,a0,a1,a2);
}

void sipQsciPrinter::setWrapMode(QsciScintilla::WrapMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setWrapMode);

    if (!sipMeth)
    {
        QsciPrinter::setWrapMode(a0);
        return;
    }

    extern void sipVH_Qsci_2(sip_gilstate_t,PyObject *,QsciScintilla::WrapMode);

    sipVH_Qsci_2(sipGILState,sipMeth,a0);
}

int sipQsciPrinter::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QPrinter::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

QPaintEngine * sipQsciPrinter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QPrinter::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_Qsci_QtGui->em_virthandlers[27]))(sipGILState,sipMeth);
}

int sipQsciPrinter::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QPrinter::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_Qsci_QtGui->em_virthandlers[14]))(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_QsciPrinter_formatPage, "QsciPrinter.formatPage(QPainter, bool, QRect, int)");

extern "C" {static PyObject *meth_QsciPrinter_formatPage(PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_formatPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        bool a1;
        QRect * a2;
        int a3;
        QsciPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9bJ9i", &sipSelf, sipType_QsciPrinter, &sipCpp, sipType_QPainter, &a0, &a1, sipType_QRect, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciPrinter::formatPage(*a0,a1,*a2,a3) : sipCpp->formatPage(*a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_formatPage, doc_QsciPrinter_formatPage);

    return NULL;
}


PyDoc_STRVAR(doc_QsciPrinter_magnification, "QsciPrinter.magnification() -> int");

extern "C" {static PyObject *meth_QsciPrinter_magnification(PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_magnification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->magnification();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_magnification, doc_QsciPrinter_magnification);

    return NULL;
}


PyDoc_STRVAR(doc_QsciPrinter_setMagnification, "QsciPrinter.setMagnification(int)");

extern "C" {static PyObject *meth_QsciPrinter_setMagnification(PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_setMagnification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciPrinter::setMagnification(a0) : sipCpp->setMagnification(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_setMagnification, doc_QsciPrinter_setMagnification);

    return NULL;
}


PyDoc_STRVAR(doc_QsciPrinter_printRange, "QsciPrinter.printRange(QsciScintillaBase, int from=-1, int to=-1) -> int");

extern "C" {static PyObject *meth_QsciPrinter_printRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_printRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintillaBase * a0;
        int a1 = -1;
        int a2 = -1;
        QsciPrinter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|ii", &sipSelf, sipType_QsciPrinter, &sipCpp, sipType_QsciScintillaBase, &a0, &a1, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciPrinter::printRange(a0,a1,a2) : sipCpp->printRange(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_printRange, doc_QsciPrinter_printRange);

    return NULL;
}


PyDoc_STRVAR(doc_QsciPrinter_wrapMode, "QsciPrinter.wrapMode() -> QsciScintilla.WrapMode");

extern "C" {static PyObject *meth_QsciPrinter_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciPrinter, &sipCpp))
        {
            QsciScintilla::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QsciScintilla_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_wrapMode, doc_QsciPrinter_wrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QsciPrinter_setWrapMode, "QsciPrinter.setWrapMode(QsciScintilla.WrapMode)");

extern "C" {static PyObject *meth_QsciPrinter_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QsciPrinter_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciScintilla::WrapMode a0;
        QsciPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciPrinter, &sipCpp, sipType_QsciScintilla_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciPrinter::setWrapMode(a0) : sipCpp->setWrapMode(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciPrinter, sipName_setWrapMode, doc_QsciPrinter_setWrapMode);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciPrinter(void *, const sipTypeDef *);}
static void *cast_QsciPrinter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciPrinter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPrinter)->ctd_cast((QPrinter *)(QsciPrinter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciPrinter(void *, int);}
static void release_QsciPrinter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQsciPrinter *>(sipCppV);
    else
        delete reinterpret_cast<QsciPrinter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QsciPrinter(sipSimpleWrapper *);}
static void dealloc_QsciPrinter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciPrinter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciPrinter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QsciPrinter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QsciPrinter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQsciPrinter *sipCpp = 0;

    {
        QPrinter::PrinterMode a0 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QPrinter_PrinterMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQsciPrinter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciPrinter[] = {{405, 1, 1}};


static PyMethodDef methods_QsciPrinter[] = {
    {SIP_MLNAME_CAST(sipName_formatPage), meth_QsciPrinter_formatPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciPrinter_formatPage)},
    {SIP_MLNAME_CAST(sipName_magnification), meth_QsciPrinter_magnification, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciPrinter_magnification)},
    {SIP_MLNAME_CAST(sipName_printRange), (PyCFunction)meth_QsciPrinter_printRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciPrinter_printRange)},
    {SIP_MLNAME_CAST(sipName_setMagnification), meth_QsciPrinter_setMagnification, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciPrinter_setMagnification)},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QsciPrinter_setWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciPrinter_setWrapMode)},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QsciPrinter_wrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciPrinter_wrapMode)}
};

PyDoc_STRVAR(doc_QsciPrinter, "\1QsciPrinter(QPrinter.PrinterMode mode=QPrinter.ScreenResolution)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciPrinter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciPrinter,
        {0}
    },
    {
        sipNameNr_QsciPrinter,
        {0, 0, 1},
        6, methods_QsciPrinter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciPrinter,
    -1,
    -1,
    supers_QsciPrinter,
    0,
    init_QsciPrinter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciPrinter,
    0,
    0,
    0,
    release_QsciPrinter,
    cast_QsciPrinter,
    0,
    0,
    0
},
    0,
    0,
    0
};
