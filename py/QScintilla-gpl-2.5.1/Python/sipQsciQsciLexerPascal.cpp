/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qscilexerpascal.sip"
#include <Qsci/qscilexerpascal.h>
#line 39 "./sipQsciQsciLexerPascal.cpp"

#line 39 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "./sipQsciQsciLexerPascal.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 46 "./sipQsciQsciLexerPascal.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "./sipQsciQsciLexerPascal.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 52 "./sipQsciQsciLexerPascal.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 55 "./sipQsciQsciLexerPascal.cpp"
#line 34 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 58 "./sipQsciQsciLexerPascal.cpp"
#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 61 "./sipQsciQsciLexerPascal.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "./sipQsciQsciLexerPascal.cpp"
#line 315 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "./sipQsciQsciLexerPascal.cpp"
#line 303 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "./sipQsciQsciLexerPascal.cpp"
#line 243 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "./sipQsciQsciLexerPascal.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "./sipQsciQsciLexerPascal.cpp"
#line 42 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79 "./sipQsciQsciLexerPascal.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "./sipQsciQsciLexerPascal.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "./sipQsciQsciLexerPascal.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 88 "./sipQsciQsciLexerPascal.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "./sipQsciQsciLexerPascal.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "./sipQsciQsciLexerPascal.cpp"


class sipQsciLexerPascal : public QsciLexerPascal
{
public:
    sipQsciLexerPascal(QObject *);
    virtual ~sipQsciLexerPascal();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setFoldComments(bool);
    void setFoldCompact(bool);
    void setFoldPreprocessor(bool);
    const char * language() const;
    const char * lexer() const;
    int lexerId() const;
    QColor color(int) const;
    bool eolFill(int) const;
    QFont font(int) const;
    const char * keywords(int) const;
    QString description(int) const;
    QColor paper(int) const;
    QColor defaultColor(int) const;
    bool defaultEolFill(int) const;
    QFont defaultFont(int) const;
    QColor defaultPaper(int) const;
    void refreshProperties();
    int styleBitsNeeded() const;
    void setAutoIndentStyle(int);
    void setColor(const QColor&,int);
    void setEolFill(bool,int);
    void setFont(const QFont&,int);
    void setPaper(const QColor&,int);
    bool readProperties(QSettings&,const QString&);
    bool writeProperties(QSettings&,const QString&) const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexerPascal(const sipQsciLexerPascal &);
    sipQsciLexerPascal &operator = (const sipQsciLexerPascal &);

    char sipPyMethods[32];
};

sipQsciLexerPascal::sipQsciLexerPascal(QObject *a0): QsciLexerPascal(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexerPascal::~sipQsciLexerPascal()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexerPascal::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexerPascal);
}

int sipQsciLexerPascal::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexerPascal::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexerPascal,_c,_id,_a);

    return _id;
}

void *sipQsciLexerPascal::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast && sip_Qsci_qt_metacast(sipPySelf,sipType_QsciLexerPascal,_clname)) ? this : QsciLexerPascal::qt_metacast(_clname);
}

void sipQsciLexerPascal::setFoldComments(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setFoldComments);

    if (!sipMeth)
    {
        QsciLexerPascal::setFoldComments(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::setFoldCompact(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setFoldCompact);

    if (!sipMeth)
    {
        QsciLexerPascal::setFoldCompact(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::setFoldPreprocessor(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setFoldPreprocessor);

    if (!sipMeth)
    {
        QsciLexerPascal::setFoldPreprocessor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

const char * sipQsciLexerPascal::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_language);

    if (!sipMeth)
        return QsciLexerPascal::language();

    extern const char * sipVH_Qsci_13(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_Qsci_13(sipGILState,sipMeth,-44,sipPySelf);
}

const char * sipQsciLexerPascal::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexerPascal::lexer();

    extern const char * sipVH_Qsci_13(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_Qsci_13(sipGILState,sipMeth,-45,sipPySelf);
}

int sipQsciLexerPascal::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexer::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

QColor sipQsciLexerPascal::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexer::color(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

bool sipQsciLexerPascal::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexer::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState,sipMeth,a0);
}

QFont sipQsciLexerPascal::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexer::font(a0);

    extern QFont sipVH_Qsci_12(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_12(sipGILState,sipMeth,a0);
}

const char * sipQsciLexerPascal::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexerPascal::keywords(a0);

    typedef const char * (*sipVH_QtGui_146)(sip_gilstate_t,PyObject *,int,int,sipSimpleWrapper *);

    return ((sipVH_QtGui_146)(sipModuleAPI_Qsci_QtGui->em_virthandlers[146]))(sipGILState,sipMeth,a0,-46,sipPySelf);
}

QString sipQsciLexerPascal::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_description);

    if (!sipMeth)
        return QsciLexerPascal::description(a0);

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState,sipMeth,a0);
}

QColor sipQsciLexerPascal::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexer::paper(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

QColor sipQsciLexerPascal::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexerPascal::defaultColor(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

bool sipQsciLexerPascal::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexerPascal::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState,sipMeth,a0);
}

QFont sipQsciLexerPascal::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexerPascal::defaultFont(a0);

    extern QFont sipVH_Qsci_12(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_12(sipGILState,sipMeth,a0);
}

QColor sipQsciLexerPascal::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexerPascal::defaultPaper(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexerPascal::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

int sipQsciLexerPascal::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexer::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

void sipQsciLexerPascal::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexer::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexer::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t,PyObject *,const QColor&,int);

    sipVH_Qsci_8(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexerPascal::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexer::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t,PyObject *,bool,int);

    sipVH_Qsci_10(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexerPascal::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexer::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t,PyObject *,const QFont&,int);

    sipVH_Qsci_9(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexerPascal::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexer::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t,PyObject *,const QColor&,int);

    sipVH_Qsci_8(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexerPascal::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexerPascal::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t,PyObject *,QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexerPascal::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexerPascal::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t,PyObject *,QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexerPascal::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState,sipMeth,a0);
}

bool sipQsciLexerPascal::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexerPascal::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

void sipQsciLexerPascal::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_QsciLexerPascal_language, "QsciLexerPascal.language() -> str");

extern "C" {static PyObject *meth_QsciLexerPascal_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::language() : sipCpp->language());
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_language, doc_QsciLexerPascal_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_lexer, "QsciLexerPascal.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexerPascal_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::lexer() : sipCpp->lexer());
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_lexer, doc_QsciLexerPascal_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_defaultColor, "QsciLexerPascal.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerPascal_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerPascal::defaultColor(a0) : sipCpp->defaultColor(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_defaultColor, doc_QsciLexerPascal_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_defaultEolFill, "QsciLexerPascal.defaultEolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_defaultEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_defaultEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::defaultEolFill(a0) : sipCpp->defaultEolFill(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_defaultEolFill, doc_QsciLexerPascal_defaultEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_defaultFont, "QsciLexerPascal.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexerPascal_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexerPascal::defaultFont(a0) : sipCpp->defaultFont(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_defaultFont, doc_QsciLexerPascal_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_defaultPaper, "QsciLexerPascal.defaultPaper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerPascal_defaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_defaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerPascal::defaultPaper(a0) : sipCpp->defaultPaper(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_defaultPaper, doc_QsciLexerPascal_defaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_keywords, "QsciLexerPascal.keywords(int) -> str");

extern "C" {static PyObject *meth_QsciLexerPascal_keywords(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_keywords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::keywords(a0) : sipCpp->keywords(a0));
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_keywords, doc_QsciLexerPascal_keywords);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_description, "QsciLexerPascal.description(int) -> QString");

extern "C" {static PyObject *meth_QsciLexerPascal_description(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QsciLexerPascal::description(a0) : sipCpp->description(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_description, doc_QsciLexerPascal_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_refreshProperties, "QsciLexerPascal.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexerPascal_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexerPascal::refreshProperties() : sipCpp->refreshProperties());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_refreshProperties, doc_QsciLexerPascal_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_foldComments, "QsciLexerPascal.foldComments() -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_foldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_foldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->foldComments();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_foldComments, doc_QsciLexerPascal_foldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_foldCompact, "QsciLexerPascal.foldCompact() -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_foldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_foldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->foldCompact();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_foldCompact, doc_QsciLexerPascal_foldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_foldPreprocessor, "QsciLexerPascal.foldPreprocessor() -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_foldPreprocessor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_foldPreprocessor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->foldPreprocessor();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_foldPreprocessor, doc_QsciLexerPascal_foldPreprocessor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_setSmartHighlighting, "QsciLexerPascal.setSmartHighlighting(bool)");

extern "C" {static PyObject *meth_QsciLexerPascal_setSmartHighlighting(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_setSmartHighlighting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSmartHighlighting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_setSmartHighlighting, doc_QsciLexerPascal_setSmartHighlighting);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_smartHighlighting, "QsciLexerPascal.smartHighlighting() -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_smartHighlighting(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_smartHighlighting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPascal, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->smartHighlighting();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_smartHighlighting, doc_QsciLexerPascal_smartHighlighting);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_setFoldComments, "QsciLexerPascal.setFoldComments(bool)");

extern "C" {static PyObject *meth_QsciLexerPascal_setFoldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_setFoldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexerPascal::setFoldComments(a0) : sipCpp->setFoldComments(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_setFoldComments, doc_QsciLexerPascal_setFoldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_setFoldCompact, "QsciLexerPascal.setFoldCompact(bool)");

extern "C" {static PyObject *meth_QsciLexerPascal_setFoldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_setFoldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexerPascal::setFoldCompact(a0) : sipCpp->setFoldCompact(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_setFoldCompact, doc_QsciLexerPascal_setFoldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_setFoldPreprocessor, "QsciLexerPascal.setFoldPreprocessor(bool)");

extern "C" {static PyObject *meth_QsciLexerPascal_setFoldPreprocessor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_setFoldPreprocessor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPascal, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexerPascal::setFoldPreprocessor(a0) : sipCpp->setFoldPreprocessor(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_setFoldPreprocessor, doc_QsciLexerPascal_setFoldPreprocessor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_readProperties, "QsciLexerPascal.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings * a0;
        const QString * a1;
        int a1State = 0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPascal, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_readProperties, doc_QsciLexerPascal_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPascal_writeProperties, "QsciLexerPascal.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPascal_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPascal_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings * a0;
        const QString * a1;
        int a1State = 0;
        QsciLexerPascal *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPascal, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPascal::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPascal, sipName_writeProperties, doc_QsciLexerPascal_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexerPascal(void *, const sipTypeDef *);}
static void *cast_QsciLexerPascal(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexerPascal)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciLexer)->ctd_cast((QsciLexer *)(QsciLexerPascal *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexerPascal(void *, int);}
static void release_QsciLexerPascal(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    QsciLexerPascal *sipCpp = reinterpret_cast<QsciLexerPascal *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QsciLexerPascal(sipSimpleWrapper *);}
static void dealloc_QsciLexerPascal(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexerPascal *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexerPascal(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QsciLexerPascal(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QsciLexerPascal(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexerPascal *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQsciLexerPascal(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexerPascal[] = {{7, 255, 1}};


static PyMethodDef methods_QsciLexerPascal[] = {
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexerPascal_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultEolFill), meth_QsciLexerPascal_defaultEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_defaultEolFill)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexerPascal_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultPaper), meth_QsciLexerPascal_defaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_defaultPaper)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciLexerPascal_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_description)},
    {SIP_MLNAME_CAST(sipName_foldComments), meth_QsciLexerPascal_foldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_foldComments)},
    {SIP_MLNAME_CAST(sipName_foldCompact), meth_QsciLexerPascal_foldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_foldCompact)},
    {SIP_MLNAME_CAST(sipName_foldPreprocessor), meth_QsciLexerPascal_foldPreprocessor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_foldPreprocessor)},
    {SIP_MLNAME_CAST(sipName_keywords), meth_QsciLexerPascal_keywords, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_keywords)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexerPascal_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexerPascal_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_lexer)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexerPascal_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_readProperties)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexerPascal_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_setFoldComments), meth_QsciLexerPascal_setFoldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_setFoldComments)},
    {SIP_MLNAME_CAST(sipName_setFoldCompact), meth_QsciLexerPascal_setFoldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_setFoldCompact)},
    {SIP_MLNAME_CAST(sipName_setFoldPreprocessor), meth_QsciLexerPascal_setFoldPreprocessor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_setFoldPreprocessor)},
    {SIP_MLNAME_CAST(sipName_setSmartHighlighting), meth_QsciLexerPascal_setSmartHighlighting, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_setSmartHighlighting)},
    {SIP_MLNAME_CAST(sipName_smartHighlighting), meth_QsciLexerPascal_smartHighlighting, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_smartHighlighting)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexerPascal_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPascal_writeProperties)}
};

static sipEnumMemberDef enummembers_QsciLexerPascal[] = {
    {sipName_Asm, QsciLexerPascal::Asm, -1},
    {sipName_Character, QsciLexerPascal::Character, -1},
    {sipName_Comment, QsciLexerPascal::Comment, -1},
    {sipName_CommentLine, QsciLexerPascal::CommentLine, -1},
    {sipName_CommentParenthesis, QsciLexerPascal::CommentParenthesis, -1},
    {sipName_Default, QsciLexerPascal::Default, -1},
    {sipName_HexNumber, QsciLexerPascal::HexNumber, -1},
    {sipName_Identifier, QsciLexerPascal::Identifier, -1},
    {sipName_Keyword, QsciLexerPascal::Keyword, -1},
    {sipName_Number, QsciLexerPascal::Number, -1},
    {sipName_Operator, QsciLexerPascal::Operator, -1},
    {sipName_PreProcessor, QsciLexerPascal::PreProcessor, -1},
    {sipName_PreProcessorParenthesis, QsciLexerPascal::PreProcessorParenthesis, -1},
    {sipName_SingleQuotedString, QsciLexerPascal::SingleQuotedString, -1},
    {sipName_UnclosedString, QsciLexerPascal::UnclosedString, -1},
};

PyDoc_STRVAR(doc_QsciLexerPascal, "\1QsciLexerPascal(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexerPascal = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexerPascal,
        {0}
    },
    {
        sipNameNr_QsciLexerPascal,
        {0, 0, 1},
        19, methods_QsciLexerPascal,
        15, enummembers_QsciLexerPascal,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexerPascal,
    -1,
    -1,
    supers_QsciLexerPascal,
    0,
    init_QsciLexerPascal,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexerPascal,
    0,
    0,
    0,
    release_QsciLexerPascal,
    cast_QsciLexerPascal,
    0,
    0,
    0
},
    &QsciLexerPascal::staticMetaObject,
    0,
    0
};
