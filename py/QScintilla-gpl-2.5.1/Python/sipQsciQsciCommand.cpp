/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qscicommand.sip"
#include <Qsci/qscicommand.h>
#line 39 "./sipQsciQsciCommand.cpp"

#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 43 "./sipQsciQsciCommand.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "./sipQsciQsciCommand.cpp"


PyDoc_STRVAR(doc_QsciCommand_setKey, "QsciCommand.setKey(int)");

extern "C" {static PyObject *meth_QsciCommand_setKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciCommand, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKey(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_setKey, doc_QsciCommand_setKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_setAlternateKey, "QsciCommand.setAlternateKey(int)");

extern "C" {static PyObject *meth_QsciCommand_setAlternateKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_setAlternateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciCommand, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlternateKey(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_setAlternateKey, doc_QsciCommand_setAlternateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_key, "QsciCommand.key() -> int");

extern "C" {static PyObject *meth_QsciCommand_key(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->key();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_key, doc_QsciCommand_key);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_alternateKey, "QsciCommand.alternateKey() -> int");

extern "C" {static PyObject *meth_QsciCommand_alternateKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_alternateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alternateKey();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_alternateKey, doc_QsciCommand_alternateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_validKey, "QsciCommand.validKey(int) -> bool");

extern "C" {static PyObject *meth_QsciCommand_validKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_validKey(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QsciCommand::validKey(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_validKey, doc_QsciCommand_validKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_description, "QsciCommand.description() -> QString");

extern "C" {static PyObject *meth_QsciCommand_description(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_description, doc_QsciCommand_description);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciCommand(void *, const sipTypeDef *);}
static void *cast_QsciCommand(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciCommand)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciCommand(void *, int);}
static void release_QsciCommand(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QsciCommand *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QsciCommand(sipSimpleWrapper *);}
static void dealloc_QsciCommand(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QsciCommand(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_QsciCommand[] = {
    {SIP_MLNAME_CAST(sipName_alternateKey), meth_QsciCommand_alternateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_alternateKey)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciCommand_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_description)},
    {SIP_MLNAME_CAST(sipName_key), meth_QsciCommand_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_key)},
    {SIP_MLNAME_CAST(sipName_setAlternateKey), meth_QsciCommand_setAlternateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_setAlternateKey)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QsciCommand_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_setKey)},
    {SIP_MLNAME_CAST(sipName_validKey), meth_QsciCommand_validKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_validKey)}
};


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciCommand = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciCommand,
        {0}
    },
    {
        sipNameNr_QsciCommand,
        {0, 0, 1},
        6, methods_QsciCommand,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciCommand,
    0,
    0,
    0,
    release_QsciCommand,
    cast_QsciCommand,
    0,
    0,
    0
},
    0,
    0,
    0
};
