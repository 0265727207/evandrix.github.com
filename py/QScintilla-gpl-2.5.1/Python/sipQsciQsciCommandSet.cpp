/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qscicommandset.sip"
#include <Qsci/qscicommandset.h>
#line 39 "./sipQsciQsciCommandSet.cpp"

#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 43 "./sipQsciQsciCommandSet.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "./sipQsciQsciCommandSet.cpp"
#line 34 "sip/qscicommand.sip"
#include <Qsci/qscicommand.h>
#line 49 "./sipQsciQsciCommandSet.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 52 "./sipQsciQsciCommandSet.cpp"


PyDoc_STRVAR(doc_QsciCommandSet_readSettings, "QsciCommandSet.readSettings(QSettings, str prefix=\"/Scintilla\") -> bool");

extern "C" {static PyObject *meth_QsciCommandSet_readSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciCommandSet_readSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings * a0;
        const char * a1 = "/Scintilla";
        QsciCommandSet *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|s", &sipSelf, sipType_QsciCommandSet, &sipCpp, sipType_QSettings, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readSettings(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommandSet, sipName_readSettings, doc_QsciCommandSet_readSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommandSet_writeSettings, "QsciCommandSet.writeSettings(QSettings, str prefix=\"/Scintilla\") -> bool");

extern "C" {static PyObject *meth_QsciCommandSet_writeSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciCommandSet_writeSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings * a0;
        const char * a1 = "/Scintilla";
        QsciCommandSet *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|s", &sipSelf, sipType_QsciCommandSet, &sipCpp, sipType_QSettings, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeSettings(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommandSet, sipName_writeSettings, doc_QsciCommandSet_writeSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommandSet_commands, "QsciCommandSet.commands() -> list-of-QsciCommand");

extern "C" {static PyObject *meth_QsciCommandSet_commands(PyObject *, PyObject *);}
static PyObject *meth_QsciCommandSet_commands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommandSet *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommandSet, &sipCpp))
        {
            QList<QsciCommand *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->commands();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QList_0101QsciCommand,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommandSet, sipName_commands, doc_QsciCommandSet_commands);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommandSet_clearKeys, "QsciCommandSet.clearKeys()");

extern "C" {static PyObject *meth_QsciCommandSet_clearKeys(PyObject *, PyObject *);}
static PyObject *meth_QsciCommandSet_clearKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommandSet *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommandSet, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearKeys();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommandSet, sipName_clearKeys, doc_QsciCommandSet_clearKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommandSet_clearAlternateKeys, "QsciCommandSet.clearAlternateKeys()");

extern "C" {static PyObject *meth_QsciCommandSet_clearAlternateKeys(PyObject *, PyObject *);}
static PyObject *meth_QsciCommandSet_clearAlternateKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommandSet *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommandSet, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearAlternateKeys();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommandSet, sipName_clearAlternateKeys, doc_QsciCommandSet_clearAlternateKeys);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciCommandSet(void *, const sipTypeDef *);}
static void *cast_QsciCommandSet(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciCommandSet)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciCommandSet(void *, int);}
static void release_QsciCommandSet(void *,int)
{
}


static PyMethodDef methods_QsciCommandSet[] = {
    {SIP_MLNAME_CAST(sipName_clearAlternateKeys), meth_QsciCommandSet_clearAlternateKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommandSet_clearAlternateKeys)},
    {SIP_MLNAME_CAST(sipName_clearKeys), meth_QsciCommandSet_clearKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommandSet_clearKeys)},
    {SIP_MLNAME_CAST(sipName_commands), meth_QsciCommandSet_commands, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommandSet_commands)},
    {SIP_MLNAME_CAST(sipName_readSettings), (PyCFunction)meth_QsciCommandSet_readSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciCommandSet_readSettings)},
    {SIP_MLNAME_CAST(sipName_writeSettings), (PyCFunction)meth_QsciCommandSet_writeSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciCommandSet_writeSettings)}
};


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciCommandSet = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciCommandSet,
        {0}
    },
    {
        sipNameNr_QsciCommandSet,
        {0, 0, 1},
        5, methods_QsciCommandSet,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QsciCommandSet,
    cast_QsciCommandSet,
    0,
    0,
    0
},
    0,
    0,
    0
};
