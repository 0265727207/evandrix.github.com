/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12.5-snapshot-c2987628087f on Thu Sep  1 02:20:43 2011
 *
 * Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 34 "sip/qscilexer.sip"
#include <Qsci/qscilexer.h>
#line 39 "./sipQsciQsciLexer.cpp"

#line 39 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "./sipQsciQsciLexer.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 46 "./sipQsciQsciLexer.cpp"
#line 41 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "./sipQsciQsciLexer.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 52 "./sipQsciQsciLexer.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 55 "./sipQsciQsciLexer.cpp"
#line 34 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 58 "./sipQsciQsciLexer.cpp"
#line 34 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 61 "./sipQsciQsciLexer.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "./sipQsciQsciLexer.cpp"
#line 315 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "./sipQsciQsciLexer.cpp"
#line 303 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "./sipQsciQsciLexer.cpp"
#line 243 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "./sipQsciQsciLexer.cpp"
#line 38 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "./sipQsciQsciLexer.cpp"
#line 42 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79 "./sipQsciQsciLexer.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "./sipQsciQsciLexer.cpp"
#line 125 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "./sipQsciQsciLexer.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 88 "./sipQsciQsciLexer.cpp"
#line 40 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "./sipQsciQsciLexer.cpp"
#line 36 "/System/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "./sipQsciQsciLexer.cpp"


class sipQsciLexer : public QsciLexer
{
public:
    sipQsciLexer(QObject *);
    virtual ~sipQsciLexer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char * language() const;
    const char * lexer() const;
    int lexerId() const;
    QColor color(int) const;
    bool eolFill(int) const;
    QFont font(int) const;
    const char * keywords(int) const;
    QString description(int) const;
    QColor paper(int) const;
    QColor defaultColor(int) const;
    bool defaultEolFill(int) const;
    QFont defaultFont(int) const;
    QColor defaultPaper(int) const;
    void refreshProperties();
    int styleBitsNeeded() const;
    void setAutoIndentStyle(int);
    void setColor(const QColor&,int);
    void setEolFill(bool,int);
    void setFont(const QFont&,int);
    void setPaper(const QColor&,int);
    bool readProperties(QSettings&,const QString&);
    bool writeProperties(QSettings&,const QString&) const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexer(const sipQsciLexer &);
    sipQsciLexer &operator = (const sipQsciLexer &);

    char sipPyMethods[29];
};

sipQsciLexer::sipQsciLexer(QObject *a0): QsciLexer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexer::~sipQsciLexer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexer::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexer);
}

int sipQsciLexer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexer,_c,_id,_a);

    return _id;
}

void *sipQsciLexer::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast && sip_Qsci_qt_metacast(sipPySelf,sipType_QsciLexer,_clname)) ? this : QsciLexer::qt_metacast(_clname);
}

const char * sipQsciLexer::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QsciLexer,sipName_language);

    if (!sipMeth)
        return 0;

    extern const char * sipVH_Qsci_13(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_Qsci_13(sipGILState,sipMeth,-104,sipPySelf);
}

const char * sipQsciLexer::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexer::lexer();

    extern const char * sipVH_Qsci_13(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_Qsci_13(sipGILState,sipMeth,-105,sipPySelf);
}

int sipQsciLexer::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexer::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

QColor sipQsciLexer::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexer::color(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

bool sipQsciLexer::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexer::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState,sipMeth,a0);
}

QFont sipQsciLexer::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexer::font(a0);

    extern QFont sipVH_Qsci_12(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_12(sipGILState,sipMeth,a0);
}

const char * sipQsciLexer::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexer::keywords(a0);

    typedef const char * (*sipVH_QtGui_146)(sip_gilstate_t,PyObject *,int,int,sipSimpleWrapper *);

    return ((sipVH_QtGui_146)(sipModuleAPI_Qsci_QtGui->em_virthandlers[146]))(sipGILState,sipMeth,a0,-106,sipPySelf);
}

QString sipQsciLexer::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QsciLexer,sipName_description);

    if (!sipMeth)
        return QString();

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState,sipMeth,a0);
}

QColor sipQsciLexer::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexer::paper(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

QColor sipQsciLexer::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexer::defaultColor(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

bool sipQsciLexer::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexer::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState,sipMeth,a0);
}

QFont sipQsciLexer::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexer::defaultFont(a0);

    extern QFont sipVH_Qsci_12(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_12(sipGILState,sipMeth,a0);
}

QColor sipQsciLexer::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexer::defaultPaper(a0);

    extern QColor sipVH_Qsci_11(sip_gilstate_t,PyObject *,int);

    return sipVH_Qsci_11(sipGILState,sipMeth,a0);
}

void sipQsciLexer::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexer::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

int sipQsciLexer::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexer::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

void sipQsciLexer::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexer::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState,sipMeth,a0);
}

void sipQsciLexer::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexer::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t,PyObject *,const QColor&,int);

    sipVH_Qsci_8(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexer::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexer::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t,PyObject *,bool,int);

    sipVH_Qsci_10(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexer::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexer::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t,PyObject *,const QFont&,int);

    sipVH_Qsci_9(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexer::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexer::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t,PyObject *,const QColor&,int);

    sipVH_Qsci_8(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexer::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexer::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t,PyObject *,QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexer::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexer::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t,PyObject *,QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState,sipMeth,a0,a1);
}

bool sipQsciLexer::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState,sipMeth,a0);
}

bool sipQsciLexer::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState,sipMeth,a0,a1);
}

void sipQsciLexer::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void sipQsciLexer::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void sipQsciLexer::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void sipQsciLexer::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

void sipQsciLexer::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_QsciLexer_language, "QsciLexer.language() -> str");

extern "C" {static PyObject *meth_QsciLexer_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            const char *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QsciLexer, sipName_language);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->language();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_language, doc_QsciLexer_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_lexer, "QsciLexer.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexer_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::lexer() : sipCpp->lexer());
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_lexer, doc_QsciLexer_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_lexerId, "QsciLexer.lexerId() -> int");

extern "C" {static PyObject *meth_QsciLexer_lexerId(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_lexerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::lexerId() : sipCpp->lexerId());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_lexerId, doc_QsciLexer_lexerId);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_apis, "QsciLexer.apis() -> QsciAbstractAPIs");

extern "C" {static PyObject *meth_QsciLexer_apis(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_apis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            QsciAbstractAPIs *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->apis();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QsciAbstractAPIs,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_apis, doc_QsciLexer_apis);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_autoIndentStyle, "QsciLexer.autoIndentStyle() -> int");

extern "C" {static PyObject *meth_QsciLexer_autoIndentStyle(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_autoIndentStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoIndentStyle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_autoIndentStyle, doc_QsciLexer_autoIndentStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_color, "QsciLexer.color(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexer_color(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexer::color(a0) : sipCpp->color(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_color, doc_QsciLexer_color);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_eolFill, "QsciLexer.eolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexer_eolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_eolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::eolFill(a0) : sipCpp->eolFill(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_eolFill, doc_QsciLexer_eolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_font, "QsciLexer.font(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexer_font(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexer::font(a0) : sipCpp->font(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_font, doc_QsciLexer_font);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_keywords, "QsciLexer.keywords(int) -> str");

extern "C" {static PyObject *meth_QsciLexer_keywords(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_keywords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::keywords(a0) : sipCpp->keywords(a0));
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_keywords, doc_QsciLexer_keywords);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_description, "QsciLexer.description(int) -> QString");

extern "C" {static PyObject *meth_QsciLexer_description(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QsciLexer, sipName_description);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_description, doc_QsciLexer_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_paper, "QsciLexer.paper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexer_paper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_paper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexer::paper(a0) : sipCpp->paper(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_paper, doc_QsciLexer_paper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_defaultColor, "QsciLexer.defaultColor() -> QColor\n"
    "QsciLexer.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexer_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->defaultColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexer::defaultColor(a0) : sipCpp->defaultColor(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_defaultColor, doc_QsciLexer_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_defaultEolFill, "QsciLexer.defaultEolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexer_defaultEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_defaultEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::defaultEolFill(a0) : sipCpp->defaultEolFill(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_defaultEolFill, doc_QsciLexer_defaultEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_defaultFont, "QsciLexer.defaultFont() -> QFont\n"
    "QsciLexer.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexer_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->defaultFont());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexer::defaultFont(a0) : sipCpp->defaultFont(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_defaultFont, doc_QsciLexer_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_defaultPaper, "QsciLexer.defaultPaper() -> QColor\n"
    "QsciLexer.defaultPaper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexer_defaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_defaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->defaultPaper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexer::defaultPaper(a0) : sipCpp->defaultPaper(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_defaultPaper, doc_QsciLexer_defaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_editor, "QsciLexer.editor() -> QsciScintilla");

extern "C" {static PyObject *meth_QsciLexer_editor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_editor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            QsciScintilla *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->editor();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QsciScintilla,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_editor, doc_QsciLexer_editor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_refreshProperties, "QsciLexer.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexer_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::refreshProperties() : sipCpp->refreshProperties());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_refreshProperties, doc_QsciLexer_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setAPIs, "QsciLexer.setAPIs(QsciAbstractAPIs)");

extern "C" {static PyObject *meth_QsciLexer_setAPIs(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setAPIs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciAbstractAPIs * a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QsciAbstractAPIs, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAPIs(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setAPIs, doc_QsciLexer_setAPIs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setDefaultColor, "QsciLexer.setDefaultColor(QColor)");

extern "C" {static PyObject *meth_QsciLexer_setDefaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setDefaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setDefaultColor, doc_QsciLexer_setDefaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setDefaultFont, "QsciLexer.setDefaultFont(QFont)");

extern "C" {static PyObject *meth_QsciLexer_setDefaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setDefaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setDefaultFont, doc_QsciLexer_setDefaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setDefaultPaper, "QsciLexer.setDefaultPaper(QColor)");

extern "C" {static PyObject *meth_QsciLexer_setDefaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setDefaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultPaper(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setDefaultPaper, doc_QsciLexer_setDefaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_styleBitsNeeded, "QsciLexer.styleBitsNeeded() -> int");

extern "C" {static PyObject *meth_QsciLexer_styleBitsNeeded(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_styleBitsNeeded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::styleBitsNeeded() : sipCpp->styleBitsNeeded());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_styleBitsNeeded, doc_QsciLexer_styleBitsNeeded);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_readSettings, "QsciLexer.readSettings(QSettings, str prefix=\"/Scintilla\") -> bool");

extern "C" {static PyObject *meth_QsciLexer_readSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_readSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings * a0;
        const char * a1 = "/Scintilla";
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|s", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QSettings, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readSettings(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_readSettings, doc_QsciLexer_readSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_writeSettings, "QsciLexer.writeSettings(QSettings, str prefix=\"/Scintilla\") -> bool");

extern "C" {static PyObject *meth_QsciLexer_writeSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_writeSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings * a0;
        const char * a1 = "/Scintilla";
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|s", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QSettings, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeSettings(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_writeSettings, doc_QsciLexer_writeSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setAutoIndentStyle, "QsciLexer.setAutoIndentStyle(int)");

extern "C" {static PyObject *meth_QsciLexer_setAutoIndentStyle(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setAutoIndentStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::setAutoIndentStyle(a0) : sipCpp->setAutoIndentStyle(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setAutoIndentStyle, doc_QsciLexer_setAutoIndentStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setColor, "QsciLexer.setColor(QColor, int style=-1)");

extern "C" {static PyObject *meth_QsciLexer_setColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        int a1 = -1;
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QColor, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::setColor(*a0,a1) : sipCpp->setColor(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setColor, doc_QsciLexer_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setEolFill, "QsciLexer.setEolFill(bool, int style=-1)");

extern "C" {static PyObject *meth_QsciLexer_setEolFill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setEolFill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        int a1 = -1;
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QsciLexer, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::setEolFill(a0,a1) : sipCpp->setEolFill(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setEolFill, doc_QsciLexer_setEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setFont, "QsciLexer.setFont(QFont, int style=-1)");

extern "C" {static PyObject *meth_QsciLexer_setFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        int a1 = -1;
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QFont, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::setFont(*a0,a1) : sipCpp->setFont(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setFont, doc_QsciLexer_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_setPaper, "QsciLexer.setPaper(QColor, int style=-1)");

extern "C" {static PyObject *meth_QsciLexer_setPaper(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_setPaper(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QColor * a0;
        int a0State = 0;
        int a1 = -1;
        QsciLexer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QColor, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QsciLexer::setPaper(*a0,a1) : sipCpp->setPaper(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_setPaper, doc_QsciLexer_setPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_readProperties, "QsciLexer.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexer_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings * a0;
        const QString * a1;
        int a1State = 0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_readProperties, doc_QsciLexer_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexer_writeProperties, "QsciLexer.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexer_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexer_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings * a0;
        const QString * a1;
        int a1State = 0;
        QsciLexer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexer, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QsciLexer::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexer, sipName_writeProperties, doc_QsciLexer_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexer(void *, const sipTypeDef *);}
static void *cast_QsciLexer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QsciLexer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexer(void *, int);}
static void release_QsciLexer(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    QsciLexer *sipCpp = reinterpret_cast<QsciLexer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QsciLexer(sipSimpleWrapper *);}
static void dealloc_QsciLexer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QsciLexer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QsciLexer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexer *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQsciLexer(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexer[] = {{134, 0, 1}};


static PyMethodDef methods_QsciLexer[] = {
    {SIP_MLNAME_CAST(sipName_apis), meth_QsciLexer_apis, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_apis)},
    {SIP_MLNAME_CAST(sipName_autoIndentStyle), meth_QsciLexer_autoIndentStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_autoIndentStyle)},
    {SIP_MLNAME_CAST(sipName_color), meth_QsciLexer_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_color)},
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexer_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultEolFill), meth_QsciLexer_defaultEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_defaultEolFill)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexer_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultPaper), meth_QsciLexer_defaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_defaultPaper)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciLexer_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_description)},
    {SIP_MLNAME_CAST(sipName_editor), meth_QsciLexer_editor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_editor)},
    {SIP_MLNAME_CAST(sipName_eolFill), meth_QsciLexer_eolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_eolFill)},
    {SIP_MLNAME_CAST(sipName_font), meth_QsciLexer_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_font)},
    {SIP_MLNAME_CAST(sipName_keywords), meth_QsciLexer_keywords, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_keywords)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexer_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexer_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_lexer)},
    {SIP_MLNAME_CAST(sipName_lexerId), meth_QsciLexer_lexerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_lexerId)},
    {SIP_MLNAME_CAST(sipName_paper), meth_QsciLexer_paper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_paper)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexer_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_readProperties)},
    {SIP_MLNAME_CAST(sipName_readSettings), (PyCFunction)meth_QsciLexer_readSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_readSettings)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexer_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_setAPIs), meth_QsciLexer_setAPIs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_setAPIs)},
    {SIP_MLNAME_CAST(sipName_setAutoIndentStyle), meth_QsciLexer_setAutoIndentStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_setAutoIndentStyle)},
    {SIP_MLNAME_CAST(sipName_setColor), (PyCFunction)meth_QsciLexer_setColor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_setColor)},
    {SIP_MLNAME_CAST(sipName_setDefaultColor), meth_QsciLexer_setDefaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_setDefaultColor)},
    {SIP_MLNAME_CAST(sipName_setDefaultFont), meth_QsciLexer_setDefaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_setDefaultFont)},
    {SIP_MLNAME_CAST(sipName_setDefaultPaper), meth_QsciLexer_setDefaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_setDefaultPaper)},
    {SIP_MLNAME_CAST(sipName_setEolFill), (PyCFunction)meth_QsciLexer_setEolFill, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_setEolFill)},
    {SIP_MLNAME_CAST(sipName_setFont), (PyCFunction)meth_QsciLexer_setFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_setFont)},
    {SIP_MLNAME_CAST(sipName_setPaper), (PyCFunction)meth_QsciLexer_setPaper, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_setPaper)},
    {SIP_MLNAME_CAST(sipName_styleBitsNeeded), meth_QsciLexer_styleBitsNeeded, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_styleBitsNeeded)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexer_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexer_writeProperties)},
    {SIP_MLNAME_CAST(sipName_writeSettings), (PyCFunction)meth_QsciLexer_writeSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QsciLexer_writeSettings)}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QsciLexer[] = {
    {"propertyChanged(char *,char *)", "\1QsciLexer.propertyChanged[str, str]", 0},
    {"paperChanged(QColor,int)", "\1QsciLexer.paperChanged[QColor, int]", 0},
    {"fontChanged(QFont,int)", "\1QsciLexer.fontChanged[QFont, int]", 0},
    {"eolFillChanged(bool,int)", "\1QsciLexer.eolFillChanged[bool, int]", 0},
    {"colorChanged(QColor,int)", "\1QsciLexer.colorChanged[QColor, int]", 0},
    {0, 0, 0}
};

PyDoc_STRVAR(doc_QsciLexer, "\1QsciLexer(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexer,
        {0}
    },
    {
        sipNameNr_QsciLexer,
        {0, 0, 1},
        31, methods_QsciLexer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexer,
    -1,
    -1,
    supers_QsciLexer,
    0,
    init_QsciLexer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexer,
    0,
    0,
    0,
    release_QsciLexer,
    cast_QsciLexer,
    0,
    0,
    0
},
    &QsciLexer::staticMetaObject,
    0,
    pyqt4_signals_QsciLexer
};
