import struct
import hashlib
import os
import zlib

"""
hackish t1 disassembler, only opcodes used in jbmev3 are defined
"""

ops = {10: ("callsubr","top -= 1"),
       11: ("op_return",""),
       14: ("op_endchar",""),
       15: ("op_unknown15", "top -= 2 (/* nothing to do except to pop the two arguments */)"),
       22: ("op_hmoveto", "top -= 1; x += top[0]")
}

ops2bytes= {0: ("op_dotsection","nop?"),
            2: ("op_hstem3","top -= 6"),
            12: ("op_div","*top = FT_DivFix( top[0], top[1] );"),
            6: ("op_seac","trigger call to decoder->parse_callback"),
            33: ("op_setcurrentpoint","top -= 2; x=top[0]; y=top[1]; decoder->flex_state=0")
}

othersubs={0: "endflex : top[0]=x; top[1]=y; top += 2",
           1: "decoder->flex_state = 1; decoder->num_flex_vectors = 0;",
           2: "decoder->num_flex_vectors++",
           12: "top = decoder->stack;",
           13: "top = decoder->stack;",
           20: "add top[0] += top[1]; top++",
           22: "top[0] = top[0] * top[1]",
           21: "substract top[0] -= top[1]; top++",
           24: "set_buildchar decoder->buildchar[top[1]] = top[0];",
           25: "get_buildchar top[0] = decoder->buildchar[idx];",
           27: "push <res1> onto T1 stack if <val1> <= <val2>, otherwise push <res2>"
}
subrs={4: "subr_put_dword",
       3: "subr_enable_endflex => decoder->flex_state=1; decoder->num_flex_vectors = 7",
       5: "subr_put_dword_adjust_lib",
       7: "subr_put_dword_adjust_local"
}

op_callsubr = 10
op_twobytes = 12
op_callothersubr = 16

def t1disas(filename):
    if not os.path.exists(filename):
        return
    data=open(filename,"rb").read()
    charstring = map(ord,data)
    
    print "-"*80
    print "File: %s\t\t\tSHA1: %s" % (os.path.basename(filename), hashlib.sha1(data).hexdigest())
    print "-"*80

    i=0
    stack = []
    
    while i < len(charstring):
        comment = ""
        b = charstring[i]
        l = 1
        
        if b >= 32 and b <= 246:
            itg = b - 139
            txt = "push 0x%x" % itg
            stack.insert(0,itg)
        elif b >= 247 and b <= 250:
            itg = ((b-247) * 256) + charstring[i+1] + 108
            txt = "push 0x%x" % itg
            l = 2
            stack.insert(0,itg)
        elif b >= 251 and b <= 254:
            itg = ((b - 251) * 256) - charstring[i+1] - 108
            #itg = struct.unpack("<L", struct.pack("<l",itg))[0]
            #itg = c_uint32(itg).value
            txt = "push 0x%x" % ((itg << 16) & 0xffffffff)
            l = 2
            stack.insert(0,itg)
        elif b == 0xFF:
            itg = struct.unpack(">L", data[i+1:i+1+4])[0]
            l = 5
            txt = "push 0x%x" % itg
            stack.insert(0,itg)
        elif b < 32:
            if b == op_twobytes:
                l = 2
                b = charstring[i+1]
                if b == op_callothersubr:
                    nargs = stack[1]
                    if nargs > 32000:
                        nargs >>= 16
                    idx = stack[0]
                    if idx > 32000:
                        idx >>= 16
                    comment = othersubs.get(idx, "")
                    txt = "callothersubr #%02d nargs=%d" % (idx, nargs)
                else:
                    txt, comment = ops2bytes.get(b, ("command 12, " + str(b), ""))
            elif b == op_callsubr:
                idx = stack[0]
                if idx > 32000:
                    idx >>= 16
                comment = subrs.get(idx, str(idx))
                txt = "callsubr #%02d" % idx
            else:
                txt, comment = ops.get(b, ("command " + str(b), ""))
        
        bin = " ".join(["%02x" % charstring[j] for j in xrange(i,i+l)])
        bin = bin.ljust(13)
        txt = txt.ljust(25)
        if comment != "":
            comment = "; " + comment
        print "0x%08x  %s\t%s\t%s" % (i, bin, txt, comment)
        i += l

def extract_subrs(filename):
    font=open(filename, "rb").read()
    j = font.find("/at ", 0) 
    k = font.find(" ", j+4)
    l = int(font[j+4:k])
    open("at.bin", "wb").write(font[k+3:k+3+l])
    
    k=0
    for i in xrange(10):
        j = font.find("dup %d " % i, k)
        if j == -1:
            continue
        j += len("dup %d " % i)
        k = font.find(" ", j)
        if k == -1:
            continue
        l = int(font[j:k])
        assert font[k:k+3] == " x " 
        data = font[k+3:k+3+l]
        k = k + 3 + l
        if i == 0:
            open("locutus","wb").write(zlib.decompress(data))
        else:
            open("subr_%d.bin" % i,"wb").write(data)


extract_subrs("jbmev3_t1font.bin")

#[t1disas("subr_%d.bin" % i) for i in xrange(1,10)]

t1disas("at.bin")
