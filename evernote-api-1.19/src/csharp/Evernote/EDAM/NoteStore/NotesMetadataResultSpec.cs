/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  [Serializable]
  public partial class NotesMetadataResultSpec : TBase
  {
    private bool includeTitle;
    private bool includeContentLength;
    private bool includeCreated;
    private bool includeUpdated;
    private bool includeUpdateSequenceNum;
    private bool includeNotebookGuid;
    private bool includeTagGuids;
    private bool includeAttributes;
    private bool includeLargestResourceMime;
    private bool includeLargestResourceSize;

    public bool IncludeTitle
    {
      get
      {
        return includeTitle;
      }
      set
      {
        __isset.includeTitle = true;
        this.includeTitle = value;
      }
    }

    public bool IncludeContentLength
    {
      get
      {
        return includeContentLength;
      }
      set
      {
        __isset.includeContentLength = true;
        this.includeContentLength = value;
      }
    }

    public bool IncludeCreated
    {
      get
      {
        return includeCreated;
      }
      set
      {
        __isset.includeCreated = true;
        this.includeCreated = value;
      }
    }

    public bool IncludeUpdated
    {
      get
      {
        return includeUpdated;
      }
      set
      {
        __isset.includeUpdated = true;
        this.includeUpdated = value;
      }
    }

    public bool IncludeUpdateSequenceNum
    {
      get
      {
        return includeUpdateSequenceNum;
      }
      set
      {
        __isset.includeUpdateSequenceNum = true;
        this.includeUpdateSequenceNum = value;
      }
    }

    public bool IncludeNotebookGuid
    {
      get
      {
        return includeNotebookGuid;
      }
      set
      {
        __isset.includeNotebookGuid = true;
        this.includeNotebookGuid = value;
      }
    }

    public bool IncludeTagGuids
    {
      get
      {
        return includeTagGuids;
      }
      set
      {
        __isset.includeTagGuids = true;
        this.includeTagGuids = value;
      }
    }

    public bool IncludeAttributes
    {
      get
      {
        return includeAttributes;
      }
      set
      {
        __isset.includeAttributes = true;
        this.includeAttributes = value;
      }
    }

    public bool IncludeLargestResourceMime
    {
      get
      {
        return includeLargestResourceMime;
      }
      set
      {
        __isset.includeLargestResourceMime = true;
        this.includeLargestResourceMime = value;
      }
    }

    public bool IncludeLargestResourceSize
    {
      get
      {
        return includeLargestResourceSize;
      }
      set
      {
        __isset.includeLargestResourceSize = true;
        this.includeLargestResourceSize = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool includeTitle;
      public bool includeContentLength;
      public bool includeCreated;
      public bool includeUpdated;
      public bool includeUpdateSequenceNum;
      public bool includeNotebookGuid;
      public bool includeTagGuids;
      public bool includeAttributes;
      public bool includeLargestResourceMime;
      public bool includeLargestResourceSize;
    }

    public NotesMetadataResultSpec() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.Bool) {
              this.includeTitle = iprot.ReadBool();
              this.__isset.includeTitle = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              this.includeContentLength = iprot.ReadBool();
              this.__isset.includeContentLength = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              this.includeCreated = iprot.ReadBool();
              this.__isset.includeCreated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              this.includeUpdated = iprot.ReadBool();
              this.__isset.includeUpdated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              this.includeUpdateSequenceNum = iprot.ReadBool();
              this.__isset.includeUpdateSequenceNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              this.includeNotebookGuid = iprot.ReadBool();
              this.__isset.includeNotebookGuid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              this.includeTagGuids = iprot.ReadBool();
              this.__isset.includeTagGuids = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              this.includeAttributes = iprot.ReadBool();
              this.__isset.includeAttributes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Bool) {
              this.includeLargestResourceMime = iprot.ReadBool();
              this.__isset.includeLargestResourceMime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Bool) {
              this.includeLargestResourceSize = iprot.ReadBool();
              this.__isset.includeLargestResourceSize = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NotesMetadataResultSpec");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.includeTitle) {
        field.Name = "includeTitle";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeTitle);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeContentLength) {
        field.Name = "includeContentLength";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeContentLength);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeCreated) {
        field.Name = "includeCreated";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeCreated);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeUpdated) {
        field.Name = "includeUpdated";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeUpdated);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeUpdateSequenceNum) {
        field.Name = "includeUpdateSequenceNum";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeUpdateSequenceNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeNotebookGuid) {
        field.Name = "includeNotebookGuid";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeNotebookGuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeTagGuids) {
        field.Name = "includeTagGuids";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeTagGuids);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeAttributes) {
        field.Name = "includeAttributes";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeAttributes);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeLargestResourceMime) {
        field.Name = "includeLargestResourceMime";
        field.Type = TType.Bool;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeLargestResourceMime);
        oprot.WriteFieldEnd();
      }
      if (__isset.includeLargestResourceSize) {
        field.Name = "includeLargestResourceSize";
        field.Type = TType.Bool;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.includeLargestResourceSize);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NotesMetadataResultSpec(");
      sb.Append("includeTitle: ");
      sb.Append(this.includeTitle);
      sb.Append(",includeContentLength: ");
      sb.Append(this.includeContentLength);
      sb.Append(",includeCreated: ");
      sb.Append(this.includeCreated);
      sb.Append(",includeUpdated: ");
      sb.Append(this.includeUpdated);
      sb.Append(",includeUpdateSequenceNum: ");
      sb.Append(this.includeUpdateSequenceNum);
      sb.Append(",includeNotebookGuid: ");
      sb.Append(this.includeNotebookGuid);
      sb.Append(",includeTagGuids: ");
      sb.Append(this.includeTagGuids);
      sb.Append(",includeAttributes: ");
      sb.Append(this.includeAttributes);
      sb.Append(",includeLargestResourceMime: ");
      sb.Append(this.includeLargestResourceMime);
      sb.Append(",includeLargestResourceSize: ");
      sb.Append(this.includeLargestResourceSize);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
