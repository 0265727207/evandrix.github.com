/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  [Serializable]
  public partial class NoteVersionId : TBase
  {
    private int updateSequenceNum;
    private long updated;
    private long saved;
    private string title;

    public int UpdateSequenceNum
    {
      get
      {
        return updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this.updateSequenceNum = value;
      }
    }

    public long Updated
    {
      get
      {
        return updated;
      }
      set
      {
        __isset.updated = true;
        this.updated = value;
      }
    }

    public long Saved
    {
      get
      {
        return saved;
      }
      set
      {
        __isset.saved = true;
        this.saved = value;
      }
    }

    public string Title
    {
      get
      {
        return title;
      }
      set
      {
        __isset.title = true;
        this.title = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool updateSequenceNum;
      public bool updated;
      public bool saved;
      public bool title;
    }

    public NoteVersionId() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.updateSequenceNum = iprot.ReadI32();
              this.__isset.updateSequenceNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              this.updated = iprot.ReadI64();
              this.__isset.updated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.saved = iprot.ReadI64();
              this.__isset.saved = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.title = iprot.ReadString();
              this.__isset.title = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NoteVersionId");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.updateSequenceNum) {
        field.Name = "updateSequenceNum";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.updateSequenceNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.updated) {
        field.Name = "updated";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.updated);
        oprot.WriteFieldEnd();
      }
      if (__isset.saved) {
        field.Name = "saved";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.saved);
        oprot.WriteFieldEnd();
      }
      if (this.title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.title);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NoteVersionId(");
      sb.Append("updateSequenceNum: ");
      sb.Append(this.updateSequenceNum);
      sb.Append(",updated: ");
      sb.Append(this.updated);
      sb.Append(",saved: ");
      sb.Append(this.saved);
      sb.Append(",title: ");
      sb.Append(this.title);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
