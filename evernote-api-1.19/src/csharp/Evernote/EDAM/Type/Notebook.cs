/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.Type
{

  [Serializable]
  public partial class Notebook : TBase
  {
    private string guid;
    private string name;
    private int updateSequenceNum;
    private bool defaultNotebook;
    private long serviceCreated;
    private long serviceUpdated;
    private Publishing publishing;
    private bool published;
    private string stack;
    private List<long> sharedNotebookIds;

    public string Guid
    {
      get
      {
        return guid;
      }
      set
      {
        __isset.guid = true;
        this.guid = value;
      }
    }

    public string Name
    {
      get
      {
        return name;
      }
      set
      {
        __isset.name = true;
        this.name = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this.updateSequenceNum = value;
      }
    }

    public bool DefaultNotebook
    {
      get
      {
        return defaultNotebook;
      }
      set
      {
        __isset.defaultNotebook = true;
        this.defaultNotebook = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this.serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this.serviceUpdated = value;
      }
    }

    public Publishing Publishing
    {
      get
      {
        return publishing;
      }
      set
      {
        __isset.publishing = true;
        this.publishing = value;
      }
    }

    public bool Published
    {
      get
      {
        return published;
      }
      set
      {
        __isset.published = true;
        this.published = value;
      }
    }

    public string Stack
    {
      get
      {
        return stack;
      }
      set
      {
        __isset.stack = true;
        this.stack = value;
      }
    }

    public List<long> SharedNotebookIds
    {
      get
      {
        return sharedNotebookIds;
      }
      set
      {
        __isset.sharedNotebookIds = true;
        this.sharedNotebookIds = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool guid;
      public bool name;
      public bool updateSequenceNum;
      public bool defaultNotebook;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool publishing;
      public bool published;
      public bool stack;
      public bool sharedNotebookIds;
    }

    public Notebook() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.guid = iprot.ReadString();
              this.__isset.guid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.name = iprot.ReadString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              this.updateSequenceNum = iprot.ReadI32();
              this.__isset.updateSequenceNum = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              this.defaultNotebook = iprot.ReadBool();
              this.__isset.defaultNotebook = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              this.serviceCreated = iprot.ReadI64();
              this.__isset.serviceCreated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              this.serviceUpdated = iprot.ReadI64();
              this.__isset.serviceUpdated = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              this.publishing = new Publishing();
              this.publishing.Read(iprot);
              this.__isset.publishing = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              this.published = iprot.ReadBool();
              this.__isset.published = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              this.stack = iprot.ReadString();
              this.__isset.stack = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                this.sharedNotebookIds = new List<long>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  long _elem22 = 0;
                  _elem22 = iprot.ReadI64();
                  this.sharedNotebookIds.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
              this.__isset.sharedNotebookIds = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Notebook");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.guid != null && __isset.guid) {
        field.Name = "guid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.guid);
        oprot.WriteFieldEnd();
      }
      if (this.name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.name);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateSequenceNum) {
        field.Name = "updateSequenceNum";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.updateSequenceNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultNotebook) {
        field.Name = "defaultNotebook";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.defaultNotebook);
        oprot.WriteFieldEnd();
      }
      if (__isset.serviceCreated) {
        field.Name = "serviceCreated";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.serviceCreated);
        oprot.WriteFieldEnd();
      }
      if (__isset.serviceUpdated) {
        field.Name = "serviceUpdated";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.serviceUpdated);
        oprot.WriteFieldEnd();
      }
      if (this.publishing != null && __isset.publishing) {
        field.Name = "publishing";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        this.publishing.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.published) {
        field.Name = "published";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.published);
        oprot.WriteFieldEnd();
      }
      if (this.stack != null && __isset.stack) {
        field.Name = "stack";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.stack);
        oprot.WriteFieldEnd();
      }
      if (this.sharedNotebookIds != null && __isset.sharedNotebookIds) {
        field.Name = "sharedNotebookIds";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, this.sharedNotebookIds.Count));
          foreach (long _iter23 in this.sharedNotebookIds)
          {
            oprot.WriteI64(_iter23);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Notebook(");
      sb.Append("guid: ");
      sb.Append(this.guid);
      sb.Append(",name: ");
      sb.Append(this.name);
      sb.Append(",updateSequenceNum: ");
      sb.Append(this.updateSequenceNum);
      sb.Append(",defaultNotebook: ");
      sb.Append(this.defaultNotebook);
      sb.Append(",serviceCreated: ");
      sb.Append(this.serviceCreated);
      sb.Append(",serviceUpdated: ");
      sb.Append(this.serviceUpdated);
      sb.Append(",publishing: ");
      sb.Append(this.publishing== null ? "<null>" : this.publishing.ToString());
      sb.Append(",published: ");
      sb.Append(this.published);
      sb.Append(",stack: ");
      sb.Append(this.stack);
      sb.Append(",sharedNotebookIds: ");
      sb.Append(this.sharedNotebookIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
