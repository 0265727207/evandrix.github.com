ID,title,regexp,description
1,One Numeric Digit,^\d$,Matches exactly 1 numeric digit (0-9).
2,Five Integer US ZIP Code,^\d{5}$,"Matches 5 numeric digits, such as a zip code."
3,ZIP+4 - XXXXX-XXXX,^\d{5}-\d{4}$,Numeric and hyphen 5+4 ZIP code match for ZIP+4.
4,US ZIP (5 or 5+4),^\d{5}$|^\d{5}-\d{4}$,"This regular expression will match either a 5 digit ZIP code or a ZIP+4 code formatted as 5 digits, a hyphen, and another 4 digits.  Other than that, this is just a really really long description of a regular expression that I'm using to test how my front page will look in the case where very long expression descriptions are used."
9,,^\d{3}-\d{2}-\d{4}$,This regular expression will match a hyphen-separated Social Security Number (SSN) in the format NNN-NN-NNNN.
10,Any One US ASCII Letter,^[a-zA-Z]$,Matches any single upper- or lower-case letter.
11,A string of any US ASCII letters,^[a-zA-Z]+$,Matches any string of only upper- and lower- case letters (no spaces).
12,Alphanumeric,^[a-zA-Z0-9]+$,Matches any alphanumeric string (no spaces).
13,Positive Integer,^\d+$,Positive integer value.
14,Signed Integer,^(\+|-)?\d+$,Matches any signed integer.
15,Strongish Password,"^[a-zA-Z]\w{3,14}$","The password's first character must be a letter, it must contain at least 4 characters and no more than 15 characters and no characters other than letters, numbers and the underscore may be used"
16,Email - Overly Simple,"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$",Simple email expression.  Doesn't allow numbers in the domain name and doesn't allow for top level domains that are less than 2 or more than 3 letters (which is fine until they allow more).  Doesn't handle multiple &quot;.&quot; in the domain (joe@abc.co.uk).
17,Date With Slashes,"^\d{1,2}\/\d{1,2}\/\d{4}$",This regular expressions matches dates of the form XX/XX/YYYY where XX can be 1 or 2 digits long and YYYY is always 4 digits long.
18,,foo,"The &quot;hello world&quot; of regular expressions, this will match any string with an instance of 'foo' in it."
19,,^[1-5]$,"This matches a single numeric digit between 1 and 5, and is the same as saying ^[12345]$."
20,,^[12345]$,"This matches a single numeric digit between 1 and 5, and is the same as saying ^[1-5]$. "
22,,^[2-9]\d{2}-\d{3}-\d{4}$,"This expression matches a hyphen separated US phone number, of the form ANN-NNN-NNNN, where A is between 2 and 9 and N is between 0 and 9."
23,,^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$,"This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code.  The first one must be 5 numeric digits.  The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits.  The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9."
24,,^a$,"IP Address:
This regular expression, when used as the ValidationExpression attribute of a RegularExpresionValidator ASP.NET Server Control, will validate that the user has entered a valid IP Address. Note that some valid addresses (such as the 127.0.0.1 localhost address) do show up as not valid, but this expression works for better than 90% of cases."
25,,^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$,"Domain names:
This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in .com, .org, .net, .mil, or .edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens."
26,,"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$","Email validator that adheres directly to the specification for email address naming. It allows for everything from ipaddress and country-code domains, to very rare characters in the username."
27,,((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4},US Phone Number -- doesn't check to see if first digit is legal (not a 0 or 1).
28,,[\w-]+@([\w-]+\.)+[\w-]+,Yet another simple email validator expression.
29,,\d{4}-?\d{4}-?\d{4}-?\d{4},"Major credit card validator.  Only checks that the format is 16 digits (optionally separated by hyphens), not the value of any of the digits."
30,,"^(?=.*\d).{4,8}$",Password expression.  Password must be between 4 and 8 digits long and include at least one numeric digit.
31,,"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$","Password matching expression.  Password must be at least 4 characters, no more than 8 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit."
32,,^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$,RegExp for validating the format of IP Addresses. This works great with the ASP.NET RegularExpressionValidator server control.
33,,(\w+)\s+\1,"This expression uses a BackReference to find occurrences of the same word twice in a row (separated by a space).

Matches things like 'mandate dated', which may not be desirable.  See Sean Carley's update for a better expression for true repeated word matching."
34,,"\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4}","Match diferent styles for brazilian Phone number code.
Only DDD (12), complete DDD (012), complete DDD + Telephony Company (0xx12) plus 3 or 4 digits (city code) plus 4 digits (phone number)."
36,,^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$,"Tests for valid HTML hexadecimal color codes. The # symbol is optional. And it will except either the 3 digit form for the 216 Web safe colors, or the full 6 digit form. I am use it on my site to allow users to customize the site's colors."
37,,((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+),Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
38,,"^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$","Matches UK postcodes according to the following rules

1. LN NLL     eg N1 1AA 
2. LLN NLL    eg SW4 0QL 
3. LNN NLL    eg M23 4PJ 
4. LLNN NLL  eg WS14 0JT 
5. LLNL NLL   eg SW1N 4TB 
6. LNL NLL     eg W1C 8LQ

Thanks to Simon Bell for informing me of LNL NLL rule for postcodes which I had omitted in an earlier version.

"
39,,"^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$","Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the .COM section."
40,,/\*[\d\D]*?\*/,"If you need to extract or remove any /* */ sytle comments from any Java, JavaScript, C, C++, CSS, etc code you have this regular expression can help."
41,,^\$[0-9]+(\.[0-9][0-9])?$,Validates a dollar amount including a dollar sign and 2 decmals. The decimal and cents are optional.
42,,\b(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}([01]?\d?\d|2[0-4]\d|25[0-5])\b,"Most Concise RegExp for matching Decimal IPs.  If nothing else, it'll make your code easier to read.  (And I know that \d?\d is \d{1,2} but that's 2 extra characters.)
--Update: darkone noticed 8 characters could be shaved down. I've edited it to reflect this. Thanks, darkone!"
43,,(AUX|PRN|NUL|COM\d|LPT\d)+\s*$,"&quot;Be careful when opening or creating files by using Scripting File System Object. If the filename is based on the user's input, the user might attempt to open a serial port or printer.&quot;"
44,,"^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$","This re was used for a security routine. The format is:
[user=name1,name2,...,nameN;][group=group1,group2,...,groupN;][level=number;]
Each component is optional, but they must appear the in order listed if applicable."
45,,^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$,"This RegEx requires a US phone number WITH area code. It is written to all users to enter whatever delimiters they want or no delimiters at all (i.e. 111-222-3333, or 111.222.3333, or (111) 222-3333, or 1112223333, etc...)."
46,,"^([\w\d\-\.]+)@{1}(([\w\d\-]{1,67})|([\w\d\-]+\.[\w\d\-]{1,67}))\.(([a-zA-Z\d]{2,4})(\.[a-zA-Z\d]{2})?)$","This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix (e.g. user@domain.123), simply delete the last two occurrences of &quot;\d&quot;."
47,,^[0-9]+$,Validate a string to see if it contains a number / integer
48,,^(\d{4}[- ]){3}\d{4}|\d{16}$,Credit card validator.  Just checks that the format is either 16 numbers in groups of four separated by a &quot;-&quot; or a &quot; &quot; or nothing at all.
49,,"^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$","Matches major credit cards including:
Visa (length 16, prefix 4), Mastercard (length 16, prefix 51-55), Discover (length 16, prefix 6011), American Express (length 15, prefix 34 or 37).  All 16 digit formats accept optional hyphens (-) between each group of four digits. "
50,,"^.{4,8}$",Matches any string between 4 and 8 characters in length.  Limits the length of a string.  Useful to add to password regular expressions.
51,,^\d*$,Accepts an unsigned integer number.  Also matches empty strings.
52,,^[-+]?\d*$,"Matches any integer number or numeric string, including positive and negative value characters (+ or -).  Also matches empty strings."
53,,^\d*\.?\d*$,Matches any unsigned floating point number/numeric string.  Also matches empty strings.
54,,^[-+]?\d*\.?\d*$,"Matches any floating point numer/numeric string, including optional sign character (+ or -).  Also matches empty strings."
55,,^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$,"GUID Tester. It tests SQL Server GUIDs, which are alphanumeric characters grouped 8-4-4-4-12 (with the dashes). Make sure they don't have the brackets around them before you check them and have fun!"
56,,(\w+?@\w+?\x2E.+),Validates an email address
57,,Last.*?(\d+.?\d*),"Plucks the last quote of a Stock from the MSN MoneyCentral WebQuote page for any given stock symbol. The URL of the web page where this RegEx should be applied is:
http://localhost/asp/webquote.htm?ipage=qd&amp;Symbol=,give the stock symbol here&gt; You must also use the singleline option."
58,,^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$,"Matches US phone number format. 1 in the beginning is optional, area code is required, spaces or dashes can be used as optional divider between number groups. Also alphanumeric format is allowed after area code."
59,,^([0-1][0-9]|[2][0-3]):([0-5][0-9])$,Matches a string if it is a valid time in the format of HH:MM
60,,"^[0,1]?\d{1}\/(([0-2]?\d{1})|([3][0,1]{1}))\/(([1]{1}[9]{1}[9]{1}\d{1})|([2-9]{1}\d{3}))$","This expression checks the validity of a date (US, but it is easily editable for other format's). Year's 1990-9999, Month's 1 or 01 to 12, Day's 1 or 01 to 31. Still needs to have individual months added (i.e., Feb's 28 days), and some how to check for leap year...the months issue should not be to hard, but the leap year seems like a real chore. Please let me know if you have any suggestions for leap year.

"
62,,"^\s*[a-zA-Z,\s]+\s*$","Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after"
63,,^[a-zA-Z0-9\s.\-]+$,"ANY alphanumeric string with spaces, commas, dashes."
65,,[0-9]{4}\s*[a-zA-Z]{2},"Dutch zip code expression
4 numbers - space yes/no - 2 letters
"
66,,"(^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$)","Australian phone numbers: Matches all known formats incl normal 10-digit landline numbers (valid area code mandatory) 13, 1300, 1800, 1900, 1902 plus mobile 10 and 11-digit formats. Use a Replace function first to remove non-numerics which are probably separators (E.g. newNum = number.replace(/[\D]/g, &amp;quot;&amp;quot;).  Please contact me if you find any valid Aussie numbers being rejected."
67,,(^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14}))),"This provides an expression to calidate the four major credit cards.  It can be easily broken up to use for a specific type of card.  It does not validate the number being a potential real number, only in the correct format."
68,,^([0-9]{6}[\s\-]{1}[0-9]{12}|[0-9]{18})$,This regular expression matches 'Switch' card numbers - a payment method used extensively in the UK.
69,,^(([1-9])|(0[1-9])|(1[0-2]))\/((0[1-9])|([1-31]))\/((\d{2})|(\d{4}))$,Matches U.S. dates with leading zeros and without and with 2 or four digit years
70,,"^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$",Matches currency input with or without commas.
71,,((\d{2})|(\d))\/((\d{2})|(\d))\/((\d{4})|(\d{2})),"This matches simple dates against 1 or 2 digits for the month, 1 or 2 digit for the day, and either 2 or 4 digits for the year "
72,,x,This regular expression matches email addresses that match the format specified by RFC 821 (see the BNF notation at http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc0821.html#page-30)
73,,^(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$,"A regular expression to match phone numbers, allowing for an international dialing code at the start and hyphenation and spaces that are sometimes entered."
74,,^\d{5}(-\d{4})?$,"Matches standard 5 digit US Zip Codes, or the US ZIP + 4 Standard."
75,,(^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$),"Regular expression to evaluate dutch-style phone numbers. Possible example prefixes: +31, +31(0), (+31)(0), 0, 0031
followed by 9 numbers (which can contain a space or -)."
76,,"^[0-9]{4}\s{0,1}[a-zA-Z]{2}$",Regular expression to evaluate dutch zipcodes. This is an updated version of Roland Mensenkamp.
77,,(^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\&gt;])){1}){1}){1}){1},"Will match the following date formats: Preceded by a Space, Left-parentheses, or at the beginning of a line.  Followed by a Space, Right-parentheses, or Colon(:), word boundary or End of line.  Can have / or - as separator.  Accepts 2 digit year 00-99 or 4 digit years 1900-2099 (can modify to accept any range)"
78,,\b(\w+)\s+\1\b,"Uses backreferences and word boundaries to match repeated words seperated by whitespace without matching a word with the same ending as the next words beginning.
"
79,,^\d{9}[\d|X]$,"A very simple ISBN validation expression - it just checks for a 10 digit number where the last digit could also be a capital 'X'.  Complete specs for ISBN available here:
http://www.isbn.org/standards/home/isbn/international/html/usm4.htm.  An enhancement would be to allow exactly 3 or 0 hyphens or 3 or 0 spaces, since these are also valid formats."
80,,"^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$","Dates 
day: d or dd, &lt;= 31, 
month: m or mm, &lt;= 12, 
year: yy or yyyy &gt;= 1900, &lt;= 2099
"
81,,^((0?[1-9])|(1[0-2]))\/(([0-9][0-9]))$,To check for a month / year (mm/yy) combination similar to that used for credit card transactions. Optional leading zero. Since only 2 digit year (as on credit cards) limited to 2099 - but will we have credit cards after that?
82,,^\d*\.?((25)|(50)|(5)|(75)|(0)|(00))?$,"This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok !!"
83,,"^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$","Validates swedish zipcodes (postnr) with or without space between groups. With leading s- or not. Can be disconnected by removing ''(s-|S-){0,1}''."
84,,((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((\d{4}|\d{2}))),"Regex used in .NET to validate a date.  Matches the following formats mm/dd/yy, mm/dd/yyyy, mm-dd-yy, mm-dd-yyyy
This covers days with 30 or 31 days but does not handle February, it is allowed 30 days."
85,,"^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\"";|/]+$","Checks for a valid windows file name (Must be used with the case-insensitive option 

Checks that the file has at lease one char, does not contain any invalid characters and does not have a reserved word as a file name.

&quot;If you see a &amp;quot; in the regex replace it with a &quot; character&quot;"
86,,&lt;[^&gt;]*\n?.*=(&quot;|')?(.*\.jpg)(&quot;|')?.*\n?[^&lt;]*&gt;,"Match any image insert in a tag .
simply replace the .jpg in the pattern whit a variable of content type ex:.swf,.js,.gif and loop the pattern to retrieve all tag whit the contenttype pass trought....

Very useful when you have people uploading html document in your site and you want to retrieve all dependecy."
87,,^(\d{5}-\d{4}|\d{5})$|^([a-zA-Z]\d[a-zA-Z] \d[a-zA-Z]\d)$,"This is a modification of the zip code regular expression submitted by Steven Smith (ssmith@aspalliance.com) 

It no longer matches 78754-12aA"
88,,"^([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))$",Expression 1 of 2 used to check email address syntax.
89,,"^(([-\w \.]+)|(&quot;&quot;[-\w \.]+&quot;&quot;) )?&lt;([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))&gt;$",Expression 2 or 2 for matching email address syntax. This one matches the &lt;angle bracket syntax&gt;.
90,,"^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$","Verifies URLs.  Checks for the leading protocol, a good looking domain (two or three letter TLD; no invalid characters in domain) and a somwhat reasonable file path."
91,,"^[A-Za-z]{1,2}[0-9A-Za-z]{1,2}[ ]?[0-9]{0,1}[A-Za-z]{2}$",This regular expression can be used to validate UK postcodes. Especially useful if want to provide a client side validation on a web site.
92,,^[A-Za-z]{2}[0-9]{6}[A-Za-z]{1}$,UK National Insurance Number validation. Especially useful to validate through clientside/server side script on a website.
93,,20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9]),Sql date format tester. 
94,,^[a-zA-Z ]+$ | [^0-9],
95,,^\d{4}[\-\/\s]?((((0[13578])|(1[02]))[\-\/\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\s]?(([0-2][0-9])|(30)))|(02[\-\/\s]?[0-2][0-9]))$,"- validates a yyyy-mm-dd, yyyy mm dd, or yyyy/mm/dd date
- makes sure day is within valid range for the month
- does NOT validate Feb. 29 on a leap year, only that Feb. CAN have 29 days"
96,,"(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?","*CORRECTED: Again thanks for all the comments below. If you want to include internal domain as well change the partial code (\.[\w-_]+)+ to (\.[\w-_]+)?  
See the comments below*

This is the regular expression I use to add links in my email program. It also ignores those suppose-to-be commas/periods/colons at the end of the URL, like this sentence &quot;check out http://www.yahoo.com/.&quot; (the period will be ignored) Note that it requires some modification to match ones that dont start with http."
97,,^(1?(-?\d{3})-?)?(\d{3})(-?\d{4})$,"US Telephone Reg expression that allows 7, 10 or 11 digits with or without hyphens."
98,,&lt;[^&gt;]*name[\s]*=[\s]*&quot;?[^\w_]*&quot;?[^&gt;]*&gt;,"This RX is used to find get all named tags in an html string. If you find a problem with it, please email drew@lordstrange.com"
99,,"^(1|01|2|02|3|03|4|04|5|05|6|06|7|07|8|08|9|09|10|11|12{1,2}):(([0-5]{1}[0-9]{1}\s{0,1})([AM|PM|am|pm]{2,2}))\W{0}$",Validate time as h:mm AM/PM
100,,"^((?:4\d{3})|(?:5[1-5]\d{2})|(?:6011)|(?:3[68]\d{2})|(?:30[012345]\d))[ -]?(\d{4})[ -]?(\d{4})[ -]?(\d{4}|3[4,7]\d{13})$","This just a minor mod to Steven Smith's credit card re to accept spaces as separators, as well as return the four parts of the card.  [Updated Oct-18-2002 to work with Diners Club/Carte Blanche (prefix must be 36, 38, or 300-305)]"
101,,([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.xls,This RegEx will help to validate a physical file path with a specific file extension (here xls)
102,,^(20|21|22|23|[0-1]\d)[0-5]\d$,This regular expression will match a 24 hour time with no separators.
103,,^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\d$,"Matches a 12-hour time value expressed as either 4 numeric digits, 3 numeric digits, or a space and 3 numeric digits.  3 digit times (930) can be expressed with leading 0's (0930) or not.  AM/PM designation is not included in this expression."
104,,"^\d{1,2}\/\d{2,4}$",Accepts 1-2 digits followed by a slash followed by 2-4 digits.  Useful for numeric month/year entry.
105,,^(|(0[1-9])|(1[0-2]))\/((0[1-9])|(1\d)|(2\d)|(3[0-1]))\/((\d{4}))$,"This expression matches dates formatted as MM/DD/YYYY where months and days must be 2 digits each, zero padded.  It is not perfect - it allows DD to be from 01 to 31 regardless of the month."
106,,^((((0[13578])|(1[02]))[\/]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\/]?(([0-2][0-9])|(30)))|(02[\/]?[0-2][0-9]))[\/]?\d{4}$,"Date expressions that matches MM/DD/YYYY where MM and DD must be two digits and zero padded.  Validates correctly for all months except February, which it assumes to always have 29 days.  The &quot;/&quot; separator is optional."
107,,"^(\d{1,3}'(\d{3}')*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$","This regex match numeric data in the following format: thousands are separated by (') apostrophe, decimal places are separated by dot (.) Maximum three decimal places are not required. It's easy to change to other separators as well."
108,,^((0?[1-9]|[12][1-9]|3[01])\.(0?[13578]|1[02])\.20[0-9]{2}|(0?[1-9]|[12][1-9]|30)\.(0?[13456789]|1[012])\.20[0-9]{2}|(0?[1-9]|1[1-9]|2[0-8])\.(0?[123456789]|1[012])\.20[0-9]{2}|(0?[1-9]|[12][1-9])\.(0?[123456789]|1[012])\.20(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))$,"Fully functional date validator in format dd.MM.yyyy
Works only within range of years 2000-2099 !
It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed."
109,,^(0[1-9]|1[0-2])\/((0[1-9]|2\d)|3[0-1])\/(19\d\d|200[0-3])$,"This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003.  It can easily be adapted for different date ranges.  It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003.  The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month.  An example of an invalid date that it would allow to pass through would be 11/31/2002.  This date is invalid because 11/31 of any year does not exist, but this expression would allow it pass through since the day part is in the range 01-31.

This regular expression has been used successfully in ASP with VBScript using the windows scripting library RegExp object."
110,,"^((((([13578])|(1[0-2]))[\-\/\s]?(([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?(([1-9])|([1-2][0-9])|(30)))|(2[\-\/\s]?(([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s((([1-9])|(1[02]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$",This expression can be used validate a datetime column from SQL Server. Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
111,,^\d{3}\s?\d{3}$,This can be used to match indian style pincodes / postal codes used by the indian postal departments which are 6 digits long and may have space after the 3rd digit
112,,^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$,The following validates dates with and without leading zeros in the following formats: MM/DD/YYYY and it also takes YYYY (this can easily be removed).  All months are validated for the correct number of days for that particular month except for February which can be set to 29 days. date day month year
113,M/d/y Date,^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$,This expression validates dates in the US m/d/y format from 1/1/1600 - 12/31/9999.
114,,(((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9][13579][26]))),My meager attempt at a date validator with leap years using a strict mm/dd/yyyy format.
116,,"^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$","US Telephone Number where this is regular expression excludes the first number, after the area code,from being 0 or 1; it also allows an extension
to be added where it does not have to be prefixed by 'x'."
117,,^[-+]?\d+(\.\d+)?$,"This matches any real number, with optional decimal point and numbers after the decimal, and optional positive (+) or negative (-) designation."
118,,^[a-zA-Z][0-9][a-zA-Z]\s?[0-9][a-zA-Z][0-9]$,"Match Canadia Zip Code. You can have a space in the middle Like T2P 3C7, or no space like T2P3C7"
122,,^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$," This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits. The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.  "
123,,(a|b|c).(a.b)*.b+.c,
124,,"""((\\"")|[^""(\\"")])+""","Matches quoted string, using \&quot; as an escape to place quotes in the string"
125,,^\d{5}(-\d{3})?$,"Matches standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix). 
For more info refer to: http://www.correios.com.br/servicos/cep/Estrutura_CEP.cfm (in portuguese)."
126,US currency,"^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$",This re matches US currency format with lead dollar sign. Dollar value must have at least one digit and may or may not be comma separated. Cents value is optional.
127,,"([A-Z]:\\[^/:\*\?<>\|]+\.\w{2,6})|(\\{2}[^/:\*\?<>\|]+\.\w{2,6})","This regular expression pattern can be used to check the validity of paths for file upload controls. The uploaded file can be either stored locally or accessible through UNC. It cannot contain illegal characters for the windows OS - that may be supported e.g. on Mac OS – and cannot be a URL (Yes, as weird as it may seem, some users enter URLs in the file upload box, even though there is a browse button...)"
129,,(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$),Matches a string if it is a valid time in the format of HH:MM / H:MM / HH / H
130,,"^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$",Matches US currency input with or without commas.  This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the . (period) to ensure that no other characters may be used in it's place.
131,,^\$?\d+(\.(\d{2}))?$,"To evaluate an amount with or without a dollar sign where the cents are optional.
"
132,,((0[1-9])|(1[02]))/\d{2},"Fromat check for MM/YY, checks month is 1-12 and any 2 digit year."
133,,"(""[^""]*"")|('[^\r]*)(\r\n)?","Will match a VBScript string and/or comment

Ex:

' userinfo
strUsername = &quot;tomsve&quot; 
iAge = 20
' temp
strPassword = &quot;halloj&quot;


...Would result in the following matches:
' userinfo
&quot;tomsve&quot;
' temp
&quot;halloj&quot;


Good luck!
Tom S. info@tomsvensson.com"
134,,^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$,"GUID Tester.

This is a modification from the regular expression submitted by James Bray (james@jamesbray.com). It allows the use of mixed upper and lowercase letters in the GUID string."
135,,^([0-9]{2})?(\([0-9]{2})\)([0-9]{3}|[0-9]{4})-[0-9]{4}$,"A simple expression to brazilian phone number code, with international code. 
Simple DDI without &quot;+&quot; 99 plus simple DDD (99) plus simple local phone number 3 or 4 digits plus &quot;-&quot; plus 4 digits."
136,,^\d{2}(\x2e)(\d{3})(-\d{3})?$,"Other expression to standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
The diference of the original one, is that the &quot;.&quot; is mandatory."
137,Text Extension,^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*))+\.(txt|TXT)$,"This RE validates a path/file of type txt (text file)
This RE can be used as a filter on certain file types, while insuring the entire string is a fully qualified path and file. The filter value can be changed or added to as you need"
138,,^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$,Checks domain names.  This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).
139,,^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$,This matches floating point expression in a more rigorous way - accepts both exponent as well as non exponent notations.
140,,"^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$","Matches e-mail addresses, including some of the newer top-level-domain extensions, such as info, museum, name, etc.  Also allows for emails tied directly to IP addresses."
141,,(^0[78][2347][0-9]{7}),checks for valid South African cellular numbers
142,,"(^\(\)$|^\(((\([0-9]+,(\((\([0-9]+,[0-9]+,[0-9]+\),)*(\([0-9]+,[0-9]+,[0-9]+\)){1}\))+\),)*(\([0-9]+,(\((\([0-9]+,[0-9]+,[0-9]+\),)*(\([0-9]+,[0-9]+,[0-9]+\)){1}\))+\)){1}\)))$","This checks for the specific syntax ((A,((b,c,d),(e,f,g))), ..).  No limit on number of occurances."
143,,"^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*$","Person's name (first, last, or both) in any letter case.  Although not perfect, this expression will filter out many incorrect name formats (especially numerics and invalid special characters)."
144,,^((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$,"Matches times seperated by either : or . will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required."
145,,^[a-zA-Z0-9\s.\-_']+$,"Alphanumeric, hyphen apostrophe, comma dash spaces"
146,,"^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*$","Modified URL RegExp that requires (http, https, ftp)://, A nice domain, and a decent file/folder string. Allows : after domain name, and these characters in the file/folder sring (letter, numbers, - . _ ? , ' / \ + &amp; % $ # = ~). Blocks all other special characters-good for protecting against user input!"
147,,^([A-HJ-TP-Z]{1}\d{4}[A-Z]{3}|[a-z]{1}\d{4}[a-hj-tp-z]{3})$,"Codigos Postales Argentinos (CPA)
This expression defines the new zip code format for Argentina."
148,,^(((25[0-5]|2[0-4][0-9]|19[0-1]|19[3-9]|18[0-9]|17[0-1]|17[3-9]|1[3-6][0-9]|12[8-9]|12[0-6]|1[0-1][0-9]|1[1-9]|[2-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(192\.(25[0-5]|2[0-4][0-9]|16[0-7]|169|1[0-5][0-9]|1[7-9][0-9]|[1-9][0-9]|[0-9]))|(172\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|1[0-5]|3[2-9]|[4-9][0-9]|[0-9])))\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$,Updated to exclude 127/8
149,,"[^A-Za-z0-9_@\.]|@{2,}|\.{5,}","Used as a username validation script requires:
1. Allows All Alphanumeric characters &amp; underscore
2. Allows One &quot;@&quot; character
3. Allows Five &quot;.&quot; periods
4. Rejects spaces

"
150,,&amp;lt;!--[ ]*[ \w\S\s]*--&amp;gt;,This regular expressions matches any HTML remark.
151,,"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$","This expression validates dates in the ITALIAN d/m/y format from 1/1/1600 - 31/12/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00 since it could be any century (1900, 2000, 2100). Days and months must be 1 or 2 digits and may have leading zeros. Years must be 2 or 4 digit years. 4 digit years must be between 1600 and 9999. Date separator may be a slash (/), dash (-), or period (.) 

Thanks to Michael Ash for US Version"
152,,"^\d{0,2}(\.\d{1,2})?$",This regular expression validates that the data entered is a number with a maximum of two integers and two decimals and a minimum of one integer or one decimal.
153,,"^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*[^\.\,\)\(\s]$","This Regex (can be used e.g. in PHP with eregi) will match any valid URL. Unlike the other exapmles here, it will NOT match a valid URL ending with a dot or bracket. This is important if you use this regex to find and &quot;activate&quot; Links in an Text"
154,,^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$,"This will grep for a valid MAC address , with colons seperating octets. It will ignore strings too short or long, or with invalid characters.  It will accept mixed case hexadecimal. Use extended grep."
155,,"^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$",Percentage with 3 number after comma.
156,,^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$,Correct French DateTime(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
157,,"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$","Password expresion that requires one lower case letter, one upper case letter, one digit, 6-13 length, and no spaces. This is merely an extension of a previously posted expression by Steven Smith (ssmith@aspalliance.com) . The no spaces is new."
158,,"^([a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9]\.)+([a-zA-Z0-9]{3,5})$","Host/Domain name validation for perl.
Should be combined with a check for
length &lt;= 63 characters and that $2
is in a list of top-level domains."
159,,^[^']*$,This one matches all strings that do not contain the single quotation mark (').
160,,^([1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$,"This validates a number between 1 and 255. Could be modified to IP, or just to verify a number in a range."
161,,"^((https?|ftp)\://((\[?(\d{1,3}\.){3}\d{1,3}\]?)|(([-a-zA-Z0-9]+\.)+[a-zA-Z]{2,4}))(\:\d+)?(/[-a-zA-Z0-9._?,'+&amp;%$#=~\\]+)*/?)$","Using other regular experssions from this page, combining others for email addresses, and mixing in my own ideas - I came up with this regular expression.  Can be used to validate input into a database."
162,,^[0-9](\.[0-9]+)?$,matches non-negative decimal floating points numbers less than 10
163,,"(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$",Dollar Amount
164,,"\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9]?)?$",
165,,"\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$",
166,,"^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$","this expression validates a date-time field in European d/m/y h:m:s format. It is a european variation of Michael Ash's date-validation expression in this library.
The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00"
167,,"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$",Easy expression that checks for valid email addresses.
172,,"(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)","Validate “Time” Data to Work with SQL Server
This is a fix (I hope) for a problem with the original expression.  It originally allowed any combination of am or pm. For example: ma, aa, mm, mp, etc."
173,,"(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$","This regular expression validates a number NOT 0, with no more than 5 places ahead and 3 places behind the decimal point."
174,,"^.+@[^\.].*\.[a-z]{2,}$","Most email validation regexps are outdated and ignore the fact that domain names can contain any foreign character these days, as well as the fact that anything before @ is acceptable. The only roman alphabet restriction is in the TLD, which for a long time has been more than 2 or 3 chars (.museum, .aero, .info). The only dot restriction is that . cannot be placed directly after @.

This pattern captures any valid, reallife email adress."
175,,@{2}((\S)+)@{2},"This will match results in a template situation. For example:
template reads
Dear @@Name@@,
....
would become
Dear John,
If you dont want to use the @@ change the @ to what ever characters you want.
"
176,,([0-1][0-9]|2[0-3]):[0-5][0-9],Validate an hour entry to be between 00:00 and 23:59
177,,&lt;[^\s&gt;]*\bauthor\b[^&gt;]*&gt;,This expression is disabled
182,,&lt;[^&gt;\s]*\bauthor\b[^&gt;]*&gt;,"This expression will match the corresponding XML/HTML elements opening and closing tags. Useful to handle documents fragments, without loading an XML DOM.
"
184,,[A-Z][a-z]+,This expression was developed to match the Title cased words within a Camel cased variable name.  So it will match 'First' and 'Name' within 'strFirstName'.
185,,^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?[0-9]+)?$,A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.
186,,"^([1-zA-Z0-1@.\s]{1,255})$","A general string validation to insure no malicious code is being passed through user input.  General enough too allow email address, names, address, passwords, so on.  Disallows ‘,\*&amp;$&lt;&gt; or other characters that could cause issues.   "
187,,^(\d{5}-\d{4}|\d{5})$,"this works with ASP.net regular expression valiadtors, ecma script compliant"
188,,(^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8}),"Validar o do CEP Brasileiro com 8 posicoes podendo usar
mascara . e - ou somente numeros"
189,,([0-9]{4}),"Basic validation for Australian postcodes. All postcodes are exactly four digits long.

More information about Australian postcodes (including a downloadable list) is available at http://www.auspost.com.au/postcodes/"
190,yy/mm/dd Date,"^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$",This expression validates dates in the y/m/d format from 1600/1/1 - 9999/12/31. Follows the same validation rules for dates as my other date validator (m/d/y format) located in this library.
191,,"^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?""<>|]+\.htm(l)?$","Validates a file path on your local drive or a network drive. A similar one was written by Vinod Kumar but it does not reject asterisks in the path. Moreover, his did not work with RegularExpressionValidators. This one does.
"
192,,"^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$","Matches 99.99% of e-mail addresses (excludes IP e-mails, which are rarely used).  The {2,7} at the end leaves space for top level domains as short as .ca but leaves room for new ones like .museum, etc.  The ?: notation is a perl non-capturing notation, and can be removed safely for non-perl-compatible languages.  See also email."
193,,"([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})","Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:

$date = &quot;2003-12-03&quot;;
if (ereg (&quot;([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})&quot;, $date, $regs)) 
{
    echo &quot;$regs[3].$regs[2].$regs[1]&quot;; // prints 03.12.2003
}"
194,,"^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$","This matches an IP address, putting each number in its own group that can be retrieved by number. If you do not care about capturing the numbers, then you can make this shorter by putting everything after ^ until immediately after the first \. in a group ( ) with a {3} after it. Then put the number matching regex in once more. 

It only permits numbers in the range 0-255. 

"
195,,"^\$?(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$","From Author: DON'T USE THIS ONE. FIND MY OTHER ONE THAT BLOCKS LEADING ZEROS.  My site also couldn't swallow the \d, so I switched to numeric ranges and it worked fine.
KEYWORDS Currency Money Dollar 
"
196,,"^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$","Many currency expresssions allow leading zeros, thus $01.40 passes thru them.  This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and .0 Keywords: money dollar currency"
197,,"^(((((0[1-9])|(1\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$",This expression validates a date field in the European DD-MM-YYYY format. Days are validate for the given month and year. 
198,,"^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$","This is permit all decimal number, exclude all alphanumeric caracter"
199,,^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$,"Valida os todos Estados Brasileiros (UF) 
e o distrito Federal
 "
200,,"^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}","Checks whether the string specified is in the same format as the UK postcode format defined on:
http://www.magma.ca/~djcl/postcd.txt
It allows:
A = Letter
N = Number
AN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAA
It gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.
(restriction is set to all-capitals)"
201,,^[1-9]{1}[0-9]{3}$,Postcode for Belgium
202,,^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$,Postcode for Germany
203,,^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$,"Postcode check for France (including colonies)
-----
Edited; sorry I didn't know about Corsica, no offense :)"
204,,^(V-|I-)?[0-9]{4}$,Postcode check for Italy (including possible Vatican/Italy indications)
205,,^[1-9]{1}[0-9]{3} ?[A-Z]{2}$,Postcode check for Netherlands
206,,^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$,Postcode check for Spain
207,,&lt;\s?\/?[^\s&gt;]+(\s+[^&quot;'=]+(=(&quot;[^&quot;]*&quot;)|('[^\']*')|([^\s&quot;'&gt;]*))?)*\s*\/?&gt;,"Lookup all the HTML/XHTML/XML tags for you. Tag attributes can use single quotes, double quotes, or no quotes at all. Filters out bad-formatted tags though."
208,,<img([^>]*[^/])>,"Use this along with this replacement string &lt;img\1 /&gt; to convert image tags to XHTML compliant image tags.

"
209,,^((0?[1-9])|((1|2)[0-9])|30|31)$,"matches any day of
month 0?1-31"
210,,&lt;!--[\s\S]*?--&gt;,Removes pesky comments and commented javascript from HTML
211,,&lt;/?(\w+)(\s+\w+=(\w+|&quot;[^&quot;]*&quot;|'[^']*'))*&gt;,"Finds any HTML tag and sub-matches properties weather it has an apposterphee, quote, or no quote/apposterphee
"
212,,^\{?[a-fA-F\d]{8}-([a-fA-F\d]{4}-){3}[a-fA-F\d]{12}\}?$,"Validates a GUID with and without brackets. 8,4,4,4,12 hex characters seperated by dashes."
213,,"^([a-zA-Z0-9@*#]{8,15})$","Password matching expression. Match all alphanumeric character and predefined wild characters. Password must consists of at least 8 characters and not more than 15 characters. 
"
214,,^0[23489]{1}(\-)?[^0\D]{1}\d{6}$,"Regular Expression that validate a phone number inside israel.
"
215,,^0(5[012345678]|6[47]){1}(\-)?[^0\D]{1}\d{5}$,Regular Expression that validate Cellular phone in israel.
216,,(\d*)'*-*(\d*)/*(\d*)&quot;,This regular expression is for parsing feet and inches measurements.
218,,^(/w|/W|[^<>+?$%{}&])+$,simple expression for excluding a given list of characters.  simply change the contents of [^] to suite your needs.  for example ^(/w|/W|[^&lt;&gt;])+$ would allow everything except the characters &lt; and &gt;.
219,,(\{\\f\d*)\\([^;]+;),"This pattern returns the font section from an RTF document. The first parenthetical subexpression captures the font number, the second returns the actual font enumeration. Lame-o, but fun! :-)"
220,,"&amp;lt;/?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|&amp;quot;[^&amp;quot;]{0,1024}&amp;quot;|'[^']{0,1024}'))?)*\s*&amp;gt;","Searches for tags and there atributes according to the HTML 2.0 specification to limit length of tags to 72 characters, and length of attribute values to 1024 characters."
221,,"<[a-zA-Z][^>]*\son\w+=(\w+|'[^']*'|""[^""]*"")[^>]*>",Find HTML tags that have javascript events attached to them.
222,,((&quot;|')[a-z0-9\/\.\?\=\&amp;]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&amp;]*(&quot;|'))|(href=*?[a-z0-9\/\.\?\=\&amp;&quot;']*),"Will locate an URL in a webpage.
It'll search in 2 ways - first it will try to locate a href=, and then go to the end of the link. If there is nu href=, it will search for the end of the file instead (.asp, .htm and so on), and then take the data between the &quot;xxxxxx&quot; or 'xxxxxx'"
223,MM/YYYY MONTH/YEAR,^((0[1-9])|(1[0-2]))\/(\d{4})$,This regular expressions matches dates in the format MM/YYYY where MM can be 01 to 12 and YYYY is always 4 digits long. 
224,,"^\(\d{1,2}(\s\d{1,2}){1,2}\)\s(\d{1,2}(\s\d{1,2}){1,2})((-(\d{1,4})){0,1})$",Meets german norm-standard: DIN 5008: 1996-05 for telephone numbers
225,,"(?:\d|I{1,3})?\s?\w{2,}\.?\s*\d{1,}\:\d{1,}-?,?\d{0,2}(?:,\d{0,2}){0,2}",This RE validates standard Bible verse notation.
226,,(((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\d{4}))|((29)(\.|-|\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26]))),Jason West (jason.west@mail.state.ky.us) date validator with leap years using a strict dd/mm/yyyy  (ITALIAN) format
227,,^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$,Regular Expression that validate phone in France.
228,,^[A-Z]{2}[0-9]{6}[A-DFM]{1}$,"UK National Insurance Number (NINO) validation. (The following modifications have been made: Only A to D are permitted as the last letter, and all letters should be in uppercase. For temporary numbers F and M are permitted for female and male holders.)"
229,,"^[A-Z]{1,2}[1-9][0-9]?[A-Z]? [0-9][A-Z]{2,}|GIR 0AA$","Matches UK postcodes according to the following rules 1. LN NLL eg N1 1AA 2. LLN NLL eg SW4 0QL 3. LNN NLL eg M23 4PJ 4. LLNN NLL eg WS14 0JT 5. LLNL NLL eg SW1N 4TB 6. LNL NLL eg W1C 8LQ. Modifications: 1) Doesn't allow leading zeros in first part (outward) eg BT01 3RT is incorrect; it should be BT1 3RT. 2) Only allows uppercase letters, which is the preference of the UK Post Office. 3) Permits the only postcode to break the rules - GIR 0AA (for the old Girobank, now Alliance &amp; Leicester bank, address)"
230,,"^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$","This is a regular expression to validate a date string in &quot;MM/DD/YYYY&quot; format, a date time string in &quot;MM/DD/YYYY HH:MM&quot; or a date time string in &quot;MM/DD/YYYY HH:MM:SS&quot; format.
It can validate date from 1600 to 2199.
"
232,,^&lt;a\s+href\s*=\s*&quot;http:\/\/([^&quot;]*)&quot;([^&gt;]*)&gt;(.*?(?=&lt;\/a&gt;))&lt;\/a&gt;$,"Regexp to find all external links in a HTML string.

Can easily be modified to handle all/other links/protocols (like file/https/ftp).

Uses lookahead assertions and non-greedy modifier to check for the end &lt;/a&gt; but still allow html tags inbetween start and end A tag.

Takes into account that there could be linebreaks and other nasty whitespace chars in the middle of the tag.
I am using it to find all external links in embedded HTML code and change 1.the target of the link 2.insert a &quot;Leaving Site&quot; logo to illustrate you are leaving site. "
233,,"^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$","This is a combination of a few regular expressions found on this site.  It allows for a flexible date and time combination, but requires a 12-hour clock (am/pm).  Many versions of the am/pm are supported."
234,,<blockquote>(?:\s*([^<]+)<br>\s*)+</blockquote>,"Use this regular expression pattern to get the string1, string2, string3 .... from &lt;blockquote&gt;string1&lt;br&gt;string2&lt;br&gt;string3&lt;br&gt;&lt;/blockquote&gt;

"
235,,^((0?[13578]|10|12)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1}))|(0?[2469]|11)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1})))$,"improved date validation M/D/YY or M/D/YYYY or MM/DD/YYYY or MM/DD/YY: 1/1/1920 through 12/31/2019; Feb 29 and 30 always allowed, deal with it"
237,,^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$,This time validation expression accepts an hour between 1 and 9 (with optional leading zero) and minutes between 01 and 59.  This is primarily for use with an AM/PM drop down list or radio button.
238,,^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$,"validate 12-hour time with am/pm after it, with optional spaces before or after, and optionally between time and am/pm."
239,,\({1}[0-9]{3}\){1}\-{1}[0-9]{3}\-{1}[0-9]{4},
240,,[^abc],
241,,^(([0]?[1-9]|[1][0-2])[\/|\-|\.]([0-2]\d|[3][0-1]|[1-9])[\/|\-|\.]([2][0])?\d{2}\s+((([0][0-9]|[1][0-2]|[0-9])[\:|\-|\.]([0-5]\d)\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\:|\-|\.]([0-5]\d))))$,"MM-DD-20YY HH:MM AP
MM-DD-20YY H:MM AP
MM-DD-20YY HH:MM
MM-DD-20YY H:MM
MM-DD-YY HH:MM AP
MM-DD-YY H:MM AP
MM-DD-YY HH:MM
MM-DD-YY H:MM
M-D-YY HH:MM AP
M-D-YY H:MM AP
M-D-YY HH:MM
M-D-YY H:MM

where - can be / or - or .
where : can be : or - or .

Definition:
^(                       ;Start of Line
([0]?[1-9]|[1][0-2])     ;00-09 or 10-12 or 1-9
[\/|\-|\.]               ;/ or - or .
([0-2]\d|[3][0-1]|[1-9]) ;00-29 or 30-31 or 1-9
[\/|\-|\.]               ;/ or - or .
([2][0])?\d{2}           ;2000-2099 or 00-99
\s+                      ;one or more spaces
(                        ;must be either 12H notation w/AM|PM
 (
 ([0][0-9]|[1][0-2]|[0-9])
 [\:|\-|\.]              ;: or - or .
 ([0-5]\d)               ;01 thru 59
 \s*                     ;zero or more spaces
 ([aApP][mM])?           ;nothing or AM or PM (case insensitive)
 )
|                        ;or 24H notation w/out AM|PM
 (
 ([0-1][0-9]|[2][0-3]|[0-9]) ;00-19 or 20-23
 [\:|\-|\.]              ;: or - or .
 ([0-5]\d)               ;00-59
 )
)
)$                       ;End of Line
"
242,,^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$,"Match any number between 1 and 50, no characters, no empty sets, and not zero. Match numbers greater than 1 and less than 51, no spaces, no characters."
243,,"^([A-Z]{1}[a-z]{1,})$|^([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^$",Matches up to three alphabet words separated by spaces with first alphabet character of each word uppercase. Also matches empty strings.
244,,^([1][12]|[0]?[1-9])[\/-]([3][01]|[12]\d|[0]?[1-9])[\/-](\d{4}|\d{2})$,"Matches dates with the following format
Month - either MM (like 01) or M (like 1) - from 1 to 12
Day - either DD (like 01) or D ( like 1) - from 1 to 31
Year - either YYYY ( like 1998) or YY (like 98)
Separater - either - or /"
247,,^([ \u00c0-\u01ffa-zA-Z'])+$,"Expression to match names and dis-allow any attempts to send evil characters.  In particular, it tries to allow
non-english names by allowing unicode characters."
248,,(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9]),Validates time in MySQL time format.  24 hour time colon seperated hours:minutes:seconds
249,,^((([0]?[1-9]|1[0-2])(:|\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)(00|15|30|45)?))$,This expression will allow a time value with 15 minute increments.  It will not accept seconds.  You can use either US time or Military time format.
250,,^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$,"Validate brazilian date formats: dd/mm/yyyy or d/m/yy or d.m.yyyy
with separators: . - /
Valid dates only! d (1-31)/ m (1-12)/ y (0..)
(rizzipereira.com.br)
For American date format: http://www.regexlib.com/REDetails.aspx?regexp_id=932"
251,,(^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$),Accepts only positive decimal values. Zero and negatvie numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.
252,,(^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$),Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits. 
253,,^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$,"this is a regular expression that for chinese programer!
yyyy/mm/dd hh:mm:ss"
254,,"^(\d|,)*\.?\d*$",Matches Numeric with Commas and a single decimal point.  Also matches empty string.
255,,(\[[Ii][Mm][Gg]\])(\S+?)(\[\/[Ii][Mm][Gg]\]),"easy when you want to allow your users to post images, but in a controlled way. I used it like this (in php):

$text = preg_replace(&quot;/(\[IMG\])(\S+?)(\[\/IMG\])/is&quot;, &quot;&lt;a href=\&quot;\\2\&quot; target=\&quot;_blank\&quot;&gt;&lt;IMG SRC=\&quot;\\2\&quot; align=\&quot;center\&quot; height=\&quot;100\&quot; border=\&quot;0\&quot;&gt;&lt;/a&gt;&quot;,$text);

so whenever they use

[img]http://www.foo.com/bleh.jpg[/img]

it will be converted to

&lt;a href=&quot;http://www.foo.com/bleh.jpg&quot; target=&quot;_blank&quot;&gt;&lt;IMG SRC=&quot;http://www.foo.com/bleh.jpg&quot; align=&quot;center&quot; height=&quot;100&quot; border=&quot;0&quot;&gt;&lt;/a&gt;

so you get a 100 pixels high picture, and when they click on it it opens in a new window...

(to prevent users from posting huge pictures and stuff)"
257,,^[+]?\d*$,"This re was used for set numbers only!
Somente numeros s&#227;o requeridos!"
258,,"&lt;[aA][ ]{0,}([a-zA-Z0-9&quot;'_,.:;!?@$&amp;()%=/ ]|[-]|[	\f]){0,}&gt;((&lt;(([a-zA-Z0-9&quot;'_,.:;!?@$&amp;()%=/ ]|[-]|[	\f]){0,})&gt;([a-zA-Z0-9&quot;'_,.:;!?@$&amp;()%=/ ]|[-]|[	\f]){0,})|(([a-zA-Z0-9&quot;'_,.:;!?@$&amp;()%=/ ]|[-]|[	\f]){0,})){0,}","I wrote this sweet little (well, not so little really) reg to extract links from an HTML source....  it is very robust, give it a try.
The only limitation I have discovered is that it can't match invalid HTML..."
259,,^[0-9A-Za-z_ ]+(.[jJ][pP][gG]|.[gG][iI][fF])$,Matches HTML image leaf filenames.
260,,"^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$","Regular expression to match valid UK postcodes.

In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this.  This regex takes into account those rules.

Details of the rules:

First half of postcode  
    Valid formats   
        [A-Z][A-Z][0-9][A-Z]  
        [A-Z][A-Z][0-9][0-9]  
        [A-Z][0-9][0-9]  
        [A-Z][A-Z][0-9]  
        [A-Z][A-Z][A-Z]  
        [A-Z][0-9][A-Z]  
        [A-Z][0-9]                 


    Exceptions  

        Position - First.  

        Contraint - QVX not used    

        Position - Second.  

        Contraint - IJZ not used except in GIR 0AA  

        Position - Third.  
        Constraint - AEHMNPRTVXY only used  

        Position - Forth.  
        Contraint - ABEHMNPRVWXY  



Second half of postcode       
    Valid formats     
        [0-9][A-Z][A-Z]  


    Exceptions  
        Position - Second and Third.  
        Contraint - CIKMOV not used  
"
261,,^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$,"Accepts data of time in format h:mm and hh:mm
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
in php [0-23]:[0-59]{2} (posix)"
262,,^((0[1-9])|(1[0-2]))\/(\d{2})$,Validates MM/YY for rough checking credit card expiration dates.
264,,"\w?<\s?\/?[^\s>]+(\s+[^""'=]+(=(""[^""]*"")|('[^\']*')|([^\s""'>]*))?)*\s*\/?>",Matches tags
265,,<script[^>]*>[\w|\t|\r|\W]*</script>,this pattern can find all lines of script in HTML code from open to close tag range
266,,"(^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])","Incorporated other people's examples; removed extraneous parenthesis on 10/7/04.  Currently the SSA site says 772 is the highest AREA number generated (http://www.ssa.gov/employer/highgroup.txt).  Old expression was:  (^|\s)\d{3}(-?|[\. ])\d{2}\2\d{4}($|\s|[;:,!\.\?]).  Looks for either the beginning of a line or whitespace before the beginning of the social security number, then either zero or one hyphen OR one of a period or space, then uses the \3 to reference the value returned in the parenthesis that includes the -?|[\. ] (basically says if the first dash, period, or space is there, then the second one is required; and if the first dash, period, or space is not there, then the second one can't be either), and finally looks for the end of a line, whitespace, or punctuation characters after the social security number."
268,,^[-+]?[1-9]\d*\.?[0]*$,"This will check if a number is an integer.  Positive integers are all the whole numbers greater than zero: 1, 2, 3, 4, 5, ... . Negative integers are all the opposites of whole numbers: -1, -2, -3,-4, -5, ... .  Zero is not a whole number with either a positive or negative value, and is not an interger.  Null or Empty values are not intergers.     "
269,,"^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$","Matches a valid email address including ip's which are rarely used. Allows for a-z0-9_.- in the username, but not ending in a full stop i.e user.@domain.com is invalid and a-z0-9- as the optional sub domain(s) with domain name and a 2-7 char (a-z) tld allowing for short tld's like ca and new ones like museum."
270,,&lt;[^&gt;]+&gt;,"This expression finds all opening and closing tags.  Good for stripping out tags in an XML or HTML document.

I used it to clean-up HTML documents that had XML mixed in.  It found all the tags, then I just deleted the ones that weren't standard.  I used it in HOMESITES extended find."
271,,^(([0]?[0-5][0-9]|[0-9]):([0-5][0-9]))$,This regex is to validate the time of a ~60 minute CD where the most time on the CD is 59:59 (minutes:seconds). It is derived from Ken Madden's time regex for a project for Erik Porter (Windows/Web guru). Written by Jason Gaylord.
272,,"^[0-9]{1,}(,[0-9]+){0,}$","It could be use to validate html input form (checkbox, optionbox, selectbox) when you have multiple numeric value under one field name. The validation is that the user have at lease chose one or more!"
273,,^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*&lt;&gt;:\;|\&quot;/]+$,Additional checks for &lt;&gt; and &quot; characters
274,,"^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$",ICD9 code pattern
275,,"^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.){0,}([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?){1,63}(\.[a-z0-9]{2,7})+$","[Note: this regex was tested with Macromedia's ColdFusion MX.  I'm sure it'll need some massaging to work with other regex engines.]  Of the few domain validating regular expressions I found in my search I didn't find a single one that reliably handled multiple levels of subdomains or TLDs.  So, I wrote one and thoroughly tested it.  There are a ton of matching and non-matching examples that need to be included to show the completeness of this regex.

Non-matching:  -.domain.com, -a.domain.com, -domain.com, domain-.com, any domain where the portion before the tld is greater than 63 characters.

Matching: a.domain.com, a-a.domain.com, a--a.domain.com, a--defg.com, domain.co.uk."
276,,"^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$",Expression to handle US currency entry in .NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.
277,,"^\d{0,2}(\.\d{1,4})? *%?$","An expression for .NET regular expression validation controls intended to faciliate the entry of percentage values both a whole numbers or as their decimal representations. Also compatible with the default US format for string formatting for percentages.

Recommend that if you intended accept a value passing this express that you strip the percentage signs and take measures to ensure that any whole values are converted to percentages.
"
278,,^(?![0-9]{6})[0-9a-zA-Z]{6}$,matches a six character &quot;password&quot; that has to consist of numbers and letters with at least one letter in it.
279,,((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$)),"This Validator Validates any date from 1800 - 9999. It takes special care of Leap years and validates any format of type mm/dd/yyyy , m/dd/yyyy , mm/d/yyyy , m/d/yyyy.
Since SQL Server does not accept any date before 1/1/1753, so i hope it will meet Your Requirements.(Modified Version of Jason West's Date Validator.)"
280,,{.*},"Simple, but it gave me trouble in the c#..."
281,,^\d* \d*\/{1}\d*$|^\d*$,"This expression is used to validate fractions (entered as strings). It will also accept non-fractional entries. Simple, but effective."
282,,^([a-zA-Z0-9_\-\.])+@(([0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5])|((([a-zA-Z0-9\-])+\.)+([a-zA-Z\-])+))$,Email Expression Match That allows both IP addresses and regular domains. In the case of an IP address it makes sure that it is no more than 255 for each part.
283,,^\(?[\d]{3}\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$,"This regular expression matches 10 digit US Phone numbers in different formats. Some examples are
1)area code in paranthesis.
2)space between different parts of the phone number.
3)no space between different parts of the number.
4)dashes between parts.
"
284,,^([a-zA-Z0-9_\-])+(\.([a-zA-Z0-9_\-])+)*@((\[(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5]))\]))|((([a-zA-Z0-9])+(([\-])+([a-zA-Z0-9])+)*\.)+([a-zA-Z])+(([\-])+([a-zA-Z0-9])+)*))$,Email expression match that allows both IP addresses and regular domains. In the case of an IP address it makes sure that it is no more than 255 for each part. Thanks to Ivan R. and Michele for some bug fixes...BTW: This is my second reg expression ever so be nice :-D
285,,"^([a-zA-Z0-9!&amp;amp;amp;quot;#$%&amp;amp;amp;amp;',/:;&amp;amp;amp;lt;=&amp;amp;amp;gt;@_`|~ \(\)\*\+\-\.\?\[\]\\\^\{\}])*$",I simple check that I personally use to validate passwords to make sure that they only contain ascii character 32 through ascii character 126.
286,,(\/\/--&gt;\s*)?&lt;\/?SCRIPT([^&gt;]*)&gt;(\s*&lt;!--\s)?,"Can be used to remove 
&amp;amp;lt;SCRIPT language=&amp;amp;quot;JavaScript&amp;amp;quot;&amp;amp;gt;
&amp;amp;lt;!-- 
//--&amp;amp;gt;
&amp;amp;lt;/SCRIPT&amp;amp;gt;

from embeded javascript

Should be used as case insensitive"
295,,"^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6}$","It verifies that: - Only letters, numbers and email acceptable symbols (+, _, -, .) are allowed - No two different symbols may follow each other - Cannot begin with a symbol - Ending domain must be at least 2 letters - Supports subdomains - TLD must be between 2 and 6 letters (Ex: .ca, .museum) - Only (-) and (.) symbols are allowed in domain, but not consecutively.

Problems:
See comments below"
296,,^(\+[1-9][0-9]*(\([0-9]*\)|-[0-9]*-))?[0]?[1-9][0-9\- ]*$,"International phone number check - optional country code followed by area code surrounded with '-' or '(' and ')', or just an area code optionally starting with 0, followed by phone numder. The number itself may contain spaces and '-'"
297,,(\s*\(?0\d{4}\)?\s*\d{6}\s*)|(\s*\(?0\d{3}\)?\s*\d{3}\s*\d{4}\s*),"UK Phone Number Allows leading and trailing spaces and optional spaces after the dialing code.

Initially the expression I posted was
\s*0\d{4}\s*\d{6}\s*|\s*0\d{3}\s*\d{7}\s*

But this didn't include optional brackets e.g. (01603) 123123 or phone numbers in a London format e.g. 0208 123 1234"
298,,(([01][\.\- +]\(\d{3}\)[\.\- +]?)|([01][\.\- +]\d{3}[\.\- +])|(\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4},"167 different US telephone patterns. Options includes a)0 or 1 dial, b)area code, c).+-()space between number dial-area code-number.  "
300,,"^\w+(\-|\.|_)?\w+\@[A-z\d]+\-?[A-z\d]+\.[A-z\d]{2,}$",
301,,"^(http|https|ftp)\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\-\.])+\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*)$","First attempt at reg ex - work in progress - can't quite get it to work absolutely correctly so any comments would be great.

Matches everything as it should apart from the last part of the IP, i.e. allows http://255.255.255.999 (which obviously it shouldn't but ran out of inspiration) so any corrections humbly and gratefully accepted.

TLD check is not complete - just added most of the major ones but easy to dd to if you want to.

BTW - you'll need to replace the &amp; with just the ampersand in the reg ex"
303,,(^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$),"dd/mm/yy
Check dates between 1/1/1900 - 31/12/2099"
304,,(^\d{3}\x2E\d{3}\x2E\d{3}\x2D\d{2}$),Brazilian cpf
305,,^(\{|\[|\().+(\}|\]|\)).+$,Matches &quot;clan&quot; nicks/names.
306,,^(([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?$,"Is used to evaluating domain names, none of the extras such as paths or protocols."
307,,^([A-Za-z]\d[A-Za-z][-]?\d[A-Za-z]\d),Regular expression to match a canadian postal code where it matches a string with or without the hyphen and in upercase or lowercase
308,,^07([\d]{3})[(\D\s)]?[\d]{3}[(\D\s)]?[\d]{3}$,"UK Mobile phone regular expression.

I usually run this against a telephone field to split out landlines and mobile numbers."
309,,"^([a-zA-Z.\s']{1,50})$","This is just a regular special char expression used to get the hax0rs off your back (hopefully).  You can use this for regular open name checking if you wanted.  It only fails on the insert of anything other than a-z, A-Z, and ' or whitespace. I'm open to suggestions, but try to email them to me as well as posting them to help others.  Thanks."
310,,"^([a-zA-Z0-9!@#$%^&amp;*()-_=+;:'&quot;|~`&lt;&gt;?/{}]{1,5})$","This Regular expression validates a string that contains all printable characters with a minimum length of 1 and maximum length of 5.

Obviously the min and max can be changed to meet the users needs.

^([a-zA-Z0-9!@#$%^&amp;*()-_=+;:'&quot;|~`&lt;&gt;?/{}]{1,5})$ This is the string, I keep getting &amp;amp;lt and other characters when I save it."
311,,"^[0-9]{4}\s{0,2}[a-zA-z]{2}$",Dutch postalcode expression. 4 digits followed by max. two spaces end ending on two letters. 
312,,[^a-zA-Z \-]|(  )|(\-\-)|(^\s*$),"This match fileds contain only letters, a single hyphen, a single space, not empty "
313,URL pattern,"^(http|https|ftp)\://((([a-z_0-9\-]+)+(([\:]?)+([a-z_0-9\-]+))?)(\@+)?)?(((((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5]))))|((([a-z0-9\-])+\.)+([a-z]{2}\.[a-z]{2}|[a-z]{2,4})))(([\:])(([1-9]{1}[0-9]{1,3})|([1-5]{1}[0-9]{2,4})|(6[0-5]{2}[0-3][0-6])))?$",This pattern is not longer being maintained.  IPV6 will really break this regular expression and it wasn't a very good regular expression as far as parsing out the contents.
314,,"^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$","Validates US phone numbers. Phone number can be delimited with dashes or spaces. Area code can optionally include parentheses. To optionally validate area codes, try this expression.

^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$"
315,,^\(?082|083|084|072\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$,"I modified the existing phone number regex for another user looking to only allow 082, 083, 084, or 072 exchanges. Written by Jason Gaylord"
316,,"^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$","This expression validates dates in the Brazilian d/m/y format from 1/1/1600 - 12/31/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999. Days and months must be 1 or 2 digits and may have leading zeros. Years must be 4 digit years, between 1600 and 9999. Date separator must be a slash (/)"
317,,"^([0-9A-Za-z@.]{1,255})$","This is an update of Paul Miller's RegEx.  It will cut out literal &amp;lt;&amp;gt; but I haven't fully tested it, it's just a quick fix since his didn't work all that well.

I also took out the \s.  You could add this back in but I use this for very simple password verification, and I certainly have no use for spaces in my passwords."
318,,"^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{0,2})?|\d{1,3}(\.\d{0,2})?|\.\d{1,2}?)$","This expression will validate for US Currency with a wide range of input.  Using other exps found on this site, I built this one to fix 2 main problems I was finding:
1-a space or blank entry is non-matching
2-use of .9 in place of .90 will match (this is for those people like me who hate to type and if I put .9 I mean .90
Hope this helps others save a little time.  I feel I was pretty thorough in testing, but if you find something wrong, please post it.  -Thanks"
319,,^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$,"Correct German DateTime. Does not check leap year rules!

Possible Formats of date part: 
D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY

Possible formats of time part:
h:mm or hh:mm"
320,,^((((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$,"Date with leap years. Accepts '.' '-' and '/' as separators
d.m.yy to dd.mm.yyyy (or d.mm.yy, etc)
Ex: dd-mm-yyyy   d.mm/yy   dd/m.yyyy  etc etc
Accept 00 years also."
321,,^(([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+))$,"Matches simple IP addresses. It's not too complex or long, but it does the job if you want something short/simple."
322,,&lt;[iI][mM][gG]([^&gt;]*[^/&gt;]),simple little RegExp to get the IMG tag from HTML
323,,\d{2}.?\d{3}.?\d{3}/?\d{4}-?\d{2},This regular expressions matches CNPJ number. CNPJ is a Registration Number of Brazilian Companies.
324,,('.*$|Rem((\t| ).*$|$)|&quot;(.|&quot;&quot;)*?&quot;),"Pulls out comments (both Rem and ') and string literals from VB or VBScript. Usefull for spell checking or review.

Notes: The VBScript for &quot;Rem&quot; documentation says that it must be followed by a space but VBScript seems to accept tab characters as well.

The multiline flag is assumed for this search."
325,,^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$,valid date base on Month
326,,^((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)$,"Date expression validator with format YYMMDD
Validates leap years.
Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years !"
327,,^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$,Validates a UK Bank Sort code
328,,"^((\""[^\""\f\n\r\t\v\b]+\"")|([\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+(\.[\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+)*))@((\[(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))\])|(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))|((([A-Za-z0-9\-])+\.)+[A-Za-z\-]+))$","Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid: !#$%^&amp;amp;amp;amp;*-+~/'`|{}@xyz.com

Sorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself."
329,,"^(\d|-)?(\d|,)*\.?\d*$","Input for Numeric values.  Handles negatives, and comma formatted values.  Also handles a single decimal point"
330,,^[1-9]+[0-9]*$,Allows only positive integers that are greater then 0. Easily modified for +/- intergers and allowing zero.
331,,^[+]447\d{9}$,Validates a UK mobile phone number in International format
332,,^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$,reg. expr. 4 checking 24 time
333,,"^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$","does not allow IP for domain name : hello@154.145.68.12
does not allow litteral addresses &quot;hello, how are you?&quot;@world.com
allows numeric domain names
after the last &quot;.&quot; minimum 2 letters"
334,,\b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b,"Whilst writing a plain-text to HTML function, I ran into the problem of links that users had written with &amp;lt;a&amp;gt; tags (as opposed to just writing the URL) were linking improperly.  This regular expression returns many types of URL, and preceding characters, if any.  This allows you to handle each type of match appropriately"
335,,^(([a-z])+.)+[A-Z]([a-z])+$,This matches Java class names such as &quot;com.test.Test&quot;. It's being used within an XML Schema to validate classname as specified in XML documents.
336,,^[a-zA-Z_][a-zA-Z0-9_]*$,Matches variable names/identifier from C# (and most other languages)
338,,"^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$",Swedish phone numbers according to SIS standard
340,,"^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}","Credit card validator for AMEX, VISA, MasterCard only. Allows spaces, dashes, or no separator between digit groups according to the layout (4-6-5 for AMEX, 4-4-4-4 for Visa and Mastercard)"
341,,"^((\d?)|(([-+]?\d+\.?\d*)|([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d+\.?\d*))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d+\.?\d*)))$","This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).  Based pretty heavily on an expression by Steven Smith on this site."
342,,"^(\d{5}((|-)-\d{4})?)|([A-Za-z]\d[A-Za-z][\s\.\-]?(|-)\d[A-Za-z]\d)|[A-Za-z]{1,2}\d{1,2}[A-Za-z]? \d[A-Za-z]{2}$","Allows Canadian, American and UK postal/zip codes. Allowing hyphens, periods, or spaces to separate."
343,,(.*\.([wW][mM][aA])|([mM][pP][3])$),Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. To include more simply add logical 'or' (|) operator and append.
345,,"^(([a-zA-Z]:|\\)\\)?(((\.)|(\.\.)|([^\\/:\*\?""\|<>\. ](([^\\/:\*\?""\|<>\. ])|([^\\/:\*\?""\|<>]*[^\\/:\*\?""\|<>\. ]))?))\\)*[^\\/:\*\?""\|<>\. ](([^\\/:\*\?""\|<>\. ])|([^\\/:\*\?""\|<>]*[^\\/:\*\?""\|<>\. ]))?$",File Name Validator. Validates both UNC (\\server\share\file) and regular MS path (c:\file).
346,,"^[a-zA-Z0-9]{1,20}$",
347,,(NOT)?(\s*\(*)\s*(\w+)\s*(=|&lt;&gt;|&lt;|&gt;|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?,"Heres my sql clause parser regexp for recordset filtering. Does recursive query parsing all by its self. Only problem I cant figure is how to match comma separated lists of quoted strings. Tell me if you figure out how!
The unicodes in the re was put in by the entry form please replace them with their ascii equivalents to use it."
350,,"(^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)","This is my basic phone number verification. it allows a + - , signs digits, spaces and blank entry"
352,,"^(.|\n){0,16}$",Limit Length - limit the length of a text box or other area to contain any character plus new line
354,,(?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z),"This expression will match all of the commands(escape codes) used in ANSI files.  These are what were used to create the colors/blocks on BBS's for those of us that once dialed into them.

http://www.wikipedia.org/wiki/ANSI_escape_code has a reference for ANSI escape codes.

http://idledreams.net/lordscarlet/posts/153.aspx shows an example of the engine I have created surrounding the expression"
356,,"(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})",This is my all-time favourite e-mail validator.  I've used it for years and it's never failed me :-)
357,,"^([a-zA-Z]\:)(\\[^\\/:*?<>""|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$","Matches filenames.

UPDATED on 1st Jan 2004."
358,,^[^#]([^ ]+ ){6}[^ ]+$,"We've come across the situation where we had to extract the IIS-Log entries without the header information. The data is far more complex than the sample given.
Explanation:
^[^#] = lines not beginnin with #
([^ ]+ ){6} = 6 times no space until one space
[^ ]+ = no spaces allowed...
$ = ...until end of line

For further explanation don't hesitate to write E-Mail."
359,,"(\b\w+\b)       # Match a word and capture it
\s+
\1              # Use backreference \1 to match double-ups",
360,,^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$,For testing 24H based time entry.  Tests if there is a colon to separate the hours from the minutes
361,,"^(((((0[13578])|([13578])|(1[02]))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(30)))|((02|2)[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s(((0[1-9])|([1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$","Following expression can be used to validate a datetime column from SQL Server.  This expression is an enhanced version of Scott Watermasysk's date/time submission.  It now accepts leading zeros in months, days, and hours.  In addition, this expression properly handles the 11th hour.   Watermasysk's would take the 10th and 12th hour but not the 11th.  This regex has been tweaked to do so.  Does not handle the February 29th problem on non-leap years yet.  Will learn a little more about RegEx and do so in later submission.
"
362,,^0(6[045679][0469]){1}(\-)?(1)?[^0\D]{1}\d{6}$,"Validates Austrian Cellular Phone Numbers. Works with ONE, T-Mobile, A1, Telering and new Provider &quot;Drei&quot;. WITHOUT Country Code Verification."
363,,^1?[1-9]$|^[1-2]0$,Matches a whole number between 1 and 20 inclusively
367,,^[1-9][0-9]{3}\s?[a-zA-Z]{2}$,"Validates Dutch Postal Codes (ZipCode). There was a previous one listed here, but it's not entirely correct. Namely that dutch postal codes can contain a zero but cannot start with one, so this one is the adjusted version."
368,,^([0-9]*|\d*\.\d{1}?\d*)$,"Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric .This will be usefull in money related
fields or decimal fields. "
369,DateTime M/d/y hh:mm:ss,"^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$",DateTime Validator. 
370,Time,"^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$",This RE validates times patterns.
372,,^(#){1}([a-fA-F0-9]){6}$,Matches HTML Color strings. Like #FFFFFF is white and #000000 is black and #FF0000 is red and so on...
374,,(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])(\d{4}))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26]))),"Date in DD/MM/YYYY format.
Fecha en formato DD/MM/AAAA."
375,,(^\d{5}\x2D\d{3}$),Brazilian cep
376,,"^((((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9]))))[\-\/\s]?\d{2}(([02468][048])|([13579][26])))|(((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))[\-\/\s]?\d{2}(([02468][1235679])|([13579][01345789]))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$","This regex will match SQL Server datetime values, allowing date only, allowing zero padded digits in month, day and hour, and will match leap years from 1901 up until 2099."
377,,[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2},matches IP address in hex form in dotted or not dotted notation
378,,"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}",Very Simple Match for dotted Decimal IP address.  Doesn’t Validate addresses
379,,"(^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$",Matches number in format XX.XX Please note that this expression allows maximum of 8 digits before the dot and 2 (optional) digits after the dot.
380,,"^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$","Simple match for U.S. Amateur Radio Call signs
Must start with an A,K,N or W.
1 or two prefix letters (not case sensitive),
Exactly one zone digit,
One to three suffix digits( not case sensitive).

73
"
382,,^\[assembly: AssemblyVersion\(\&quot;([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+),"using match.Result(&quot;$1.$2.$3.$4&quot;) 
will return the assembly version of a given c# AssemblyInfo.cs file"
383,,&lt;!--.*?--&gt;,
384,,"^[a-zA-Z0-9&#192;&#193;&#194;&#195;&#196;&#197;&#198;&#199;&#200;&#201;&#202;&#203;&#204;&#205;&#206;&#207;&#208;&#209;&#210;&#211;&#212;&#213;&#214;&#216;&#217;&#218;&#219;&#220;&#221;&#223;&#224;&#225;&#226;&#227;&#228;&#229;&#230;&#231;&#232;&#233;&#234;&#235;&#236;&#237;&#238;&#239;&#241;&#242;&#243;&#244;&#245;&#246;&#248;&#249;&#250;&#251;&#252;&#253;&#255;\.\,\-\/\']+[a-zA-Z0-9&#192;&#193;&#194;&#195;&#196;&#197;&#198;&#199;&#200;&#201;&#202;&#203;&#204;&#205;&#206;&#207;&#208;&#209;&#210;&#211;&#212;&#213;&#214;&#216;&#217;&#218;&#219;&#220;&#221;&#223;&#224;&#225;&#226;&#227;&#228;&#229;&#230;&#231;&#232;&#233;&#234;&#235;&#236;&#237;&#238;&#239;&#241;&#242;&#243;&#244;&#245;&#246;&#248;&#249;&#250;&#251;&#252;&#253;&#255;\.\,\-\/\' ]+$","This simple regexp should match any possible italian address entry and doesn't match NULL entries (good if address is required). Should work well for any other address (it's been verified against 250 addresses from most european countries, usa and australia. Please mail me if there's something missing"
385,Days of the week,^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$,This RE matches Days of the week or their abbreviations.
387,,"<[a-zA-Z]+(\s+[a-zA-Z]+\s*=\s*(""([^""]*)""|'([^']*)'))*\s*/>","Matches a valid &quot;empty&quot; tag (has trailing slash).  Note, if you run it against a string such as &lt;img src=&quot;test.gif&quot; alt=&quot;&lt;hr /&gt;&quot;&gt; it will indeed return a match.  But, the match is not at character 1 like you'd suspect, but rather it's matching the internal &lt;hr /&gt;.  If you look at the source of this tag (http://concepts.waetech.com/unclosed_tags/) you'll find a whoe suite of regex's for matching html tags.  Using them you could feasibly step though a document and avoid this mismatch as the outer tag would match *in totality* and you'd completely skip this inner match.
"
388,,"^[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]@[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][a-z0-9]{2,4}$","for validate a email, but with this regex it 's possible : a._-z@a_.....____---.com"
389,,^\w+.*$,Validates any line begining with an alpha-numeric. If you need a regular expression that fails only for a zero length string.  Remove the \w+. I originally attempted to post was ^.*$ but the input form would not allow it.
390,,"^((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$","Matches ANSI SQL date format YYYY-mm-dd hh:mi:ss am/pm.  You can use / - or space for date delimiters, so 2004-12-31 works just as well as 2004/12/31. Checks leap year from 1901 to 2099."
391,,"^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$","Checks domain names. This validates domains based on latest specifications (RFCs 952 and 1123 dealing with hostnames and RFC 1035 dealing with domain name system requirements) except that it only includes realistic fully-qualified domains: 1. requires at least one subdomain 2. allows shortest top-level domains like &quot;ca&quot;, and &quot;museum&quot; as longest. 

Other validation rules: 1. Labels/parts should be seperated by period. 2. Each label/part has maximum of 63 characters. 3. First and last character of label must be alphanumeric, other characters alphanumeric or hyphen. 4. Does not check maxlength of domain which incidentally is 253 characters of text (255 binary representation). 

For a regular expression that matches ALL domains: 
^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$ 
"
395,,"^[\u0081-\uFFFF]{1,}$","Double byte charactors validator.
The rule applies to double byte charactor input validation."
396,,^((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))$,"This validates the states and territories of the United States in a 2 character uppercase format. Very poor excuse for a regular expression!  ;)

Written by Jason Gaylord."
397,,^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$,"It is the exact phone number regular expression for '(###) ###-####'.

Written by Jason Gaylord."
398,,^(([0]?[1-9]|1[0-2])/([0-2]?[0-9]|3[0-1])/[1-2]\d{3})? ?((([0-1]?\d)|(2[0-3])):[0-5]\d)?(:[0-5]\d)? ?(AM|am|PM|pm)?$,"Matches variations on date/time/AM-PM. Must have 4 digit year, but everything else is open. Restrictions are: 4 digit year, months 1-12, hours 1-23, minutes and seconds 1-59, any case of AM and PM. If this don't woik, I wrote it, lemmy know."
399,,^\d(\d)?(\d)?$,Matches positive whole numbers from 0-999
400,,^(3[0-1]|2[0-9]|1[0-9]|0[1-9])[\s{1}|\/|-](Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)[\s{1}|\/|-]\d{4}$,"More flexible date validator. Allows either spaces, / or - as dividers, also allows for fully uppercase months, year as 4 digit."
401,,"^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$",Used for dutch postalcodes; no leading zero. 4 numbers and 2 letters.
402,,^\s*(((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*) )\s*[xX]\s*){2}((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*))\s*$,"This validates Length times Width times Height measurements, which consists of 3 whole or decimal numbers separated by an x."
403,,"[\\s+,]","Simple expression for matching all commas and all whitespace characters:  ASCII (13,10,44)"
404,"MMM dd, yyyy Date","^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))","This RE validate Dates in the MMM dd, yyyy format from Jan 1, 1600 to Dec 31, 9999. The format is as follows: The name or 3 letter abbreivation, without a period, of the month, then a space then the day value then a comma then a space finally the year. The correct number of day are validated for each month include leap years. The name of month is case sensitive."
405,dd MMM yyyy Date,^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$,This RE validates dates in the dd MMM yyyy format. Spaces separate the values.
406,Months,^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$,This RE validate the full name of the months.
407,,(\d{3}.?\d{3}.?\d{3}-?\d{2}),Brazilian CPF - Personal document in Brazil.
408,,^1+0+$,"A simple regular expression to determine if a subnet mask is contiguous; that is, the submask must start with a 1 bit followed by 0 or more 1 bits, followed by 1 or more 0 bits until the end of the submask."
409,,^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((1[6-9]|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$,"dd/MM/yyyy with leap years 100% integrated
Valid years : from 1600 to 9999

As usual, many tests have been made.
I think this one should be fine.

"
410,,"^\d{1,5}(\.\d{1,2})?$",validate a number 5 digits and 2 decimal places allowing zero
411,,"(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$",validates  to 5 digits and 2 decimal places but not allowing zero
412,,^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$,A general string validation to insure that NO malicious code or specified characters are passed through user input.  This will allow you to input any characters except those specified.  The expression above does not allow user input of &lt;&gt;`~!/@\#}$%:;)(_^{&amp;*=|'+. Input as many invalid characters you wish to deny.  This really works!
413,,"^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$","More permissive than others on the site, this one allows you to let a user enter US phone numbers in the way they most commonly use, without letting them enter non-valid combinations."
414,,"^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$",Matches a comma-seperated list of year(s).
416,,^(((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((02)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((02)(\.|-|\/)(29)([-./])([02468][048]00))|((02)([-./])(29)([-./])([13579][26]00))|((02)([-./])(29)([-./])([0-9][0-9][0][48]))|((02)([-./])(29)([-./])([0-9][0-9][2468][048]))|((02)([-./])(29)([-./])([0-9][0-9][13579][26])))$,This works for all accept 01/01/0000 mainly 0000. can anybody suggest a solution.
417,,^((\d{5}-\d{4})|(\d{5})|([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[A-Za-z]\s?\d[A-Za-z]\d))$,"Regular expression for US (ZIP and ZIP+4) and Canadian postal codes.  It allows 5 digits for the first US postal code and requires that the +4, if it exists, is four digits long.  Canadain postal codes can contain a space and take form of A1A 1A1.  The letters can be upper or lower case, but the first letter must be one of the standard Canadian zones: A,B,C,E,G,H,J,K,L,M,N,P,R,S,T,V,X,Y."
418,,^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$)))),"I wrote this regular expression because a project I was working on required a stricter validator on social security numbers. There are actually gov't standards on what is a valid social: The first 3 digits can't be &gt; 779, The first 3 digits can't be 000, The second 2 digits can't be 00, and the last 4 digits can't be 0000. This regex handles all these cases and checks formatting for numbering and dashes (###-##-####)"
419,,^[a-zA-Z_]{1}[a-zA-Z0-9_]+$,This expression validates for valid C# or C++ identifier
420,,^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$,"This will match single numbers,the first block [1346] checks for single digits of 1, 3, 4 or 6, could easily by [1-5] as well. The second block [10] checks for 10 only.
This matches inclusively."
421,,^[A]$|^[C]$|^[D]$|^[F]$|^[H]$|^[K]$|^[L]$|^[M]$|^[O]$|^[P]$,This is for matching Single uppercase Letters inclusively
422,, (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) ,"this is a very little regex for use within a content management software.  links within textfields has not to be written in html.  the editor of the cms is instructed to use it like this:  1. mention spaces in front and behind the url  2. start url with http://, mailto://, ftp:// ...  3. use optional linktext within #linktext# (separated with single space)  4. if there is no linktext the url/email will show up as linktext  5. avoid url with spaces in filename (use %20 urldecode)   replace pattern (space in front):   &lt;a href=&quot;\\1\\3\\4&quot; target=&quot;_blank&quot;&gt;\\3\\6&lt;/a&gt;"
423,,(^\-?[0-9]*\.?[0-9]+$),"Hi, this is my first try at regular expressions. I was having trouble understanding the syntax and finally I got it work!"
424,,"^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$",This regular expression will match on a real / decimal / floating point / numeric string with no more than 2 digits past the decimal.  The negative sign (-) is allowed.  No leading zeroes or commas.  It is based on a currency regular expression by Tom Persing.
425,,"^([a-zA-Z]\:|\\\\[^\/\\:*?""<>|]+\\[^\/\\:*?""<>|]+)(\\[^\/\\:*?""<>|]+)+(\.[^\/\\:*?""<>|]+)$",This regular expression match any valid file path. It checks local drives and network path. The file extension is required.
430,,"\d{1,3}.?\d{0,3}\s[a-zA-Z]{2,30}\s[a-zA-Z]{2,15}",Street Address. While far from perfect it validates street addresses reasonably. Created with absolutely no experience using a cool tool downloaded from http://www.codeproject.com/dotnet/expresso.asp?target=e%20xpresso
431,,<[^>]*>,"HTML Pattern Matching

PLEASE HELP

/&lt;[^&gt;]*&gt;/ig
The above pattern is only successful when html tag are simple (they don't include any javascript).  This mean that the pattern will fail if something like this is within the tag &lt;input type=button value=test onclick='if(n.value&gt;5)do_this();'&gt;.  It will not match the entire open n close sign.

How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a &gt; within a '' or &quot;&quot;.

&lt;input type=button onclick='if(n.value&gt;5)do_this();'&gt; not this &lt;br&gt;
&lt;input type=button onclick=&quot;n&gt;5?a():b();&quot; value=test&gt; not this &lt;br&gt;
&lt;input type=button onclick=&quot;n&gt;5?a(\&quot;OK\&quot;):b('Not Ok');&quot; value=test&gt; not this &lt;br&gt;
&lt;input type=button onclick='n&gt;5' value=test onmouseover=&quot;n&lt;5&amp;&amp;n&gt;8&quot; onmouseout='if(n&gt;5)alert(\'True\');else alert(&quot;False&quot;)'&gt; not this &lt;br&gt;


Any help would be greatly appreciate.  Thanks a whole lot.

Logan"
432,,^([0-9]*\-?\ ?\/?[0-9]*)$,"Match italian telephone number with prefix followed by &quot;/&quot;, &quot;-&quot; or blank and number. Usefull with numeric keybord!"
433,XML Tag,"<(\w+)(\s(\w*="".*?"")?)*((/>)|((/*?)>.*?</\1>))","This RE will match XML tag elements.  All elements must be closed. Won't match nested tags
"
435,,&lt;(.*?)&gt;,"Can anyone help me with this problem?  I want X to give me the correct index of &gt;.  For example if this is my code:

var MsgString=&quot;&lt;button onclick='4&gt;5?a():b();'&gt;&quot;;
X=MsgString.search(/&gt;/ig);

X will give me 18 instead of 30.  How can I get it to ignore &gt; that are within quotes?  Please help.  I would really appreciate it if anybody could give me some advice.  Thanks so much.

-Logan"
436,,"(\d{4,6})",Simple Postcode - this is the first test of the new WebService :-)
438,,^(\d+|[a-zA-Z]+)$,"Tests for all numbers OR all letters (upper or lower case)

( posted from WebService - http://regexlib.com/webservices.asmx?op=Save )
( updated from WebService - http://regexlib.com/webservices.asmx?op=Save )"
439,,^\d{5}(\d{3})?$,"Brazilian CEP. A variable of others validations, but only numbers are allowed.  
  
"
445,,(?s)/\*.*\*/,
446,,^[0-9]{5}([\s-]{1}[0-9]{4})?$,"My first Expression. This will match US postal codes (zip codes) using simple 5 digit format with optional 4 digit extention seperated by a space or hyphen. Will not accept letters.
example: 12345 or 12345-1234 or 12345 1234."
454,,^[a-z]+[0-9]*[a-z]+$,
455,,(\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}),"Credit card validator 
Works for switch card numbers too

Switch card bit is (\d{6}[-\s]?\d{12})
Credit card bit is (\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})

I use this as a client side test before running a more comprehensive server side check."
456,,\.com/(\d+)$,This is a regex I wrote to capture requests to AspAlliance.com with an article id as the only thing after the domain.  So http://aspalliance.com/123 would go to article number 123.  It maps the URL to the actual aspx file that displays the article based on the ID.
457,,.*?$(?<!\.aspx),"Matches a string to ensure that it does not end with .aspx; sure, you'd probably use string handling to do something this simple but, in the real world you'd whack a regex which validates a valid url to the front of this.

The pattern was created by Wayne King; you can read about it here:

http://scottwater.com/blog/posts/10204.aspx "
458,Phone Numbers,^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*$,This regular expressions matches phone numbers with area codes and optional US country code and optional phone extension.  User have so many ways of entering phone numbers into input fields.  This allows for some of the ones I've encountered.  Feel free to contact me if you find ones that do not match.
459,,^[0-9]{5}([- /]?[0-9]{4})?$,US Zip Code + 4 digit extension Postal Code
460,,"(.)\1{2,}","matches any string  with characters repeated more than twice, sometimes used as fake input"
461,,^p(ost)?[ |\.]*o(ffice)?[ |\.]*(box)?[ 0-9]*[^[a-z ]]*,This expression is useful for determining if an address is a PO Box type address. This can be useful in shipping systems as well as other systems that need to  make determinations based on the type of address imputed.
462,Font Sizes,^\d+\x20*([pP][xXtT])?$,"It can be used to validate Font Sizes.

Thanks to Gideon Engelberth for the shorter version of my original expression."
463,ISBN-10,"ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$",This RE validates the format of an ISBN number
464,,<([^\s>]*)(\s[^<]*)>,"grab all tags attributes...

&lt;img src=&quot;truc&quot;&gt; returns :
&lt;
(1:img)
(2: src=&quot;truc&quot;)
&gt;
i use it to clean html pages to grab infos...

use a RegEx Replace with &quot;&lt;$1&gt;&quot; to keep only tags codes..."
465,,<([^<>\s]*)(\s[^<>]*)?>,"All tags in first submatche
All attributes in second one..."
466,,^((Bob)|(John)|(Mary)).*$(?<!White),"&quot;Starts with but does not end with.&quot;

I needed a pattern to require certain first (and optional middle) names, but to fail for certain last names. So if Bob, John, and Mary are acceptable first names but the White's are always rejected then... 
"
469,,[^!~/&gt;&lt;\|/#%():;{}`_-],"Trying to remove all these characters in the regular expression: still working on it

!~/[&gt;&lt;*\|]/#$%^&amp;():;{},?`_-"
470,,"^([\s\S]){1,20}([\s\.])","This pattern returns as much of the first x characters of a string as full words or sentences as a match, where x is currently 20. Change x to adjust the length supported in your database field.
I'm currently using this within a string shortening utility to shrink large text regions to word/sentance-boundary elements and appending an ellipsis as a text continuator."
473,,^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$,This pattern match italian fiscal code (codice fiscale).
474,,(\w(\s)?)+,"Used to verify that the string consists of only A-z, 0 - 9 and underscore. Several words allowed, only one space between them. No spaces up front. Hey, I know it's easy, but it was not in the library! Plus, the test option here is not working well all the time."
476,,^(Function|Sub)(\s+[\w]+)\([^\(\)]*\),"Updated, changed [\w]* to [\w]+ because pattern should not match Sub (), there would be no function name which would be incorrect.

Will extract function declarations from ASP or also VB I assume. Will even capture declarations that break across new lines or ones that use the underscore(line continuation character) in Microsoft's VB, VBA, ASP, etc. Had to put this together to document some code on a project and didn't see anything like it on the web. I hope it helps out anyone else who has to re-engineer ASP or VB code. "
477,,regex,This pattern matches..
478,,"^(\(?\d\d\d\)?)?( |-|\.)?\d\d\d( |-|\.)?\d{4,4}(( |-|\.)?[ext\.]+ ?\d+)?$","Basic US phone number matching pattern.  I found this place and used a regex, so figured I'd share."
479,,^(([8]))$|^((([0-7]))$|^((([0-7])).?((25)|(50)|(5)|(75)|(0)|(00))))$,Time off hours edit for quarter hour(s) less than eight.
480,,(^\d{5}$)|(^\d{5}-\d{4}$),"I know its probaly in the library, but i did not see it.

US zip pattern

5 digits 01234 or 5 digits + 4 01234-1234"
487,,^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$,This pattern validates ISBN numbers.  I've written a full description about it here:  http://regexblogs.com/dneimke/posts/201.aspx
488,,^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/(\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/(\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/(\d{2}))|(29\/02\/((0[48]|[2468][048]|[13579][26])|(00))))$,"Matching : dd/MM/yy
Leap years compatible
Italian style, just for more fun.
Please, don't forget to rate it if you use it. THX
"
489,,.*[\$Ss]pecia[l1]\W[Oo0]ffer.*,Spam stopper
490,,.*[Vv][Ii1]agr.*,Spam Stopper
491,,.*[Oo0][Ee][Mm].*,Spam Stopper
492,,.*\$AVE|\$ave.*,Spam Stopper
493,,.*[Pp]re[Ss\$]cr[iI1]pt.*,Spam Stopper
494,,.*[Pp]en[Ii1][\$s].*,Spam Stopper
495,,"^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$",Matches UK phone numbers - London and regional. It started off with something fairly short posted by liljim at www.forums.devshed.com but I wanted a little more precision to weed out all the zeros. Now it also weeds out premium phone numbers (as of 19/12/03).
496,,^(0)$|^([1-9][0-9]*)$,This regular expression matches on postive whole numbers and 0.  Whole numbers that are left padded with 0's are not a match.
499,,"^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)?(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&amp;%\$#\=~_\-@]*)*$","None of the other URL regex's seemed to work right for me, so i threw this together. works well with PHP's ereg()."
500,,((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$)),"Matches on MMDDYYYY only, requires all 8 digits"
501,,"^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*$",Ok here's an updated URL regex for you folks. It allows localhost and all TLDs. Feel free to add each country code individually if you want a tighter match.
502,,"^\d{1,7}$",Positive Whole number matched from 0 to 9999999. Only 7 digits length is allowed.
503,,^\d{3}\s?\d{3}\s?\d{3}$,"Social Insurance Number validator.  
Canadians only need apply.

If somebody could help me (I'm bad at regex), I would like to modify this so that if there is one space after the 3rd digit (or 6th) then there must be one after the 6th (or third).  "
506,Resale License Number (CA),"^((([sS][r-tR-Tx-zX-Z])\s*([sx-zSX-Z])?\s*([a-zA-Z]{2,3}))?\s*(\d\d)\s*-?\s*(\d{6,7}))$","California Resale License number validator. Validates Letters and Numbers or Number only. Letters: First 2 letters can be SR, SS, ST , SX, SY, SZ (TAT Code)  Next optional letter can be S,X,Y,Z.  Next letters must be a minimum of two and a maximum of 3 (District Code).  Numbers:  Can be 8-9 numbers. Numbers can be delimited with a hypen or spaces after the first 2 numbers.  Note: I use () to extract the information I want for use in other scripts."
507,,^[a-zA-Z0-9_\s-]+$,"This tests an input string for only a-z and A-Z and only allows underscores, hyphens and spaces.  The purpose is to force users to generate legitimate, readable file names that can be streamed from the web."
508,,^DOMAIN\\\w+$,"In response to a question on the regex list at www.aspadvice.com, this expression should ensure that a login field's username includes a 'DOMAIN\' prefix.  The latter part of the expression should probably be limited so that it only allows usernames of appropriate lengths, perhaps 3 to 20 characters (by replacing + with {3,20} for instance)."
509,,"^\W{0,5}[Rr]e:\W[a-zA-Z0-9]{1,10},\W[a-z]{1,10}\W[a-z]{1,10}\W[a-z]{1,10}","Simple email subject line matching. This regex matches those really annoying emails that begin with 0-5 spaces, followed by a fake reply, contain a random string of letters (usually CAPITALIZED) from 1-10 characters long followed by a comma, and then followed by three lower-case words each from 1-10 characters long. In my experience, the 3 trailing words are always lower-case. the words make begin with, contain, or end in common punctuation marks."
512,,^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(jpg|JPG)$,"It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.jpg

or C:\Windows\Microsoft.NET etc"
513,,^[A-Z]{2}$,Matches two uppercase characters. Simple pattern used in form validation for state inputs (assuming you aren't using a drop-down).
514,,"^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\,*\s\s*\d{4}$|^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\,*\s\d{4}$|^(January|February|March|April|May|June|July|August|September|October|November|December)\,*\s\d{4}$|^(january|february|march|april|may|june|july|august|september|october|november|december)\,*\s\d{4}$","Best Use validation to accept a valid &quot;MonthName(,) Year&quot;.
It can validate an entry with or without comma (,).
"
515,,"(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$","I built this expression to test a string in ASP for valid username and password constraints.  It can be adapted for any number of scenerios.  For instance in this case, we needed to ensure the username someone wanted was not all numbers or all letters and was 6-15 characters in length with no special characters.  This expression tests negatively for all number cases, then all letter cases, and lastly tests for only alphanumeric characters in the required range.  In other words: the match must be alphanumeric with at least one number, one letter, and be between 6-15 character in length.  "
516,,"^(([a-h,A-H,j-n,J-N,p-z,P-Z,0-9]{9})([a-h,A-H,j-n,J-N,p,P,r-t,R-T,v-z,V-Z,0-9])([a-h,A-H,j-n,J-N,p-z,P-Z,0-9])(\d{6}))$","Tests Vehicle Identification Numbers (VINs).  This works for a Mitsubishi cars in the UK - but I have been unable to determine whether the format is for UK vehicles or applies only to this make.  The requirements are that the first 9 characters and the 11th character are alpha-numeric excluding i, I, o or O.  The 10th character is the chassis year, and is alpha-numeric excluding i, I, o, O, q, Q, u, and U.  The final 6 characters are numeric.  The string is 17 characters in length.  Any refinements would be greatly appreciated!"
517,,^[D-d][K-k]-[1-9]{1}[0-9]{3}$,Postalcode Danmark
518,,^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$,"match all danish postal code
update from last danish postal code expression"
519,,^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$,Swedish postcodes (as far as i know)
520,,(\[(\w+)\s*(([\w]*)=('|&quot;)?([a-zA-Z0-9|:|\/|=|-|.|\?|&amp;]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&amp;|\s]+)(\[\/\2\]),"Peseudo-HTML code matcher. Allows for one parameter within the first tag (name is optional), the value of which can be optionally delimited by either double or single quotes. Uses backreferencing to ensure that the end and start tags match, and that any single or double quotes match. Very useful for web forums or any situation where users may be prompted to enter text for display on a webpage somewhere, as it can be quickly processed into HTML without allowing HTML to be specified within the input itself (which may pose a security risk). "
521,,"^[a-zA-Z\d]+(([\'\,\.\- #][a-zA-Z\d ])?[a-zA-Z\d]*[\.]*)*$","Address
It has now been enhanced to accept # too!!"
522,,"^[a-zA-Z]+(([\'\,\.\-][a-zA-Z])?[a-zA-Z]*)*$",This allows you to validate first names and last names in seperate fields.  Instead of validating a full name in one field.
526,,"^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$","Canadian Postal Code / Codes / Canada / Zip

Google for DFIOQU and you'll see where I got the
info for this.

Can anyone simplify this?
"
527,,"^[A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[A-DFM]{0,1}$","UK National Insurance Number (NINo) validation. The following modifications have been made: The first letter may not be D, F, I, Q, U or Z; the second letter may not be D, F, I, O, Q, U or Z; the final letter is optional."
528,Web Colors (216),^#?(([fFcC0369])\2){3}$,Matches the 216 web colors with or without the '#' sign.
529,,^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$,"Used to validate Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, ,or nothing"
530,,"^([\+][0-9]{1,3}[\.][0-9]{1,12})([x]?[0-9]{1,4}?)$","Validates on the following standards:

+CCC.ZZZZZZZZZZxYYYY, where 'C' is the numeric 
country phone code (up to three digits), 'Z' is the phone number (up to 
12 digits) and 'Y' is the extension (up to 4 digits); max length overall is 
20 characters, including the '+', '.', and 'x' (if extension is present). 

Useful for people communicating with the OpenSRS API"
531,,^([a-zA-Z '-]+)$,"Check if the text is a valid firstname or lastname.It allows Characters,'- and space only"
532,,"&amp;(?![a-zA-Z]{2,6};|#[0-9]{3};)","The goal of this regular expression is to replace all &amp; (ampersand) characters by &amp;amp; if they are not the start of HTML entities. I used
http://www.w3schools.com/html/html_entitiesref.asp as a reference. You can then use RegExp Replace method to do the work. Was helpful for me, might helpful be for you..."
533,,"^((([a-zA-Z\'\.\-]+)?)((,\s*([a-zA-Z]+))?)|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})))(;{1}(((([a-zA-Z\'\.\-]+){1})((,\s*([a-zA-Z]+))?))|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})){1}))*$","This regular expression matches a series of names and/or email addresses much like you would do in Outlook's To field (e.g. To: wrohrbach@carlson.com;miles, er;roemer;lagrander, nitra). The first entry must be a name (in the form of last name followed by a comma and first name) or an email address. The following entries are a semicolon followed by one name or email address. The comma and first name are optional components of the name part."
534,,^([0-9]{2})(00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6])$,Matches a Julian date in the format YYDDD.  Two digit year followed by a number from 1 - 366 indicating the day of the year.
535,Social Security Number,^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$,"This regex validates U.S. social security numbers, within the range of numbers that have been currently allocated. "
541,Email,"^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$","regex to validate email address

noteworthy: 
(1) It allows usernames with 1 or 2 alphanum characters, or 3+ chars can have -._ in the middle. username may NOT start/end with -._ or any other non alphanumeric character. 

(2) It allows heirarchical domain names (e.g. me@really.big.com). Similar -._ placement rules there. 

(3) It allows 2-9 character alphabetic-only TLDs (that oughta cover museum and adnauseum :&gt;). 

(4) No IP email addresses though -- I wouldn't Want to accept that kind of address. "
543,,"^\d+(?:\.\d{0,2})?$","Matches positive whole numbers with exactly zero or two decimal points if a . is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25. "
544,,src[^&gt;]*[^/].(?:jpg|bmp|gif)(?:\&quot;|\'),"This expression will return the src (source) property of an image tag &lt;IMG&gt;. The source returned is limited to the file extensions supplied. It doesn't matter if the image is prefixed with '../' or 'http://..blah' or 'drive\path' or nothing. This expression could be modifed to return other sources or for the tags (ie &lt;BGSOUND&gt;, &lt;SCRIPT&gt;, etc.) depending on the file extensions given.

I needed this to replace the source of images in a HTML page when I wanted to save the page to a local drive and keep the images intact.

If anybody could modify this further to include only the &lt;IMG&gt; tag, I would appreciate the effort."
548,,[0-9A-Za-z],ONLY PURE string and numric only
549,,[^A-Za-z0-9],"To detect non-alphanumeric characters (for new username/password validation, for instance):

monkey(AT)greyledge.net
14-Oct-2003 11:26"
550,,"[a-z0-9]{1,11}","PHP/Perl based regular expression: find aplhanumeric only(alpha and numeric only) (string and numeric only)       
but it will not find the empty string as it has to find string between 1 to 11 length."
553,,^([a-zA-Z]+(.)?[\s]*)$,This regular expression matches titles. The length of the title has not been restricted. It allows only alphabets in the title and takes zero or one . after the title. Also it allows trailing spaces.
554,,(&#192;|&#193;|&#194;|&#195;|&#196;|&#197;|&#224;|&#225;|&#226;|&#227;|&#228;|&#229;|&amp;#097;|&amp;#065;|&amp;#064;|&amp;commat;|&amp;alpha;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#195;|&amp;#196;|&amp;#197;|&amp;Agrave;|&amp;Aacute;|&amp;Acirc;|&amp;Atilde;|&amp;Auml;|&amp;Aring;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#227;|&amp;#228;|&amp;#229;|&amp;agrave;|&amp;aacute;|&amp;acirc;|&amp;atilde;|&amp;auml;|&amp;aring;),"spam stopper, catches non english language flocks for letter A"
555,,(&#200;|&#201;|&#202;|&#203;|&#232;|&#233;|&#234;|&#235;|&amp;#069;|&amp;#101;|&amp;#200;|&amp;#201;|&amp;#202;|&amp;#203;|&amp;Egrave;|&amp;Eacute;|&amp;Ecirc;|&amp;Euml;|&amp;#232;|&amp;#233;|&amp;#234;|&amp;#235;|&amp;egrave;|&amp;eacute;|&amp;ecirc;|&amp;euml;),"Spam stopper, catches non english characters used in flocks."
556,,(&#161;|&#204;|&#205;|&#206;|&#207;|&#236;|&#237;|&#238;|&#239;|&amp;#033;|&amp;#161;|&amp;iexcl;|&amp;#185;|&amp;sup1;|&amp;brvbar;|&amp;Igrave;|&amp;Iacute;|&amp;Icirc;|&amp;Iuml;|&amp;igrave;|&amp;iacute;|&amp;iuml;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#207;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#239;|&amp;#073;|&amp;#105;),"Spam stopper, catches any non english characters for i used in flocks "
557,,(&#210;|&#211;|&#212;|&#213;|&#214;|&#216;|&#240;|&#242;|&#243;|&#244;|&#245;|&#246;|&#248;|&amp;#048;|&amp;#079;|&amp;#111;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#213;|&amp;#214;|&amp;#216;|&amp;Ograve;|&amp;Oacute;|&amp;Ocirc;|&amp;Otilde;|&amp;Ouml;|&amp;Oslash;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#245;|&amp;ograve;|&amp;oacute;|&amp;ocirc;|&amp;otilde;|&amp;ouml;|&amp;oslash;),"Spam stopper, catches any non english characters used for o in flocks"
558,,(&#217;|&#218;|&#219;|&#220;|&#249;|&#250;|&#251;|&#252;|&#181;|&amp;#085;|&amp;#117;|&amp;#181;|&amp;micro;|&amp;#217;|&amp;#218;|&amp;#219;|&amp;#220;|&amp;Ugrave;|&amp;Uacute;|&amp;Ucirc;|&amp;Uuml;|&amp;#249;|&amp;#250;|&amp;#251;&amp;#252;|&amp;ugrave;|&amp;uacute;|&amp;ucirc;|&amp;uuml;),"Spam stopper, catches any non english characters for u used in flocks"
563,,^http://([a-zA-Z0-9_\-]+)([\.][a-zA-Z0-9_\-]+)+([/][a-zA-Z0-9\~\(\)_\-]*)+([\.][a-zA-Z0-9\(\)_\-]+)*$,A very crude url pattern.
565,,^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$,"Validates date format by DD MMM YYYY. Validates days for each month also.
Ensures that month is uppercase."
566,,\b(foo bar)\b(?!((?=&lt;a href='[^'][^&gt;]'&gt;).)*?&lt;/a&gt;),I re wrote a template here http://www.regularexpressions.info/lookaround3.html so that this regular expression will capture keywords that are not between anchor tags.
567,,^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$,
568,,"^(\d|,)*\d*$",matches 0 and all positive integers only. will accept comma formatting only.
569,,"%[\-\+0\s\#]{0,1}(\d+){0,1}(\.\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}",This regular expression matches &quot;c&quot; format strings for printf/scanf functions. 
570,,^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}(\-| |){1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}$,This expression will help match Quebec's postal codes.
571,,.\{\d\},String formater matching.
573,,"^([0-9]*\,?[0-9]+|[0-9]+\,?[0-9]*)?$",Integer numbers with decimals. Only positives match. This expression doesn't match numbers with group separators
574,,"^(\d{1,2})(\s?(H|h)?)(:([0-5]\d))?$",Validates hours and minutes. Allows for entry in the form of hours:minutes with optional minutes and optional hours indicator (H or h).
575,,"^(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?$","validates numbers, with or without decimal places, and comma 1000 separators."
576,,"^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$","Validates numeric input of 99,999,999 to 0 with or without commas. but no decimal places. Very simple, but not bad for a novice."
578,,((([0][1-9]|[12][\d])|[3][01])[-/]([0][13578]|[1][02])[-/][1-9]\d\d\d)|((([0][1-9]|[12][\d])|[3][0])[-/]([0][13456789]|[1][012])[-/][1-9]\d\d\d)|(([0][1-9]|[12][\d])[-/][0][2][-/][1-9]\d([02468][048]|[13579][26]))|(([0][1-9]|[12][0-8])[-/][0][2][-/][1-9]\d\d\d),Date validation in the dd/mm/yyyy format for years 1000+ (i.e 999 or 0999 not matching) and taking february leap years into account.
579,,"(^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)","Matches either an explicitly input percentage or dollar amount, variety of formats of currency borrowed from another example on this board. This is useful when you want to prompt the user to specify either dollars or percent using only one field, and want to validate the entered text is one or the other."
580,,"^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}","This regex can be used to restrict passwords to a length of 8 to 20 aplhanumeric characters and select special characters. The password also can not start with a digit, underscore or special character and must contain at least one digit."
583,,"^[A-Za-z]{1,2}[\d]{1,2}([A-Za-z])?\s?[\d][A-Za-z]{2}$","UK Postal Codes - The code is normally written in capital letters with a space between the outer and inner parts; it is understandable if the space is omitted.

This regular expression validates upper or lower case with or without the space:
"
584,,"^[-\w`~!@#$%^&amp;*\(\)+={}|\[\]\\:&quot;;'&lt;&gt;?,.\/ ]*$","Make sure string only contains characters that appear on keyboard.  Extended characters (such as those with ascii values above 127), will not pass the test."
585,,^[A-Z].*$,Test string to verify it begins with an upper-case letter.
586,,^[+][0-9]\d{2}-\d{3}-\d{4}$,"This is a basic telephone number vaildation which needs a compulsory prefix of a '+' sign with three digits and followed by a hipen, another three digits and finally followed by another hipen and four more digits. 
Regards,
Senthil Gunabalan"
587,,"^([+]39)?((38[{8,9}|0])|(34[{7-9}|0])|(36[6|8|0])|(33[{3-9}|0])|(32[{8,9}]))([\d]{7})$",Validates a Italian mobile phone number with (or without) the International code
588,,^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\d{3}[- .]?\d{4}$,"U. S. or Canadian telephone number regular expression. &lt;BR&gt;
&lt;BR&gt;
   //           # Checks phone numbers for validity                           &lt;BR&gt;
   //  [01]?    # optional '0', or '1'                                        &lt;BR&gt;
   //  [- .]?   # optional separator is either a dash, a space, or a period.  &lt;BR&gt;
   //  \(?      # optional parentheses                                        &lt;BR&gt;
   //  [2-9]    # first # of the area code must not be a '0' or '1'           &lt;BR&gt;
   //  \d{2}    # next 2 digits of area code can be 0-9                       &lt;BR&gt;
   //  \)?      # optional parentheses                                        &lt;BR&gt;
   //  [- .]?   # optional separator is either a dash, a space, or a period.  &lt;BR&gt;
   //  \d{3}    # 3-digit prefix                                              &lt;BR&gt;
   //  [- .]?   # optional separator is either a dash, a space, or a period.  &lt;BR&gt;
   //  \d{4}    # 4-digit station number                                      &lt;BR&gt;
"
589,,^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$,"UK phone number. Allows 3, 4 or 5 digit regional prefix, with 8, 7 or 6 digit phone number respectively, plus optional 3 or 4 digit extension number prefixed with a # symbol. Also allows optional brackets surrounding the regional prefix and optional spaces between appropriate groups of numbers."
590,,"(^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)",This pattern matches a decimal value with up to 3 digits after the decimal. Comma is allowed as a thousands separator but not required. N/A is also allowed.
591,,"^((((0?[13578])|(1[02]))[\/|\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\/|\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\/\-]?(0?[1-9]|[0-2][0-9])))[\/\-]?\d{2,4}$","After looking for a date regular expression, I could not find one that meet my need, so I develop one that handles 1 or 2 digets in the month and day and also handle feb up to 29.  This will allow both / and - for separators, which is what I needed.  I hope this helps others too.  Thanks,

Cliff Schneide"
592,,^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$,"UK mobile phone number, with optional +44 national code. Allows optional brackets and spaces at appropriate positions."
593,,^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$,Modified version of UK phone number regular expression. Now allows +44 national code in addition to extension numbers of 3 or 4 digits. Previous expression was: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$
594,,[0][x][0-9a-fA-F]+,Matches hexadecimal values like in c-sourcecode exists.
595,,^([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3}$,"UK vehicle registration system currently in use (as defined by the DVLA and put into effect from September 2001, and therefore does not allow registrations prior to this date)."
596,,^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})$,"UK vehicle registration system prior to September 2001. Allows both older suffix and the later prefix formats in simple form, with optional spaces."
597,,"^([1-9]{1}[0-9]{0,7})+((,[1-9]{1}[0-9]{0,7}){0,1})+$","Validate a comma delimited string of integer between 1 and 99999999 (change {0,7} to whatever you need). No zero leading."
598,,"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}$","Password matching expression. Password must be at least 8 characters, no more than 15 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit. "
599,,"^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$","Email validation based on Rob Eberhardt's (Thanks, Rob!) email expression, but allows single letter subdomains..."
600,,"^((?:(?:(?:\w[\.\-\+]?)*)\w)+)\@((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$","Not a 100% email validation. It doesn't work with IP-Adresses, but it's good for most common cases. At least I hope so."
601,Alphanumeric Expression ,^[a-zA-Z0-9\s]+$,Alphanumeric expression with spaces
602,,"^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$","A regular expression that validates the any format of fixed telephone numbers inside Lima - Peru, including an optional extension of at least one number up to four numbers."
603,,^([8-9])([1-9])(\d{2})(-?|\040?)(\d{4})$,"A regular expression that validates the any of the new formats of cellular phones numbers in Peru, allows an optional dash in the middle of the number."
604,,"^(\$)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$","This pattern handles currency including the following:

optional period with two or more digits to the right of the period

optional commas

optional dollar sign($)"
605,,^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$,"Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator. 

Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms. 

FYI, the fictitious 555- numbers used in the movies and TV are only in the range of 555-0100 through 555-0199. Not very many, huh?"
606,Currency,"^(?!\u00a2)  #Don't allow cent symbol
 \p{Sc}?     #optional unicode currency symbols
 (?!0,?\d)   #don't allow leading zero if 1 or more unit
 (\d{1,3}    # 1 to 3 digits
 (\,\d{3})*  # if the is a comma it must be followed by 3 digits
|(\d+))      # more than 3 digit with no comma separator
(\.\d{2})?$  # option cents",This regex validates Currency. The base monetary unit (ex. US dollar) followed by option two digit cent denomination. Base unit can't have leading zero. Comma's are optional on base units. Note: Your regex engine must support the \p character class to use this. For example this will work in .net but not javascript which doesn't support \p Also the &#162; is removed from the match by force. Any other cent symbol would need to be added to the exclude to not match.
607,,^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$,"US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-1212, etc. You can add/remove formatting options to meet your needs."
608,,"^((?:(?:(?:[a-zA-Z0-9][\.\-\+_]?)*)[a-zA-Z0-9])+)\@((?:(?:(?:[a-zA-Z0-9][\.\-_]?){0,62})[a-zA-Z0-9])+)\.([a-zA-Z0-9]{2,6})$","Captures Submatches, problem:domainname length can be longer than 64 chars, because every [a-zA-Z0-9][\.\-_] is only countet as one char."
609,,"^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$","Validates a date expression (or empty value) in CCYYMMDD format, checking a leap year from 00000101 A.D. to 99991231"
610,,"^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$","DateTime Validator. This RE validates both dates and/or times patterns. Days in Feb. are also validated for Leap years. Dates: in  dd/mm/yyyy or d/m/yy format between 1/1/1600 - 31/12/9999. Leading zeroes are optional. Date separators can be either matching dashes(-), slashes(/) or periods(.) Times: in the hh:MM:ss AM/PM 12 hour format (12:00 AM - 11:59:59 PM) or hh:MM:ss military time format (00:00:00 - 23:59:59). The 12 hour time format: 1) may have a leading zero for the hour. 2) Minutes and seconds are optional for the 12 hour format 3) AM or PM is required and case sensitive. Military time 1) must have a leading zero for all hours less than 10. 2) Minutes are manditory. 3) seconds are optional. Datetimes: combination of the above formats. A date first then a time separated by a space. ex) dd/mm/yyyy hh:MM:ss This RE is an variation of one of my other Datetime (mm/dd/yyyy) validator already in this library http://www.regexlib.com/REDetails.aspx?regexp_id=369, so the same rules for leap year apply. All 4 digit year and all two digit years except 00, which might not be a leap year."
612,,(^([0-9]+[.]+[0-9]+)|(0)$),"Wrote this to accept either decimals or zero, but not whole numbers - for a particular project..."
613,Quoted string,^(\x22|\x27)((?!\1).|\1{2})*\1$,"The regex validate a quoted string in VBScript or Ansi SQL.  The string may contain the containing quote character if it is escaped by being doubled up. 
In VB/VBScript two double quotes within a string enclosed in double qoutes translate into one double quote within the string
In SQL two single quotes within a string enclosed in single qoutes translate into one single quote within the string "
615,,"^1000([.][0]{1,3})?$|^\d{1,3}$|^\d{1,3}([.]\d{1,3})$|^([.]\d{1,3})$",allows positive none-to-3-decimal values between 0.000 and 1000.000
616,,"^(\-)?1000([.][0]{1,3})?$|^(\-)?\d{1,3}$|^(\-)?\d{1,3}([.]\d{1,3})$|^(\-)?([.]\d{1,3})$",allows positive and negative none-to-3-decimal values between -1000.000 and 1000.000
617,,^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})$,"UK vehicle registration system. This is the obvious combination of two previous expressions posted here, to merge the older system with the current system."
618,,^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$,
622,,"^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&amp;%\$#\=~_\-]+))*$","Version 1.3.0: I needed a regexp to validate URL's without the ht(f)tp(s):// and include North American domains (like .us and .ca) and there didn't seem to be one available...so I created one. It will also work with ASP QueryStrings and anchor URL's. If you have a problem with the expression or have any suggestions to improve, please write me and let me know. Added .uk domain and expression now allows for URLs that contain JSP session IDs. 4/14/04 - added ability to include URLs that start with server names."
623,,\d{5}\-\d{3},Brazilian Postal Box RegExp validation
624,,(^[a-zA-Z0-9]+://),Use in a .net Regex.Split() to pull the protocol out of a url into the first array entry.
625,,"^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$","currency format that allows optional $, optional &quot;-&quot;(MinusSignNegative) OR &quot;()&quot; (ParenNegative) but not both, optional cents, and optional commas separating thousands. Minus sign can be before or after $, but parens must be outside the $. UPDATED: now fails to match a &quot;$&quot; without any further numbers"
627,,"^((\d{1,2})?([.][\d]{1,2})?){1}[%]{1}$",for checking a value is between 99.99% and 00.00%
630,,(^[A-Za-z])|(\s)([A-Za-z]),"This expression will return the first letter of each word in a string. Best used if you need to get initials from a name.
&quot;James Kramer&quot; = &quot;J K&quot; &amp; &quot;Sir Richard Branson&quot; = &quot;S R B&quot; &amp; &quot;33 yoYo 654 ma&quot; = &quot;y m&quot;
"
632,,(^\d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}$),Brazilian CNPJ (xx.xxx.xxx/xxxx-xx)
633,,(^\d{5}\-\d{3}$),Brazilian CEP - (XXXXX-XXX)
634,,"(^[0-9]{2,3}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}-[0-9]{2}$)",Brazilian CNPJ
635,,"(?!\.)[a-z]{1,4}$",Matches files extension
636,,"([A-Z&#228;&#246;&#252;0-9\/][^a-z\:\,\(\)]*[A-Z&#228;&#246;&#252;0-9])($|[\.\:\,\;\)\-\ \+]|s\b)","Used to dynamically find acronyms in a sentence. The first pair of brackets gets the acronym, the second gets the text after the acronym."
639,,^(\([0-9]*\)?\ ?\/?[0-9]{4}[0-9]{4})$,Validates and Australian area dial code and telephone number.
640,,^[0-9]{2}-[0-9]{8}-[0-9]$,"This regexp tests Argentinian CUIT / CUIT numbers.

Esta expresi&#243;n regular sirve para validar n&#250;meros de CUIT / CUIL de Argentina."
641,,^(\()?(787|939)(\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$,Filter US telephone numbers.  This particular one accepts only area code 939 or 787.  Area code parentesis or hyphens optional.
642,,"(\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}",Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
643,,"^[A-Za-z]{6}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{3}[A
-Za-z]{1}$",Check italian fiscal code (codice fiscale) with &quot;OMOCODIA&quot; control
646,,"href=[\""\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\""\']",I wrote up this regular expression to fetch the href attribute found in &lt;a&gt; tags as well as a few other HTML tags.
647,,"^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$",
648,,^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$,It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.txt or C:\Windows\Microsoft.NET etc
649,,^[0-9]{6},"I know its simple, yet there was no Russian postal code regular expression on the RegExLib. Just in case some needs to know the format."
651,,^(((\d{4})(0[13578]|10|12)(0[1-9]|[12][0-9]|3[01]))|((\d{4})(0[469]|11)([0][1-9]|[12][0-9]|30))|((\d{4})(02)(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)(02)(29))|(([13579][26]00) (02)(29))|(([0-9][0-9][0][48])(02)(29))|(([0-9][0-9][2468][048])(02)(29))|(([0-9][0-9][13579][26])(02)(29))|(00000000)|(88888888)|(99999999))?$,"it's for date in the format: &quot;yyyymmdd&quot; and it validates the empty string and some special values (00000000,88888888,99999999) but you can delete these last values. It works with leap years."
652,,\xA9,"Matches the copyright symbol (&amp;copy;). Pretty simple, yet I dont think existed on RegExLib before. "
653,," ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$","Validates dates formatted like &quot;dd.mm.yyyy&quot; or &quot;dd.mm.yy&quot;. Also the separators &quot;/&quot; and &quot;-&quot; are validated &quot;ok&quot;. This expression does not check leap years!
I did this expression cause I could hardly find any date regex that supports those &quot;dot-formats&quot;."
654,,"^([A-Za-z0-9]\s?)+([,]\s?([A-Za-z0-9]\s?)+)*$","This regular expression can be used to parse a comma delimited string. Leading whitespaces (at the beginning of the entire string) and ending commas are not acceptable. Any combination of letters and numbers with zero or one white space between them are acceptable. Note: To change the delimiter, simply replace the comma in the square brackets to the delimiter of choice."
655,,"(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)",
656,,"[v,V,(\\/)](\W|)[i,I,1,l,L](\W|)[a,A,@,(\/\\)](\W|)[g,G](\W|)[r,R](\W|)[a,A,@,(\/\\))]","Spam trap
Catches many and many way to write viagra (replacing letters with similar chars, spacing chars with one space, etc)."
657,,"^[0-9]{2,3}-? ?[0-9]{6,7}$",Validates Spain Phones
658,,"^(\+97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$","regex which matches UAE mobile phone numbers.
Its capable to take inputs +97150 3827741, +97-150-3827741, +97150 - 3827741,050 3827741, 050 - 3827741

Enjoy REGEXXXXXXX!!!!!!!"
659,,"^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$","The regex matches the UAE land phone numbers. Checks the area codes[04,02,06...etc] strictly. Force user to input phone numbers in strict manner(it take input 04 3452488, but not 04______spaces_______3452488)"
660,,"(^[a-fA-F]+[+-]?$)
",Letter Grade scores A-F + and -
661,,"^0{0,1}[1-9]{1}[0-9]{2}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$","The regex that matches the telephone numbers in India.


####Enjoy Regex####"
662,,"^((\+){0,1}91(\s){0,1}(\-){0,1}(\s){0,1}){0,1}98(\s){0,1}(\-){0,1}(\s){0,1}[1-9]{1}[0-9]{7}$","The Regex validate the mobile numbers in India.
Gives flexibility to user to enter numbers in different format like
+919847444225, +91-98-45017381, 9844111116, 98 44111112, 98-44111116

###Enjoy REGEX###"
663,,^([a-zA-Z]\:)(\\{1}|((\\{1})[^\\/:*?&lt;&gt;&quot;|]([^\\/:*?&lt;&gt;&quot;|]*(?![ ])))+)$,
664,,^([0-5]?\d?\d?\d?\d|6[0-4]\d\d\d|65[0-4]\d\d|655[0-2]\d|6553[0-5])$,match for 0 - 65535
665,,^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))$,"DD.MM.YY or DD.MM.YYYY
separator could be on choice '.' '/' or '-'

leap years compatible, 00 is treated as year 2000."
666,,^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$,"This regexp has been posted specialy for &quot;Mike O Shea&quot; as he requested a mono digit year validation.

matches DD/MM/Y or DD/MM/YYYY or D/M/Y or DD/M/YYYY
Leap years treated. (Italian style with tomato)
Years 0-9 equal years 2000 to 2009 for leap years"
667,,"^(
    100(?:\.0{1,2})?
    |
    0*?\.\d{1,2}
    |
    \d{1,2}(?:\.\d{1,2})?
)%
$",Matches a percentage between 0 and 100 (inclusive).  Accepts up to 2 decimal places.
668,,"^\$[+-]?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$","This expression is little tricky since the $ sign is includeded in the
		expression itself. So whenever you want to make use of the expression be
		sure to prepend $ sign to the value if it's not present."
669,,^\d+$,This is derived from Steven Smith's Integer expression (http://www.regexlib.com/REDetails.aspx?regexp_id=51). The only difference is that this does not accept blanks. Written by Jason N. Gaylord.
671,,"((\(\d{3,4}\)|\d{3,4}-)\d{4,9}(-\d{1,5}|\d{0}))|(\d{4,12})",telphone number check.
672,,^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$,"Specifier Format of Guid Values that this RegEx supports:  32 digits: [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]  32 digits separated by hyphens: [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]  32 digits separated by hyphens, enclosed in brackets: [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]  32 digits separated by hyphens, enclosed in parentheses: [(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]"
673,,\u2122,"Matches the ™ symbol. Pretty simple, yet I dont think existed on RegExLib before."
674,,\u00AE,"Matches the registered trademark (&#174;). Pretty simple, yet I dont think existed on RegExLib before."
675,,\u00A3,"Matches the British Pound symbol. Pretty simple, yet I dont think existed on RegExLib before. "
676,,\u20AC,"Matches the Euro sign. Pretty simple, yet I dont think existed on RegExLib before."
677,,\u00A5,"Matches the Yen sign. Pretty simple, yet I dont think existed on RegExLib before. "
678,,\u221E,"Matches infinity symbol. Pretty simple, yet I dont think existed on RegExLib before. "
679,,\p{IsBasicLatin},"Matches any character is the Basic Latin Unicode Range \U0000-U007F  (Ascii 0-127)

I've blogged about this and other expressions here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx"
680,,\p{N},Matches numbers.  Note: the second match (?) and the second non-match (IV) are not the same. I cover this in more detail here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
681,,\p{Sm},"Math Symbols.  NOTE: the second examples of match and non-match are not the same.  The non-match is the keyboard dash.  The match is the unicode minus sign.
"
682,,"((\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}(\s(x\d+)?){0,1}$",This will match US most common telephones format with extension or with out extension.  Works with both Java and .NET.
683,,(\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*),"another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced."
684,,(\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*),"another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced."
686,,"^(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk$","UK domain names. Includes the following restrictions from Nominet as at time of posting: 
1.Only a-z, 0-9 and hyphen may be used. 
2.First or last character may not be a hyphen. 
3.Third and fourth characters may not both be hyphens. 
4.Third level domain may not be a single character. 
5.Third level domain may not be two letters or two numbers. 
6.Third level domain may be one letter and one number. 
 
This does not yet include the following restrictions: 
1.Whole domain may not be longer than 64 characters in length. 
2.Third level domain may not duplicate any top/second level domain."
687,,"^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk$","UK domains with protocol for http/https/ftp. Based on my previous expression, this allows the subdomain &quot;www&quot; for the http/https protocols, or &quot;ftp&quot; for the ftp protocol only."
689,,^(?:\([2-9]\d{2}\)\ ?|(?:[2-9]\d{2}\-))[2-9]\d{2}\-\d{4}$,"This US phone number edit with restricted format options: Accepts optional parens on area code with or without following space, and dashes between area code, central office code and station code. Formats include only (222) 555-1212 (with or without a space) and 222-555-1212. Conforms to NANP A-digit and D-digit requirements (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. "
692,,^([0-1]?\d|2[0-3]):([0-5]\d)$,Time in 24h format; minutes must be two digits; hours may be one or two digits
693,,^[0-9]{5}$,Matches german standard postal codes named 'Postleitzahl'
694,,"^((((19|20)(([02468][048])|([13579][26]))-02-29))|((20[0-9][0-9])|(19[0-9][0-9]))-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$",Based on some of the other patterns on RegExpLib. This is the ISO way of writing dates.
695,,"^((([A-PR-UWYZ])([0-9][0-9A-HJKS-UW]?))|(([A-PR-UWYZ][A-HK-Y])([0-9][0-9ABEHMNPRV-Y]?))\s{0,2}(([0-9])([ABD-HJLNP-UW-Z])([ABD-HJLNP-UW-Z])))|(((GI)(R))\s{0,2}((0)(A)(A)))$","Validates UK postcodes  and aligns in parenthesized subpatterns according to standard UK postcode elements. Validation is according to guidelines outlined at http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm
Postcode elements are separated according to description at http://www.graticule.com/data/uk/pcdata.html
Expression is not thoroughly tested, but seems to be doing ok so far!
Comments and improvements welcome."
696,,[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2},"valid values are du or gu or tu or ds or gs or da or ga or
or ta or dq or gq or tq, upper &amp; lowercase "
697,,[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2},"valid values are du or gu or tu or ds or gs or da or ga or
or ta or dq or gq or tq, upper &amp; lowercase "
698,,^([a-z0-9]{32})$,"Matches a md5 hash, simple yet powerful"
699,,^[1-9]{1}[0-9]{3}\s?[A-Z]{2}$,Postcode for the Netherlands
700,,"[a-zA-Z]{3,}://[a-zA-Z0-9\.]+/*[a-zA-Z0-9/\\%_.]*\?*[a-zA-Z0-9/\\%_.=&amp;]*",A simple url search pattern that works against the most generic cases. A little better in terms of matches than the other URL expressions listed.
701,,^(\d{3}-\d{3}-\d{4})*$,"This expression is a very simplex expression that allows null values or 3 digits, dash, 3 digits, dash, 4 digits. It validates a basic US phone number. Written by Jason N. Gaylord."
702,,^(\d{2}-\d{2})*$,"This expression is a simplex expression that checks to see if a value is a valid phone system terminal number. It allows a null value or 2 digits, dash, 2 digits. Written by Jason N. Gaylord."
703,,(\s|\n|^)(\w+://[^\s\n]+),"will match free floating valid protocol + urls in text ... will not touch the ones wrapped in a tag, so that you can auto-link the ones that aren't :) couple of things to know :
1. if the url is next to a tag this won't work (eg : &lt;br&gt;http://www.acme.com), the url must either start with a \s, \n or any character other than &gt;.
2. the pattern will match the preceding \s and \n too, so when you replace put them back in place $1 will either be \s or \n, $2 will be the exact match

vb usage :
set re = New RegExp
re.Pattern =&quot;(\s|\n|^)(\w+://[^\s\n]+)&quot;
strResult = re.Replace(strText, &quot;$1&lt;a href='$2' target='_new'&gt;$2&lt;/a&gt;&quot;)"
704,,"(^(p[\s|\.|,]*|
^post[\s|\.]*)(o[\s|\.|,]*|
office[\s|\.]*))|
(^box[.|\s]*\d+)",This expression filters all variations of Post Office Box or PO Box.
705,,[0-9]{4}[A-Z]{2},"Match for dutch zipcodes.
Dutch zipcodes are always in the format of 4 digits and 2 letters."
708,,"^(((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((20[0-9][0-9]))|((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((19[0-9][0-9]))|(29/02/20(([02468][048])|([13579][26])))|(29/02/19(([02468][048])|([13579][26]))))$","This expression is an improved version of J&#246;rg Maag. It checks a date field in the Australian DD/MM/YYYY format. Besides, it also validates leap year between 1900 and 2099."
709,,"(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))","This is the Brazilian Date Format.
DD/MM/YYYY with the right days per month.
Dates &gt;=1900 &lt;=2999."
710,,"(^\d{3,5}\,\d{2}$)|(^\d{3,5}$)","Expression to validate values to fields Decimal 5,2 or 5 numbers. values &gt;=100,00 &lt;=99999,99

100,00=100
5000,00 = 5000"
712,,^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$,Mathces in format DD-MON-YYYY (hyphen between results). Validates for leap years. Ensures month is in uppercase.
713,,(0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2}),"Essa express&#227;o &#233; uma valida&#231;&#227;o de data simplicada onde n&#227;o aceita datas com ano inferior a 1900. Interessante pra valida&#231;&#227;o de data de idade, data atual, etc"
714,,([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+),
715,,"^[\+\-]?\d+(,\d+)?$",A simple expression for validate in .net RegularExpressionValidator.
716,,^([1-9]|[1-9]\d|100)$,This pattern matches whole numbers 1-100. 
717,,"^(20|21|22|23|[01]\d|\d)(([:.][0-5]\d){1,2})$","24 hour clock as prefered by MS-SQL, allows for shorter more human methods of writing time (no preceding zero or seconds required).
MS-SQL prefers semi-colon although this accepts full stops for users ease of use."
718,,^([0-9]{2})?((\([0-9]{2})\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\-)?[0-9]{4}$,"A simple expression to brazilian phone number code modified expression of Rafael, beyond international code, simple DDI without &quot;+&quot; 99 plus simple DDD (99) plus simple and whitout parentheses em trace, local phone number 3 or 4 digits plus &quot;-&quot; plus 4 digits."
719,,^[a-zA-Z]+((\s|\-)[a-zA-Z]+)?$,This regex validates a persons first name. Acceptable names include compound names with a hyphen or a space in them.
720,,"^[a-zA-Z]+((((\-)|(\s))[a-zA-Z]+)?(,(\s)?(((j|J)|(s|S))(r|R)(\.)?|II|III|IV))?)?$",This regex validates a persons last name. Acceptable names can include compound names seperated by a hyphen or a space.
721,,(((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9])))),This is an new data Validation to MM/YYYY from 1900 to 2999 this is an validation expression  to Client From MOnth/Year.
722,,^(([1-9]{1})|([0-1][0-9])|([1-2][0-3])):([0-5][0-9])$,Matches 24 hour time format.
723,,^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$,Matches 12 hour time format
724,,(^[0]{1}$|^[-]?[1-9]{1}\d*$),"This is a regular expression I used to validate negative and positive WHOLE numbers, including 0."
725,,[:;]{1}[-~+o]?[(&lt;\[]+,I searched for a smiley expression but couldn't find one. This one should find all the usual ways of writing the sad emotion icon.
726,,[:]{1}[-~+o]?[)&gt;]+,This ist the Expression for a happy smiley. It should find all the usual writings of the emotion icon :)
727,,^\d?\d'(\d|1[01])&quot;$,Height notation for feet (') and inches(&quot;)
729,,^-?\d*(\.\d+)?$,"Matches all positive &amp; negative decimal floating point numbers, to any magnitude. Allows empty string."
730,,([2-9JQKA]|10)([\u2660\u2663\u2665\u2666]),"Matches each card in the deck of standard playing cards, not including the Jokers"
733,,.+\.([^.]+)$,Get any file extension...
734,,^[0-9]*[1-9]+$|^[1-9]+[0-9]*$,"This Expression checks if the value is an integer, positive, not zero and not a decimal.

Very handy for use when people need to fill in whole numbers, like when ordering car parts on a website (you dont want your customers to order -10 tires or 0.7 mirrors.."
735,,"\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*","Validates 1 or more email addresses.  Email addresses can be delimited with either comma or semicolon.  White space is allowed after delimiter, but not necessary.  I needed this to allow my users to specify multiple email addresses if they choose to do so."
736,,^(\(?[0-9]{3}[\)-\.]?\ ?)?[0-9]{3}[-\.]?[0-9]{4}$,"Simple US phone number matching, allowing area code or not. Allows spaces, dashes, dots, or none of the above. Area code, if entered, can be surrounded by parenthesis or not."
737,,^(\-)?\d*(\.\d+)?$,Matches all positive decimal floating negative/non-negative numbers. Allows empty string. 
741,,"^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk(:\d+)?\/?$","UK http/https/ftp URI. Based on my previous expression, this one takes an optional port number and optional trailing slash."
742,,^(\(\d{3}\)[- ]?|\d{3}[- ])?\d{3}[- ]\d{4}$,US telephone pattern.  Optional area code with or without '()'.  If area code has parentheses then it is optionally followed by - or space. If no parentheses then it must be followed by - or space.  Number must be separated by either a space or -.
743,,X-Spam-Level:\s[*]{11},Matches SpamAsssasin score above an arbitrary number.  Allows sorting of spam based on SpamAssassin score.  * should be replaced the symbol configured in SpamAssassin.  
744,,"^([0-9a-fA-F]{1,2})(\s[0-9a-fA-F]{1,2})*$",Expression validating a series of hex codes (byte values) separated by spaces.
745,,"(^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)","For who use a space as thousands separator like french, deutsch ...."
746,,&lt;(?:[^&quot;']+?|.+?(?:&quot;|').*?(?:&quot;|')?.*?)*?&gt;,"This will match all tags in a string, it's good for stripping HTML or XML tags to get the plain text.It works with attributes that include javascript or &quot;&lt;&gt;&quot;.
It will match all these
    &lt;hr size=&quot;3&quot;
        noshade
        color=&quot;#000000&quot;
        align=&quot;left&quot;&gt;

    &lt;p style=&quot;margin-top:0px;margin-bottom:0px&quot;
       align=&quot;center&quot;&gt;&lt;font face=&quot;Times New Roman&quot;
          size=&quot;5&quot;&gt;&lt;b&gt;UNITED STATES&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;input type=button onclick='if(n.value&gt;5)do_this();'&gt; not this &lt;br&gt; &lt;input type=button onclick=&quot;n&gt;5?a():b();&quot; value=test&gt; not this &lt;br&gt; &lt;input type=button onclick=&quot;n&gt;5?a(\&quot;OK\&quot;):b('Not Ok');&quot; value=test&gt; not this &lt;br&gt; &lt;input type=button onclick='n&gt;5' value=test onmouseover=&quot;n&lt;5&amp;&amp;n&gt;8&quot; onmouseout='if(n&gt;5)alert(\'True\');else alert(&quot;False&quot;)'&gt; not this &lt;br&gt;
"
747,,"^(?!\u00a2)  #Don't allow cent symbol
 \p{Sc}?     #optional unicode currency symbols
 (?!0,?\d)   #don't allow leading zero if 1 or more unit
 (?:\d{1,3}    # 1 to 3 digits
 (?:([, .])\d{3})?  # if there is a separator it must be followed by 3 digits
 (?:\1\d{3})*  # if the is more than two groups the same separtor must but used, it must be followed by 3 digits
|(?:\d+))      # more than 3 digit with no comma separator
((?!\1)[,.]\d{2})?$  # option cents","Internationally capable currency formats.  It is NOT local aware.  Should be modify for local specific validations.
More detail at http://blogs.regexadvice.com/mash/archive/2004/06/08/1246.aspx"
748,,^\s+|\s+$,This expression is a trim using regular expression.  This expression removes white spaces before and after the given input string
749,,"^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+&lt;(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})&gt;$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$","This Works good until we want a multiple email address validator, I am working on it to make it work with the multiple email address, If anyone can work on this part as to validate a multiple email address then that will produce a very good expression, i think the best of this kind. AIM - to Validate Mohit &lt;myadav@yahoo.com&gt;; Rohit &lt;ryadav@yahoo.com&gt;; .........(any number of times)"
750,,^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$,
751,,"(^(((([1-9])|([0][1-9])|([1-2][0-9])|(30))\-([A,a][P,p][R,r]|[J,j][U,u][N,n]|[S,s][E,e][P,p]|[N,n][O,o][V,v]))|((([1-9])|([0][1-9])|([1-2][0-9])|([3][0-1]))\-([J,j][A,a][N,n]|[M,m][A,a][R,r]|[M,m][A,a][Y,y]|[J,j][U,u][L,l]|[A,a][U,u][G,g]|[O,o][C,c][T,t]|[D,d][E,e][C,c])))\-[0-9]{4}$)|(^(([1-9])|([0][1-9])|([1][0-9])|([2][0-8]))\-([F,f][E,e][B,b])\-[0-9]{2}(([02468][1235679])|([13579][01345789]))$)|(^(([1-9])|([0][1-9])|([1][0-9])|([2][0-9]))\-([F,f][E,e][B,b])\-[0-9]{2}(([02468][048])|([13579][26]))$)","I have written this regular expression for use in javascript. It sould work for other languages directly or with minor changes. The parsing logic in this regular expression works like this : Imagine a tree structure, input at the root, Level 1 : two branches one-non Feb months two-Feb month. In the Feb month again two branches one-leap year Feb and two-non leap year Feb. In the non-Feb branch, we have two branches again, one-30 days month and two-31 days month. Once you get this, I think it will be easier to figure out the rest. "
752,,"^[\(]? ([^0-1]){1}([0-9]){2}([-,\),/,\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\.]? ([0-9]){4}$","Here is a regular expression I wrote that validates U.S. phone numbers with area codes. You can't have a leading '0' or '1' but you can separate the number blocks with a space, a dot, a slash, or a hyphen. It also prevents a '0' or '1' for the first digit of the prefix. No extension is allowed and it must be 10 digits."
753,,12/err,
757,,^(\d{3}|\d{4})[-](\d{5})$,"Canadian Branch-Transit number test.

The branch number must be 3 or 4 didgits then '-' then five didgets."
758,,href[ ]*=[ ]*('|\&quot;)([^\&quot;'])*('|\&quot;),"the regex's on this site for pulling links off a page always seemed to be faulty, or at least never worked with PHP, so i made this one.  simple, as i'm an amateur with regex's, but stumbled thru it and this one actually works.  tested with PHP function: preg_match_all(&quot;/href[ ]*=[ ]*('|\&quot;)([^\&quot;'])*('|\&quot;)/&quot;,$string,$matches)"
759,,"^(smtp)\.([\w\-]+)\.[\w\-]{2,3}$",Matches basic SMTP server names.
761,,"(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$","mm/dd/yyyy hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=644.  Please see that regex for details of what is being checked"
762,,"^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$","dd/mm/yyyy hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=691.  Please see that regex for details of what is being checked"
763,,"^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$","yyyy/mm/dd hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=760.  Please see that regex for details of what is being checked"
764,,^((\d[-. ]?)?((\(\d{3}\))|\d{3}))?[-. ]?\d{3}[-. ]?\d{4}$,"This is a pretty flexable phone number validator for US numbers.  Allows optional country code and area code.  Allows separation of numbers with &quot; &quot;, &quot;-&quot;, &quot;.&quot; or nothing to seperate.  Area codes can be in parenthesis or not.  Validates that you'll get 7, 10, or 11 digits in the way the most number of people option when writing them."
765,,"^((((H|h)(T|t)|(F|f))(T|t)(P|p)((S|s)?))\://)?(www.|[a-zA-Z0-9].)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,6}(\:[0-9]{1,5})*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&amp;%\$#\=~_\-]+))*$","Matches URLS that start with numbers and  any TLD that is 2 to 6 characters long. Matches most URLs.  Thanks to eveyone for suggesting modifications!

UPDATES::[Nov. 11, 2005] Now it matches uppercase and lower case protocols. 

Updates::December 3,  2005  Added restriction to ports since they will only go up to 65535. (Thanks  lorello)





Keep the suggestions coming! Thanks for the heads up!!"
766,,^(((ht|f)tp(s?))\://).*$,"Identifies http, https, ftp, and ftps "
767,,((^\d{5}$)|(^\d{8}$))|(^\d{5}-\d{3}$),Brazilia ZIP Code validation!
768,,"^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$",Telefone for Brazilian telefone standard. The Area code is optional.
769,,"^(\d{2,3}|\(\d{2,3}\))[ ]?\d{3,4}[-]?\d{3,4}$",Validation for Brazilian telephone with required area code.
770,,"^(?=.*[0-9]+.*)(?=.*[a-zA-Z]+.*)[0-9a-zA-Z]{6,}$","Password must contain at least one letter, at least one number, and be longer than six charaters."
771,,^[a-zA-Z]{3}[uU]{1}[0-9]{7}$,Standard freight container number in upper or lower case.
772,,^[A-Z]{3}\d{8}$,Basic UK child benefit reference number.
774,,href[\s]*=[\s]*&quot;[^\n&quot;]*&quot;,"A very short pattern for extracting hrefs from HTML, does not validate they are within a tag"
775,,"^(((((0?[1-9])|(1\d)|(2[0-8]))\.((0?[1-9])|(1[0-2])))|((31\.((0[13578])|(1[02])))|((29|30)\.((0?[1,3-9])|(1[0-2])))))\.((20[0-9][0-9]))|(29\.0?2\.20(([02468][048])|([13579][26]))))$",Regular expression to evaluate a date in German date format (DD.MM.YYYY). Leading zeros for days and months are valid. Period from 1.1.2000 until 31.12.2099 is valid. Leap years are checked.
777,,"^\s*[a-zA-Z0-9,\s\-\'\.]+\s*$",My first submission. Probably pretty obvious. Just wanted something that would  check text boxes that non-programmers might fill out. Some of this came from http://www.reducedcomplexity.com/
780,,"^[a-zA-Z0-9\x20'\.]{8,64}[^\s]$","Bobby's Burger Barn
Bills Barn O'Bass
Billy Bob Beaumont"
781,,\.txt$,Matches a file extention.
783,,(^0[1-9]\d{1}\s\d{4}\s?\d{4}$)|(^0[1-9]\d{2}\s\d{3}\s?\d{4}$)|(^0[1-9]\d{2}\s\d{4}\s?\d{3}$)|(^0[1-9]\d{3}\s\d{3}\s?\d{2}$)|(^0[1-9]\d{3}\s\d{3}\s?\d{3}$)|(^0[1-9]\d{4}\s\d{3}\s?\d{2}$)|(^0[1-9]\d{4}\s\d{2}\s?\d{3}$)|(^0[1-9]\d{4}\s\d{2}\s?\d{2}$),"This will match valid UK telephone numbers.  This adheres to ofcom's code and number length guide available at http://www.ofcom.org.uk/licensing_numbering/numbers/num_user_guide#1b           Brackets and international codes are not allowed. 
A space MUST be used after the dialling code, and spaces at the expected points within the remainder of the number can be used if need be, but not nessesary, hence 0208 6473 373 is the same as 0208 647 3373 and 0208 6473373"
784,,^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$,US telephone check
785,,"(-\d{1,} | \d{1,} | \d{1,}-\d{1,} | \d{1,}-)(,(-\d{1,} | \d{1,} | \d{1,}-\d{1,} | \d{1,}))*",
786,,"((DK|FI|HU|LU|MT|SI)(-)?\d{8})|((BE|EE|DE|EL|LT|PT)(-)?\d{9})|((PL|SK)(-)?\d{10})|((IT|LV)(-)?\d{11})|((LT|SE)(-)?\d{12})|(AT(-)?U\d{8})|(CY(-)?\d{8}[A-Z])|(CZ(-)?\d{8,10})|(FR(-)?[\dA-HJ-NP-Z]{2}\d{9})|(IE(-)?\d[A-Z\d]\d{5}[A-Z])|(NL(-)?\d{9}B\d{2})|(ES(-)?[A-Z\d]\d{7}[A-Z\d])","Matches valid VAT identification number for all current EU's member states, in format CC-xxx or CCxxx (where CC is country code and xxx actual VAT number)."
788,,"^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$",
793,,&lt;!--[\s\S]*?--[ \t\n\r]*&gt;,"As I could understand the HTML standard, this is the valid reg.exp. for comments.
The only differenc from the last one is that the comment can be terminated by two minuses followed by none OR SOME space caracters and then by character &gt;"
794,,/[^/]+$,Very easy expression to get the file name from a path. I couldn't find it so I wrote it and now I post it here! Hope it could help.
795,,"^((CN=['\w\d\s\-\&amp;]+,)+(OU=['\w\d\s\-\&amp;]+,)*(DC=['\w\d\s\-\&amp;]+[,]*){2,})$",Matches the LDAP path of Microsoft Active Directory entry.  Checks to ensure the ADsPath attribute is accurate.
796,,(((0?[13578]|[1][02])[-/]((0?[1-9]|[12]\d)|[3][01])[-/]([1-9]\d{3}|[0-9](2)))|((0?[13456789]|[1][012])[-/]((0?[1-9]|[12]\d)|[3][0])[-/]([1-9]\d{3}|[0-9]{2}))|(0?[2][-/](0?[1-9]|[12]\d)[-/]([1-9]\d)?([02468][048]|[13579][26]))|(0?[2][-/](0?[1-9]|[12][0-8])[-/][1-9]\d{3}|[0-9]{2})),"This accepts the date in the format month, day, year (1000+). The preceding zero's before the month and date are optional, the year can be in 2 or 4 digit format. This takes february leap years into affect.
This was modified from a regular expression originally by Uris Virott which matched dd/mm/yyyy without the option of 2 or four digit month/day/year.
Non matching examples are: 2/29/03, 10/10/0999, 04/31/02."
797,,^(((2|8|9)\d{2})|((02|08|09)\d{2})|([1-9]\d{3}))$,"Matched Australian Postcodes, as defined by AusPost.

Many Australian developers are unaware of the small range of 3 digit, or 0 starting postcodes.

220 and 221 (or 0220 and 0221) are for ANU and LVR.

800s and 900s (or 0800s and 0900s) are for NT, and parts of SA, WA.

1000s are for big companies in Sydney, competition mailings, etc."
798,,^(19[0-9]{2}|[2-9][0-9]{3})-((0(1|3|5|7|8)|10|12)-(0[1-9]|1[0-9]|2[0-9]|3[0-1])|(0(4|6|9)|11)-(0[1-9]|1[0-9]|2[0-9]|30)|(02)-(0[1-9]|1[0-9]|2[0-9]))\x20(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$,"Checks for the format yyyy-MM-dd HH:mm:ss
also known as SortableDateTimePattern (conforms to ISO 8601) using local time. From 1900-01-01 00:00:00 to 9999-12-31 23:59:59. No check for leap year."
799,Special Characters,^(a-z|A-Z|0-9)*[^#$%^&*()']*$,Does not allow these characters in a string #$%^&amp;*()'
800,,"^((?:[a-zA-Z]:)|(?:\\{2}\w[-\w]*)\$?)\\(?!\.)((?:(?![\\/:*?<>""|])(?![.\x20](?:\\|$))[\x20-\x7E])+\\(?!\.))*((?:(?:(?![\\/:*?<>""|])(?![ .]$)[\x20-\x7E])+)\.((?:(?![\\/:*?<>""|])(?![ .]$)[\x20-\x7E]){2,15}))?$","Matches drives, folders and file on a Windows OS. Folder matches must end with \
Folder and file names can not end with a space.
I limited the file extension length to 15  though that not a restriction of a file's extension 
This is a mod of Darren's regex http://www.regexlib.com/REDetails.aspx?regexp_id=357
and my own http://www.regexlib.com/REDetails.aspx?regexp_id=137

Updated Feb 2005"
802,,"(^\d{1,5}$|^\d{1,5}\.\d{1,2}$)",This expression evaluates simple currency values...  alteast 1 digit and max 5 digits and if period then atleast one digit after period and max two digits after period
803,,"^(\$)?(\s)?(\-)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$","Allows either inclusion of $ symbol or not. Allows a whitespace character after the $ sysmbol or not. Allows a negative symbol in front of the starting digit or not. Allows comma separators at thousands, but nowhere else. Allows more than two decimal places."
805,,"^[\w0-9&#228;&#196;&#246;&#214;&#252;&#220;&#223;\-_]+\.[a-zA-Z0-9]{2,6}$",This RegEx can be used to varify (esp. when receiving data from forms) filenames. No Path is allowed. German Special Characters are allowed.
806,,"^((ht|f)tp(s?))\://([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(/\S*)?$","Simple URL Validator -- allows http, https, ftp, ftps, 2-6 letter TLD, ports, any path. Sorry, no IP addresses. Not too fussy, but then, it's not too long either ;-)"
808,,^(?:(?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)|(?:0?2)(?:(?!\/3[01]|\/29\/(?:(?:0[^48]|[13579][^26]|[2468][^048])00|(?:\d{2}(?:0[^48]|[13579][^26]|[2468][^048]))))))\/(?:0?[1-9]|[12][0-9]|3[01])\/\d{4}$,will match all dates in mm/dd/yyyy format. takes into account leap-years and months without 31 days.
809,,"^\s*-?((\d{1,3}(\.(\d){3})*)|\d*)(,\d{1,2})?\s?(\u20AC)?\s*$","Matches euro currency (portuguese regional options).
Uses the dot sign as the thousands separator (optional) and the comma sign as the decimal separator.
Matches only 2 digitals after decimal.
Also matches negative numbers."
811,,"^([1-9]{1}[\d]{0,2}(\,[\d]{3})*(\.[\d]{0,2})?|[1-9]{1}[\d]{0,}(\.[\d]{0,2})?|0(\.[\d]{0,2})?|(\.[\d]{1,2})?)$",Expresion para tipo Money &#243; Cantidad
814,,&lt;asp:requiredfieldvalidator(\s*\w+\s*=\s*\&quot;?\s*\w+\s*\&quot;?\s*)+\s*&gt;\s*&lt;\/asp:requiredfieldvalidator&gt;,ASP.NET required field validator control.
815,,\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\},This matches the specific value for a unique identifier (GUID) from SQL server. Written by Jason N. Gaylord.
817,,^(?!000)([0-6]\d{2}|7([0-6]\d|7[012])) ([ -])? (?!00)\d\d([ -|])? (?!0000)\d{4}$,"U.S. social security numbers (SSN), within the range of numbers that have been currently allocated. Matches the pattern AAA-GG-SSSS, AAA GG SSSS, AAA-GG SSSS, AAA GG-SSSS, AAAGGSSSS, AAA-GGSSSS, AAAGG-SSSS, AAAGG SSSS or AAA GGSSSS. All zero in any one field is not allowed. 

** Additionally, spaces and/or dashes and/or nothing are allowed.  In Michael Ash's example 123-45 6789 and 123456789 would fail there was a '\3' after the second octet of numbers that seemed to confuse the regex. now any combination of spaces, dashes, or nothing will work between the SSN octets. BoxerX.com thanks Michael for the regex!"
818,,"^[a-zA-Z]+[a-zA-Z0-9_-]*@([a-zA-Z0-9]+){1}(\.[a-zA-Z0-9]+){1,2}",Email Validator. Enmail address has to start with alphabets
821,,^[a-zA-Z_]{1}[a-zA-Z0-9_@$#]*$,"This Regex matches valid SQL identifiers, including names for Stored Procedures and the like. Note that local variables/parameters (which begin with an &quot;@&quot;) will not match this Regex, nor will temporary objects (beginning with a &quot;#&quot;), or global temporary objects (beginning with &quot;##&quot;). All other valid identifiers/variables/table names/stored procedure names/columns etc., will match. Please let me know if you find this useful or have any complaints - trash@primalblaze.com."
822,,(?=([\W]*[\w][\W]*\b))\s(?=\d\.|\d\b),"This RegExp matches a space (&quot; &quot;) character with lookahead condition if there is an ASCII text in front of it and it is followed by a single decimal number which in turn is followed by a dot or nothing. It's useful to seperate scientific notation numbers from a text, i.e. when classifying with the bow toolkit.
[EDIT 18.09.2004] There was indeed an error in the second lookahead. Changed |\b to |\d\b"
823,,"^[\-]{0,1}[0-9]{1,}(([\.\,]{0,1}[0-9]{1,})|([0-9]{0,}))$",Simple checker for user's float types input.
824,,^\.{1},simply checks to see if the first charactor is a . (dot)
825,,"([A-Za-z0-9.]+\s*)+,","Matches comma separated names in a row based list of names.  Submatches retrieve name parts, e.g. first name, middle name, initial, surname."
826,,^\d?\d'(\d|1[01])?.?(\d|1[01])&quot;$,This RE matches the height in feet and inches with decimals and without decimals in it
827,,"^[A-Za-z]{4}[ |\-]{0,1}[0-9]{6}[ |\-]{0,1}[0-9A-Za-z]{3}$",Regular expression that matches Mexican RFC's (Registro Federal de Contribuyentes).
829,,"^([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}$",IPv6 text representation of addresses without compression from RFC 1884. This regular expression doesn't allow IPv6 compression (&quot;::&quot;) or mixed IPv4 addresses.
830,,^([GB])*(([1-9]\d{8})|([1-9]\d{11}))$,"Simple check of valid UK VAT Registration numbers. The standard format for UK VAT number must be 9 characters long or 12 characters if a branch trader. The GB prefix has been included as optional, but technically you should include it. The UK VAT format also includes Government Departments and Health Authorities, but I have excluded them for the moment."
831,,"^(\d{0,4}(?:\.\d{0,2})?
  | 
  [-]\d{0,2}(?:\.\d{0,2})?
 )[%]{0,1}$","validates Percents, where Positive numbers are allowed over 100% (in this case up to 9999), but where Negative percents must not go to or below -100%

This also allows for the &quot;%&quot; to be present or missing.

This was used to validate sales Growth Percents (allows for large positive growth, but you could not go negative for more than 100%)."
832,,^[^0-9]*(?:(\d)[^0-9]*){10}$,"Recently I've been forced to validate phone numbers in a variety of formats, with all sorts of whitespace, dashes, parenthesis, etc. I didn't want to hassel with matching all that junk, I just wanted the 10 numbers!

So I wrote this expression which captures 10 digits in a string if there are exactly 10 digits. Anything else is allowed so long as there are 10 numbers.

In .Net, You just loop through the Captures collection of Groups[1] of your Regex.Match object and concatenate the Capture.Value strings to get a simple, pure 10 digit phone number. ( myMatch.Groups[1].Captures )"
834,,^[0-9]*$,"Matches only numbers, in any length. No characters or punctuation will be matched."
835,,"^(((((0[1-9])|(1\d)|(2[0-8]))[/.-]((0[1-9])|(1[0-2])))|((31[/.-]((0[13578])|(1[02])))|((29|30)[/.-]((0[1,3-9])|(1[0-2])))))[/.-]((000[^0])&amp;([0-9][0-9][0-9][0-9]))|(29[/.-]02[/.-](([0-9][0-9](([02468][48])|([2468][048])|([13579][26])))|((([02468][48])|([2468][048])|([13579][26]))00))))$"," Checks  0001-9999
 Along with leap years
 intermediate symbols can be / or . or - 
 this can be modified easily "
836,,"^(((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0
[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((000
[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9]
[0-9]))|(29/02/(([0-9][0-9](([02468][48])|([2468][048])|
([13579][26])))|((([02468][48])|([2468][048])|([13579]
[26]))00))))$","Checks for years 0001-9999.
Checks leap year corectly (0004,0400,0040)
Can use  / as separators or can replace it. 
Easy to understand and can be modified easily for mm/dd/yyyy or yyyy/dd/mm or mm-dd-yy or to any date format."
837,,^\d{5}(-\d{4})?$,"Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the &quot;ZIP+4&#174;&quot; Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required &quot;dash&quot; or &quot;hyphen&quot;. [67]Sector or Several Blocks. [89]Segment or One Side of a Street. Also just FYI, ZIP codes in the northeast US frequently start with '0' or '00'. [00988-Carolina, PR] [03110-Bedford, NH].  Thanks, Ryan v-"
838,,"^[1-9][0-9]{0,2}$","All positive non-zero integers between 1 and 999.  You can adjust the upper range of this expression by changing the second number (ie 2) in the {0,2} part of the expression."
841,,^([A-Z]|[a-z]|[0-9])(([A-Z])*(([a-z])*([0-9])*(%)*(&)*(')*(\+)*(-)*(@)*(_)*(\.)*)|(\ )[^  ])+$,"will match as long as the only chars exist in the string : A-Z,a-z,0-9,'Space' chr(32),%&amp;'+-@_.
It's useful for check vs Account Names where you might want to forbid entering other chars then what is in the pattern. also will not allow repeated space in the string"
842,,"(((0[1-9]|[12][0-9]|3[01])([.])(0[13578]|10|12)([.])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([.])(0[469]|11)([.])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([.])(02)([.])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([.])([02468][048]00))|((29)([.])(02)([.])([13579][26]00))|((29)([.])(02)([.])([0-9][0-9][0][48]))|((29)([.])(02)([.])([0-9][0-9][2468][048]))|((29)([.])(02)([.])([0-9][0-9][13579][26])))",Usefull for SQL update and insert sentence..
843,,"^[A-Za-z]{3,4}[ |\-]{0,1}[0-9]{6}[ |\-]{0,1}[0-9A-Za-z]{3}$",This Regex matches Mexican RFC's (Registro Federal de Contribuyentes) with 3 or 4 letters in the first section. It accepts spaces and dashes between sections.
844,,^([A-Z]|[a-z]|[0-9])([A-Z]|[a-z]|[0-9]|([A-Z]|[a-z]|[0-9]|(%|&|'|\+|\-|@|_|\.|\ )[^%&'\+\-@_\.\ ]|\.$|([%&'\+\-@_\.]\ [^\ ]|\ [%&'\+\-@_\.][^%&'\+\-@_\.])))+$,"This works good for account names where u don't want your users to create ugly account names. 3 rules apllied in it:
1. an account name must start with Letter or Number
2. the only valid signs are : ^%&amp;'+-@. and (space (chr32))
3. a sign can't be repeated by any sign execept space which can't be repeated as well."
846,,^((\d(\x20)\d{2}(\x20)\d{2}(\x20)\d{2}(\x20)\d{3}(\x20)\d{3}((\x20)\d{2}|))|(\d\d{2}\d{2}\d{2}\d{3}\d{3}(\d{2}|)))$,It is an expression to valide a french num&#233;ro de s&#233;curit&#233; social (social security number translate is not sure) with or without the key.
847,,"^([-]?[0-9])$|^([-]?[1][0-2])$
",I made this to validate offsets to GMT
848,,"^([-]?[0-9]?(\.[0-9]{0,2})?)$|^([-]?([1][0-1])(\.[0-9]{0,2})?)$|^([-]?([1][0-3](\.[0]{0,2})))$",This was made for specifying GMT offsets with 2 decimal places.  It will validate any number from -12 to 13 with 2 decimal places.
850,,^([01][012]|0[1-9])/([0-2][0-9]|[3][0-1])/([0-9][0-9][0-9][0-9])$,Regular expression that only allows expression in the format: MM/DD/YYYY
851,,&lt;!--((?!--&gt;).)*--&gt;,Strip (X)HTML comments
852,,\/\*((?!\*\/).)*\*\/,Strip C style block comments
853,,((v|[\\/])\W*[i1]\W*[a@]\W*g\W*r\W*[a@]|v\W*[i1]\W*[c]\W*[o0]\W*d\W*[i1]\W*n),Matches all those Obfuscations which come in those pesky Emails. You will have to strip out all those HTML Remarks first in order to for this to work with the HTML Part of the Email
854,,(^[1]$)|(^[1]+\d*\.+\d*[1-5]$),Simple expression that accepts only values between 1 and 1.5
855,,^(((0?[1-9]|[12]\d|3[01])\.(0[13578]|[13578]|1[02])\.((1[6-9]|[2-9]\d)\d{2}))|((0?[1-9]|[12]\d|30)\.(0[13456789]|[13456789]|1[012])\.((1[6-9]|[2-9]\d)\d{2}))|((0?[1-9]|1\d|2[0-8])\.0?2\.((1[6-9]|[2-9]\d)\d{2}))|(29\.0?2\.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$,"I did not found a Regex for german date, so I created my own. This RE validate dates in the dd.MM.yyyy format with leap years 100% integrated valid years from 1600 to 9999. As usual, many tests have been made. I think this one should be fine."
856,,((\d|([a-f]|[A-F])){2}:){5}(\d|([a-f]|[A-F])){2},Deisgned to verify a MAC address with hex values seperated by a colon.
857,,\b-?[1-9](?:\.\d+)?[Ee][-+]?\d+\b,"Matches standard scientific notation using E character
Scientific notation involves writing a number as the product of two numbers. The first one, the digit value, is always more than one and less than 10. The other, the exponential term, is expressed as a power of 10."
858,,^(?:(?:((?![0-9_])[a-zA-Z0-9_]+)\.?)+)(?<!\.)$,"Matches that an input string is a valid namespace definition.  It also captures each word / section in the namespace in case they are needed.
The rules this was created by are: 1)A series of words separated by a periods 2)does not begin or end with a period, 3)contains only letters numbers and underscores, 4) none of the words begin with a number, and 5) contains no whitespace"
859,,&lt;!--[\w\W]*?--&gt;,This expression will find sigle or multilined HTML comments.
860,,([0]{1}[6]{1}[-\s]*([1-9]{1}[\s]*){8})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*([1-9]{1}[\s]*){6})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*([1-9]{1}[\s]*){7}),"Matches dutch telephone numbers WITHOUT country code prefix

Tests on mobile numbers, 3 digits prefix city-codes and 4 digit prefix city codes.
* Disallows a 0 directly after a prefix
* Allows space or a - between prefix and telephonenumber
* Also allows space between telephone digits to compensate the nasty habit of making telphone numbers more readable"
861,,"^(?!0,?\d)([0-9]{2}[0-9]{0,}(\.[0-9]{2}))$","Validates currency, must have two leading and two digits following a decimal point. Does not accept leading zero's."
862,First Name(s) OR Last Name(s),"^((?:[A-Z](?:('|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\.))(?:([ -])((?:[A-Z](?:('|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\.)))?$","I wrote this regex to validate first names or last names separately.  Allows for 2 names separated by space or hyphen.  Will accept an abbreviated second name with period.  Has to start with a letter and end with a letter or capital letter with period.

Updated 3/24/2005: Now, names like McDonald work.  Also, several convenient parts of the match are stored, for example: the Name MacDonald-O'Brian will yield the following: $1=&quot;MacDonald&quot; $2=&quot;ac&quot; $3=&quot;-&quot; $4=&quot;O'Brian&quot; $5=&quot;'&quot;"
863,,"^\+?[a-z0-9](([-+.]|[_]+)?[a-z0-9]+)*@([a-z0-9]+(\.|\-))+[a-z]{2,6}$",simply email regular expression
864,,^\d*\d?((5)|(0))\.?((0)|(00))?$,"Based on a pattern I found on this site, this pattern verifies that a number is a multiple of 5. Basically checks the last number before the decimal point to see if it's a 5 or 0. Also works on non-decimal numbers.

Thanks to Narsi V for the base pattern
http://www.regxlib.com/REDetails.aspx?regexp_id=82"
866,,"^(\d+|(\d*\.{1}\d{1,2}){1})$","This was written for quick entry on a timecard system.  It allows you to create a number with an option of 2 decimal places.  I have the digits left of the decimal unrestricted for this example, but in the real world of time keeping, you wouldn't surpass 3 digits on the left of the decimal."
867,,^\(0[1-9]{1}\)[0-9]{8}$,This is used to validate an Australian telephone number with no other characters than the () being used. Validates area code being between 01 - 09.
869,,"^[a-zA-Z]:(\\|(\\[^\\/\s:*""<>|]+)+)>",This pattern matches the windows console (cmd) prompt (also know as command prompt)
870,,[URL=[a-zA-Z0-9.:/_\-]+\][a-zA-Z0-9._/ ]+\[/URL\],A simple match for BBCode type strings.  I had to code my own BBCode scheme for a project that I had taken up and really this is my first RegEx so I thought that I would share.  You could modify this to work with any BBCode type of string that has the [TAG=VALUE]Desc[/TAG] syntax.
871,,[B\][a-zA-Z0-9._/ ]+\[/B\],The second type of BBCode that I had to write.  This one is an example of Bolding what is between the blocks though it can easily modified to match other Tags such as Underline or li.  Really anything that would match the BBCode that does not need a value in the first tag (ie. [TAG]Desc[/TAG]).
872,,(^(\d{3}.\d{3}.\d{3}-\d{2})|(\d{11})$),Valida&#231;&#227;o de CPF Brasileiro com ou sem os divisores.
873,,"(^\d{3,4}\-\d{4}$)|(^\d{7,8}$)","Formato de Telefone Brasileiro, sem o DDD"
875,,"^((\s|[0])\.(\d{0,2}\s{0,2}))?$|^(\.(\d\s){0,2})?$|^(\s{0,4}[1]{0,1}\.[0]{0,2}\s{0,4})?$|^(\s{0,4}[1]{0,1}\s{0,4})?$|^(\s{0,4}[0]{0,4}[1]{0,1}\s{0,4})?$|^([0]{0,4}\s{0,4})?$|^(\s{0,3}[0]{0,3}\.{1}\d{0,2}\s{0,2})?$","For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.
Allows 1.0, 1.00, 1, 1., .9, .90, 0.90."
879,,^[a-zA-Z][a-zA-Z0-9_]+$,"Validate that the string contains only alphanumeric characters or an underscore. The first character cannot be anything else than alphabetic character.

We use that to make sure the provided string can be a variable/entity name."
880,,"^\s*[a-zA-Z0-9&amp;\-\./,\s]+\s*$","Valida&#231;&#227;o para letras maiusculas e minusculas sem acentos, incluinto os caracteres . - &amp; e /"
881,,(^(\d{2}.\d{3}.\d{3}/\d{4}-\d{2})|(\d{14})$),Express&#227;o para a Valida&#231;&#227;o do CNPJ contendo ou n&#227;o os caracteres de separa&#231;&#227;o . e /.
882,,((([7-9])(\d{3})([-])(\d{4}))|(([7-9])(\d{7}))),"Express&#227;o para a Valida&#231;&#227;o de Telefones Celulares sem o DDD valida celulares com inicio igual a 7,8 e 9."
883,,(antifraud\.ref\.num)[0-9]*(@citibank\.com),We have be receiving a lot of Spam with this Return-Path address. It uses diferent ref. numbers all the time So I created this pattern.
884,,"# one tag name matcher and three times the style or attribute matcher with each 6 match possibilities (three times to reckon with the attributes placing)
# capturing (only one) front space of each attribute
# quotes aren't needed to match, but are captures when available
&lt;
	(span|font) # tagname

	.*?
	(?:
		(?:
				(\s?style=&quot;?).*? # style opener
				((?:\s?font-size:.+?\s*(?:;|,|(?=&quot;))+)|(?:\s?color:.+?\s*(?:;|,|(?=&quot;))+))[^&quot;]* # font-size or color style property
				((?:\s?font-size:.+?\s*(?:;|,|(?=&quot;))+)|(?:\s?color:.+?\s*(?:;|,|(?=&quot;))+))[^&quot;]* # font-size or color style property
				# (the line above should be made optional.)
				(&quot;?) # style end quote if available
			|
				(\s?size=&quot;?.*?(?:(?=\s)|&quot;|(?=&gt;))) # size attribute
			|
				(\s?color=&quot;?.*?(?:(?=\s)|&quot;|(?=&gt;))) # color attribute
			|
				(?=&gt;)
		)
		.*?
	){3}
	
&gt;","A regex that filters the text property attributes or CSS in a span or font tag, i.e. only the color and font-size style properties and the color and size attributes.

But there are two things I want to improve :
- First I need the regex to match, even when only one of the two style sheet properties is available (only font-size or only color)
- And second, it would be nice if a heading space is captured with the style sheets properties to. I have tried this already but didn't succed. with the tag attributes it does work."
886,,^([0-9a-fA-F])*$,Expression validating a hex string of any length.
887,,"(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*","THE Complex Password Filter Matching 3 of 4 Character catagories:  
1.) at least 1 upper case character 
2.) at least 1 lower case character
3.) at least 1 numerical character
4.) at least 1 special character

It also enforces a min and max length and works for .Net and script Regex implimentations. "
888,,"^([A-Z|a-z]{2}-\d{2}-[A-Z|a-z]{2}-\d{1,4})?([A-Z|a-z]{3}-\d{1,4})?$",It validates Indian Vehicle Registration Number
889,,&quot;.*?&quot;|&quot;.*$|'.*?'|'.*$,"
This pattern highlights any characters in double or single quotes, single line only .For the reason that  refreshing the whole document every keystroke would send the application to a crawl. Only Dreamweaver achieve parsing the whole document fast enough. Other application can only achieve refreshing a line dynamically. 
note: open quotes are highlighted until the end, as they are with most syntax highlighting applications. 
"
892,,^[9]9\d{10}|^[5]\d{10},This will make sure that if your number starts w. a 99 it will have 10 more digits after it and if it starts w. a 5 it will also have 10 digits after that. So if you have a number starting with 99 it must be 12 digits long if it starts with a 5 it must be 11.
894,English Sentence Matching,"\b((([&quot;'/,&amp;%\:\(\)\$\+\-\*\w\000-\032])|(-*\d+\.\d+[%]*))+[\s]+)+\b[\w&quot;',%\(\)]+[.!?](['&quot;\s]|$)","Focused on scraping English sentences from HTML/Java (without having to parse).

Correctly matches the vast majority of English sentences. There are undoubtedly a number of cases which do not match, but I felt they were oblique enough to be omitted.

(Surely, the fellow that commented on this script had some sentences not match, but the example he describes does correctly match, and I provide it as the fourth example.) 

Cheers"
897,,^([\w-]+\.)*?[\w-]+@[\w-]+\.([\w-]+\.)*?[\w]+$,"The following pattern checks whether the input string is a valid email address in the form &quot;name@domain.com&quot;. Actually, it does not have to be a &quot;.com&quot; address. Any combination of letters following the last period are fine. Also, the email name can have a dash or be separated by one or more periods. The Domain name can also have multiple words separated by periods. Thus, it will validate bob@hotmail.com and bill.michaels@us.office.gov.
"
899,,^[a-zA-Z0-9._-]+$,"This is to check release names...
it only allowes alphanumeric and numeric chars , and also _ - and ."
900,,"( xmlns:.*=[&quot;,'].*[&quot;,'])|( xmlns=[&quot;,'].*[&quot;,'])","Matches xml namespace (xmlns) attribtutes. Works with single and double quotes, could be extended to support unquoted attributes."
902,,^[1-9]\d*\.?[0]*$,"natural numbers 1, 2, 3...
(no zeros)"
903,,&lt;a\s*href=(.*?)[\s|&gt;],"Retrieves all anchor links in a html document, useful for spidering. You will need to do a replace of &quot; and ' after the regular expression, as the expression gets all links. As far as I know there is no way, even with \1 groupings, of getting a condition on whether the link contains a &quot;,' or nothing at all (&quot; and ' is easy enough, but what happens if the link starts with &quot;, and has a javascript function call with a string in it). If there is, it's probably quicker to do it like this and do a string replace anyway."
904,,"^([a-zA-z\s]{4,32})$",This is the simplest RegEx for validating someone's name. The name can contain only alphabets(in either case) &amp; should be of minimum length 4 &amp; maximum length 32. Only white spaces are allowed apart from alphabets.
905,,^([Vv]+(erdade(iro)?)?|[Ff]+(als[eo])?|[Tt]+(rue)?|0|[\+\-]?1)$,"This RegEx will match boolean values, either numeric or literal. It will accept MS Access &quot;-1&quot; values for &quot;true&quot;,
and recognizes English and Brazilian Portuguese."
906,,"^(^(([0-9A-F]{1,4}(((:[0-9A-F]{1,4}){5}::[0-9A-F]{1,4})|((:[0-9A-F]{1,4}){4}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,1})|((:[0-9A-F]{1,4}){3}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,2})|((:[0-9A-F]{1,4}){2}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,3})|(:[0-9A-F]{1,4}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,4})|(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,5})|(:[0-9A-F]{1,4}){7}))$|^(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,6})$)|^::$)|^((([0-9A-F]{1,4}(((:[0-9A-F]{1,4}){3}::([0-9A-F]{1,4}){1})|((:[0-9A-F]{1,4}){2}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,1})|((:[0-9A-F]{1,4}){1}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,2})|(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,3})|((:[0-9A-F]{1,4}){0,5})))|([:]{2}[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,4})):|::)((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{0,2})\.){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{0,2})$$",Matches all IPv6 text representations as defined within RFC 2373. Fairly verbose
907,,"urn:[a-z0-9]{1}[a-z0-9\-]{1,31}:[a-z0-9_,:=@;!'%/#\(\)\+\-\.\$\*\?]+",Matches canonical Uniform Resource Names (URNs) as defined in RFC 2141.
908,,"^([0-9]{3,4})$","Allows you to check the length of a number (in this case either 3 or 4 digits).
I found it useful when validating Credit Card Identification Codes (CVV2/CVC2/CID) which are either 3 or 4 numerical digits."
909,,"&amp;(?!([a-zA-Z0-9#]{1,6};))",I'am using it in PHP preg_match() to replace in string parts with non-entity ampersand. Made for my RSS.
910,,"^([a-zA-z\s]{2,})$","This pattern matches is for validating Names, Cities, States, Countries etc that require only alphabet inputs with white spaces. It requires atleast 2 characters &amp; there's no limit on maximum number of characters."
911,,^\+?972(\-)?0?[23489]{1}(\-)?[^0\D]{1}\d{6}$,"Matches an israely phone number with country code. With or without the plus sign. Also allows two or one digit in city code. Checks for a valid city code (02,03,04,08,09)"
912,,"^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ [AaPp][Mm]))$","This is a simple expression used to match a normal 12 hour clock, requires AM/PM in any or mixed case and requires a space before the AM or PM and minutes are required."
913,,"^(LDAP://([\w]+/)?(CN=['\w\s\-\&amp;]+,)*(OU=['\w\s\-\&amp;]+,)*(DC=['\w\s\-\&amp;]+[,]*)+)$","LDAP path of Microsoft Active Directory entries (Organizational Units, Users, Computers and Groups). Requires LDAP protocol especification and allows a server name at the beginning."
915,,"^(\$|R\$|\-\$|\-R\$|\$\-|R\$\-|-)?([0-9]{1}[0-9]{0,2}(\.[0-9]{3})*(\,[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\,[0-9]{0,2})?|0(\,[0-9]{0,2})?|(\,[0-9]{1,2})?)$","This is a regex for Brazilian Reais, that can be transformed to another currencies. The main modification is the exchange of . and , plus the addition of the R matching R$."
916,,"((\s*([^,{]+)\s*,?\s*)*?){((\s*([^:]+)\s*:\s*([^;]+?)\s*;\s*)*?)}","will break out a valid CSS stylesheet into it's components.  Groups on each style, all selectors, each selector within a comma delimited list of selectors, all properties, each property set, each property and each value.  In other words, it breaks it all down for you :)  

The only two problems I'm having with it:
A) it is ignorant of comment blocks.  so if you have styles within a /*  */ block, it'll pick those up.  

B) the first style following a comment block is not parsed correctly (it incorrectly includes the comment as a selector

best thing to do would be to use another regexp to remove all comments before processing with this one"
917,,(?![\uD800-\uDBFF])(?![\uDC00-\uDFFF])[\u0080-\uFFFF],Unicode Plane 0 character excluding standard ASCII 
918,,[\uD800-\uDBFF][\uDC00-\uDFFF],"Non-Plane 0 Unicode character
"
920,,(^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$),Javascript matches US zipcodes not allowing all zeros in first 5 or +4
922,,"^(([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}/(DC=['\w\d\s\-\&amp;]+[,]*){2,})|((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])/(DC=['\w\d\s\-\&amp;]+[,]*){2,})|((DC=['\w\d\s\-\&amp;]+[,]*){2,})$",This expression gets a server bound or serverless ldap path without &quot;LDAP://&quot; in front of it.
923,,^\d{5}(\-\s)?(\d{4})?$,"Web form single field zip code validator.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or no-space between last 4 digits."
924,,^\d{5}((-|\s)?\d{4})?$,"Single field zip code validator, useful for Web Forms.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or NO space between last 4 digits."
925,,^\d{5}((\-|\s)?\d{4})?$,"Single field zip code validator useful for web forms, where user may enter 5 digit or 9 digit zip code, and may use hyphen, space, or no space between the first 5 digits and last 4 digits."
926,,^(\([2-9]|[2-9])(\d{2}|\d{2}\))(-|.|\s)?\d{3}(-|.|\s)?\d{4}$,"Telephone validator allowing user to enter 10 digit telephone number with segments of number separated by hyphens, periods or spaces.  Also braces allowed around area code."
927,,[1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4},"Swedish person number. Don't work on persons older then 100 years, but they are so few that it shouldn't be a problem. Easy to fix, but I choose not to accept oldies..."
932,,^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$,"Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators: . - /
Valid dates only! m (1-12)/ d (1-31)/ y (0..)
(rizzipereira.com.br)
For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250"
933,,^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$,Matches the date format &quot;YYYY-mm-dd&quot; and also validates month and number of days in a month. All leap year dates &quot;YYYY-02-29&quot; passes trough. Could easily be changed to another format.
935,,([0]{1}[6]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){6}),"Meets dutch phone number requirements.. One posted here before didn't allow the 0 after the first digit of the call ID (so the second number or later after the prefix), which should be allowed. I modified that one to meet full requirements now..

Enjoy!!"
936,,"^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$",Matches valid reference codes for AMD Athlon and Duron processors (not Athlon 64).
937,,"^((?:2[0-5]{2}|1\d{2}|[1-9]\d|[1-9])\.(?:(?:2[0-5]{2}|1\d{2}|[1-9]\d|\d)\.){2}(?:2[0-5]{2}|1\d{2}|[1-9]\d|\d)):(\d|[1-9]\d|[1-9]\d{2,3}|[1-5]\d{4}|6[0-4]\d{3}|654\d{2}|655[0-2]\d|6553[0-5])$","IPv4 ip:port checker, I hope it will help you. $1 - IP, $2 - port. More to come, maybe :)"
938,, (?=(?:[^\']*\'[^\']*\')*(?![^\']*\')),This exp will parse out space delimited strings with consideration to single quotes.  I use it with SQL statements.
940,,"^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$",
941,,"^(9,)*([1-9]\d{2}-?)*[1-9]\d{2}-?\d{4}$","Validates US or Canadian phone numbers with the use of &quot;-&quot; or numbers stuck together. No parantheses allowed as well as spaces. Area code is optional. The &quot;9,&quot; is optional as well, which on some phone systems is needed to dial out."
943,,"^\-?\(?([0-9]{0,3}(\,?[0-9]{3})*(\.?[0-9]*))\)?$","Match a positive or negative decimal value with any precision and scale.  Allows for left-padded zeroes, commas as group separator, negative sign (-) or parenthesis to indicate negative number."
944,,"^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$","Required and regular expression validator. For supporting 
-999.99 to +999.99 . Positive and Negative integer/ decimal validations. Percentage sign is also supported. Will not allow empty strings. Can increase/decrease the range as you need."
945,,"(SELECT\s[\w\*\)\(\,\s]+\sFROM\s[\w]+)|
(UPDATE\s[\w]+\sSET\s[\w\,\'\=]+)|
(INSERT\sINTO\s[\d\w]+[\s\w\d\)\(\,]*\sVALUES\s\([\d\w\'\,\)]+)|
(DELETE\sFROM\s[\d\w\'\=]+)","This RE match the SQL Basics Queries (SELECT, UPDATE, INSERT and DELETE)."
946,,^([0-9]{5})([\-]{1}[0-9]{4})?$,Validates against a U.S. postal code in either a 5 digit format or a 5 dash 4 format.
947,,"^([4]{1})([0-9]{12,15})$",Validate against a visa card number. All visa cards start with a 4 and are followed by 12 to 15 more numbers.
948,,^([51|52|53|54|55]{2})([0-9]{14})$,Validate against any mastercard number. All MC's start with a number between 51 and 55 and are followed by 14 other numbers.
949,,^([34|37]{2})([0-9]{13})$,"Validate against any american express number. All american express numbers start with either a 34 or 37, followed by 13 other numbers."
950,,^([6011]{4})([0-9]{12})$,Validate against any discover card number. All DC's start with 6011 and are followed by 12 other numbers.
951,,^([30|36|38]{2})([0-9]{12})$,"Validate against any diner's club card. All diner club cards start with 30,36, or 38, followed by 12 other numbers."
952,,([^\.\?\!]*)[\.\?\!],"Finds sentences (assuming they end with a full stop, question mark or exclamation mark)."
953,,^((?:\+27|27)|0)(=72|82|73|83|74|84)(\d{7})$,Verifies South African mobile numbers with or without the country code.
954,,"^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\s?([0-9][A-Z]{2})$","Matches UK postcodes of the below formats. The space is optional.
AN NAA
AAN NAA
ANN NAA
ANA NAA
AANA NAA
AANN NAA
"
955,,(\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}),
956,,^[\n &lt;&quot;']*([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+),"I use this expression to read bounced email addresses returned by the system administrator. The body of the subject should contain the email address somewhere but the location varies.
Examples:
  To:      blah.v.blah@blah-blah.net ||
blah-blah.blah@blah.com ||
&lt;blah@blah.org&gt;... Deferred: Connection timed out with mail.blah.org. ||
  blah@blah.net 0n 25-12-2004 21:09"
957,,"^(([0-2]?\d\/((0?\d)|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/[2-9]\d{3}\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$",It recognizes date and time expressed as 'dd/mm/yyyy hh:MM:ss' (year&gt;2000)
958,,"^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/[1-9]\d{3})|(29\/0?2\/(((([2468][048])|([13579][26]))00)|([1-9]\d(([02468][48])|([13579][26])))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$",dd/mm/yyyy hh:mm:ss ( 1000&lt;yyyy&lt;9999)
959,,"^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$","My definitive Date and Time pattern (dd/mm/yyyy hh:mm:ss). It recognizes all correct dates (&gt;1900) and time (even february). What can I say, I'm proud of it"
960,,"(\S+)\x20{2,}(?=\S+)",Trim Inside.  This pattern can be used with a replace value of &quot;$1 &quot; to remove multiple consecutive spaces between characters and replace with a single space. Trailing and leading spaces are NOT altered.
961,Word Break,"^(?:[ -~]{10,25}(?:$|(?:[\w!?.])\s))",Word Break.  This regex can be used to break a long line of text on a full word. The qualifiers specify the minimum and maximum number of character allow before the break and can be changed according to your need. Blogge about this here http://regexadvice.com/blogs/mash/archive/2005/02/09/324.aspx
963,,^[0-9]{4}((0[1-9])|(1[0-2]))$,Match a string in CCYYMM/YYYYMM format.
964,,(^[a-zA-Z][a-zA-Z0-9_]*)|(^[_][a-zA-Z0-9_]+),This pattern can be used for validating a string as a valid element name (e.g. variable or class name) in Microsoft .NET. See also http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vbcn7/html/vbconelementnames.asp
965,,"^[^\\\./:\*\?\""<>\|]{1}[^\\/:\*\?\""<>\|]{0,254}$",Validates a long filename using Windows' rules.  Requires one valid filename character other than &quot;.&quot; for the first character and then any number of valid filename characters up to a total length of 255 characters.  Unresolved is how to prevent the last character from being a &quot;.&quot; while still meeting all the features that this regex does now.
966,,(^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9]),"forbidden tele numbers when it starts with 0,
860+,8613,character or has any SBC case.
you can also use it to any international phone dialed by E1 ,etc . this regex has been tested by java, perl,.net
PS: the last regex [0-9]is in SBC case"
970,,^\\([^\\]+\\)*[^\/:*?&quot;&lt;&gt;|]?$,"Orginally on this site search for Path, go to next page
you see a reg expression for ^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?&quot;&lt;&gt;|]+\.htm(l)?$

which I modified with this one to disallow drive specification."
971,,"^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$",Matches a negative or positive percentage between 0 and 100 (inclusive). Accepts up to 2 decimal places.
972,,href=[\&quot;\']?((?:[^&gt;]|[^\s]|[^&quot;]|[^'])+)[\&quot;\']?,"This will match just about everything after href=
Its good if you just need a list of all the href= values"
974,,\b(?:a(?:[nst]|re|nd)?|b[ey]|f(?:or|rom)|i[nst]?|o[fnr]|t(?:o|hat|he|his)|w(?:as|h(?:at|en|ere|ich|o)|i(?:th|ll)))\b,"Removes &quot;stop&quot; or &quot;delete&quot; words that google removes from search strings.  Ordinarily have no search significance. I used this to remove the words in my own web search application.  Take out the ?: for grouping.

I've tested this a bit, yet this is my 1st regex that I've ever written.  It's working fine for me."
975,,"^([0-1])*$
",Expression validating a Binary string of any length
976,,"^([0-7])*$
",Expression validating a octal string of any length.
977,,(script)|(&lt;)|(&gt;)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(&amp;lt;)|(&amp;gt;),This Blacklist RegEx is designed to search a user input for any malicious code or SQL injection attempts.
978,,^([0-9a-fA-F]){8}$,Hex number/string validation method for the Electronic Serial Number(ESN) used in Cellular Phone products.
979,,^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4},"Expresion Regular para Tel&#233;fonos con clave lada en M&#233;xico
separada o no con guiones o espacios. Sirve para tel&#233;fonos estacionarios y/o celulares, con o sin par&#233;ntesis, 10 n&#250;meros a fuerzas, funciona en .net"
980,,"^(?:[a-zA-Z0-9_'^&amp;/+-])+(?:\.(?:[a-zA-Z0-9_'^&amp;/+-])+)*@(?:(?:\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?)|(?:[a-zA-Z0-9-]+\.)+(?:[a-zA-Z]){2,}\.?)$","this will validate most legal email addresses, even allows for some discouraged but perfectly legal characters in local part; allows IP domains with optional []; keeps final tld at a minmum of 2 chars; non capturing groups for efficiency"
981,,^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$,Time in 24 hours format with optional seconds
982,,"(02\d\s?\d{4}\s?\d{4})|(01\d{2}\s?\d{3}\s?\d{4})|(01\d{3}\s?\d{5,6})|(01\d{4}\s?\d{4,5})","Validates UK domestic landline phone numbers.
Valid formats are:
029 99999999 or 029 9999 9999; 0199 9999999 or 0199 999 9999; 01999 99999; 01999 999999; 019999 9999; 019999 99999. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered."
983,,(077|078|079)\s?\d{2}\s?\d{6},"Validates UK mobile phone numbers. Valid formats are `077', `078' or `079' followed by another 8 digits, with an optional space after the dialling code and/or between the 4th and 5th characters of the remainder of the number. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered."
985,,[-+]((0[0-9]|1[0-3]):([03]0|45)|14:00),This matches timezone offsets. Also matches non-hour offsets like India (+05:30) and Nepal (+5:45}. See for more timezone information: http://en.wikipedia.org/wiki/Time_zone
986,,"^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$","Based on a regular expression from Michael Ash, this captures US street addresses and mailing addresses, single or multi-line (multi-line is more reliable), and breaks them into discrete parts for address line 1 and 2, city, state, and postal code.  This expression is not perfect - with the interpreter I am using, some addresses refuse to match correctly.  It should however work for most addresses, particularly when lines are delimited with carriage returns, tabs, or some other whitespace line delimiter that is not a space (\x20).  Note: For improved compatibility, this expression does not use named groups.
**Output** 
\1 = Address 1,
\2 = Address 2,
\3 = City,
\4 = State,
\5 = Postal Code"
988,,"^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,},\x20[A-Za-z]{2}\x20\d{5}(-\d{4})?$","This is a simple expression to check a US street address entered on either one or two lines.  Being short it does not check that the road qualifer is &quot;valid&quot; (eg. drive, avenue, etc), but it does allow for the extended zip code.  A word of warning, the multiline mode can be picky about ending the first line with extra space."
989,,"^[\.\w&#230;&#248;&#229;-]+@([a-z&#230;&#248;&#229;0-9]+([\.-]{0,1}[a-z&#230;&#248;&#229;0-9]+|[a-z&#230;&#248;&#229;0-9]?))+\.[a-z]{2,6}$","Well it pretty much accepts all kinds of users, about the domain i didn't write it special for any TLD so there's no length defined, ohh and it accepts some IDN stuff"
991,,^((0[1-9])|(1[0-2]))$,"Matches month, requires that months 1-9 have a leading 0"
992,,"^\s*-?(\d*\.)?([0-2])?[0-9]:([0-5])?[0-9]:([0-5])?[0-9](\.[0-9]{1,7})?\s*$","This should be the pattern described in the documentation for the .NET TimeSpan.Parse method - generally parses time spans.
From the .NET docs:

public static TimeSpan Parse(string s);

The s parameter contains a specification of the form:

[ws][-][d.]hh:mm:ss[.ff][ws]

Items in square brackets ([ and ]) are optional, colons and periods (: and .) are literal characters, and other items are as follows.

Item Description 
ws optional white space 
&quot;-&quot; optional minus sign indicating a negative time 
&quot;d&quot; optional days 
&quot;hh&quot; hours, ranging from 0 to 23 
&quot;mm&quot; minutes, ranging from 0 to 59 
&quot;ss&quot; seconds, ranging from 0 to 59 
&quot;ff&quot; optional fractional seconds, from 1 to 7 decimal digits 
"
993,,^(1|2|3)((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)(\d{5})$,This pattern matches a Valid Civil ID Number in Kuwait.
994,,"^([1-9]{0,1})([0-9]{1})(\.[0-9])?$","Matches numbers 0 through 99.9 
Allows only one preceding zero and does not require the decimal point"
995,,^(eth[0-9]$)|(^eth[0-9]:[1-9]$),regex to validate unix device names (linux). useful for scripts using ifconfig or stuff
996,,^\.([rR]([aA][rR]|\d{2})|(\d{3})?)$,"RAR file extensions.
Works also with '*.part01.rar' given '.rar' to be the file extension.
Does not support volumes exceed 101 for s## (r99, s00, s01, ...) serie."
997,,^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])$,"Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.

Format CIF: [1 letter][7 numbers][1 number or letter]
Format NIF: [8 numbers][1 letter]
Format NIE: X[possible 0][7 numbers][1 letter]

Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.

Generally I always strip out any non-alphanumeric characters (hyphens, periods, etc.) and convert to upper case before checking validity and before saving to data storage.

Please post improvements or errors if you find them!"
998,,"^([A-Z|a-z]{2}\s{1}\d{2}\s{1}[A-Z|a-z]{1,2}\s{1}\d{1,4})?([A-Z|a-z]{3}\s{1}\d{1,4})?$",It validates Indian Vehicle Registration Number
999,,([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)|([0-9]+),This is just a very simple matcher for real numbers.
1000,,"^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$","Matches full and compressed IPv6 addresses as defined in RFC 2373 (http://www.faqs.org/rfcs/rfc2373.html). No useful captures.
Various implementations require different terminators. (i.e. ^-$ or \b-\b)"
1001,,[1-9][0-9],DDD Brasileiro no Formato de 2 digitos n&#227;o &#233; aceito zero na primeira casa
1002,,"(^([1-3]{1}[0-9]{0,}(\.[0-9]{1})?|0(\.[0-9]{1})?|[4]{1}[0-9]{0,}(\.[0]{1})?|5(\.[5]{1}))$)",GPA (Grade Point Average) expression.  Validates the standars 0.0 thru 4.0 and also accepts 5.5 -- which I use as unknown.
1003,,"^(\$|)([1-9]+\d{0,2}(\,\d{3})*|([1-9]+\d*))(\.\d{2})?$","By combining the contributions from Bri Gipson and Michael Ash in this site.  I have come up with this RE to exclude the zero dollar amounts such as $0.00, 0.00, 0, etc."
1004,,"(((ht|f)tp(s?):\/\/)|(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;&quot;'&lt;&gt;\n\r\t]+)([^\. \[\]\(\),;&quot;'&lt;&gt;\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})","v2
A general purpose expresion to find url's (improved).
Add heads to first part, example:
((imap:|(ht|f)tp(s?):\/\/)|(www\.
to find url's like imap://www.com/, so ip's. No ipv6 (yet)"
1005,,"^(\$|)([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?$","Combine Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input to create this RE to accept Optional leading dollar sign, optional well-formed comma separator dollar amount with no zero amount allowed.

*** Correction: Remove the &quot;+&quot; otherwise it will incorrectly matches 4 leading digits like 1234,345,678.00 03-03-2005
"
1006,,^((Fred|Wilma)\s+Flintstone|(Barney|Betty)\s+Rubble)$,Match the full names of the four main characters of The Flintstones.
1007,,"^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+)*$",this will accept multiple email ids separated only by semi-colons (anyway u can change it).
1008,,(\b)(\w+(\b|\n|\s)){3},"This script attempts to return phrases from a string (Example above looks for {3} word phrases)  Combine this with some .Net code, you can display most popular X word phrases in a string.

-If anyone can help me count &quot;Phrase and Phrase as 2 instances of Phrase please contact me"
1009,,"(^\([0]\d{2}\))(\d{6,7}$)",Validator for New Zealand Mobile phone numbers. Will look for the first number being a 0 and must be a number or either 6 or 7 digits long after to initial (021) suffix
1010,,^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$,"Very simple expression to validate time on a 12 hour clock, this expression is valid for client-side script validations (RegularExpressionValidator - ASP.NET)."
1012,,"^([0-9a-zA-Z]+[-._+&amp;])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$","A short and sweet email address validator. Checks that the username starts and ends with an alphanumeric character, allows a few non-repeating 'special characters' (namely -, ., _, +, &amp;) and checks for a sensible domain name (2-6 character TLD required). Some unconventional, yet technically valid, addresses will not be matched, but this is only a simple expression ;-)"
1013,,^[0-9]*(\.)?[0-9]+$,it will check for the +ve decimal numbers
1014,,^[a-zA-Z0-9]+$,it will check for alphanumeric (Alpha Numeric) values.
1015,,[1-9]+\d*$,Match numbers
1018,,\{CHBLOCK\:(.*?\}),Litle regexp for my portal engie. Only cut the {CHBLOCK:'modulename'} item
1019,,^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$,"dd/MM/yyyy with leap years 100% integrated Valid years : from 1900 to 9999.
As usual, many tests have been made.

This was requested by a user :
http://www.regexlib.com/REDetails.aspx?regexp_id=409"
1020,,"(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))",AntiSpam: matches variations on the word &quot;pharmacy&quot;
1021,,^[a-z]+([a-z0-9-]*[a-z0-9]+)?(\.([a-z]+([a-z0-9-]*[a-z0-9]+)?)+)*$,"A simple regex which should validate a domain name according to RFC 1035 

updated to match domain names with hyphens"
1023,,"\w{5,255}",This is User Name &amp; Password validation expression. It does not allow blank spaces as well as special characters like $#%@&amp;*(){}+
1024,,&lt;a\s*.*?href\s*=\s*['&quot;](?!http:\/\/).*?&gt;(.*?)&lt;\/a&gt;,"Finds all local links, but doesnt match on external links. 
Use replace with $1 to leave the link text but remove the link."
1025,,"(0[1-9]|[12][0-9]|3[01])\s(J(anuary|uly)|Ma(rch|y)|August|(Octo|Decem)ber)\s[1-9][0-9]{3}|
(0[1-9]|[12][0-9]|30)\s(April|June|(Sept|Nov)ember)\s[1-9][0-9]{3}|
(0[1-9]|1[0-9]|2[0-8])\sFebruary\s[1-9][0-9]{3}|
29\sFebruary\s((0[48]|[2468][048]|[13579][26])00|[0-9]{2}(0[48]|[2468][048]|[13579][26]))","Verifies all valid Gregorian dates of the form DD MONTH YY, taking days/month and leap years into account."
1026,,\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b,"This is my attempt to find out valid german postal codes (PLZ or Postleitzahlen).
After the German Unification the numbers were changed to a five digit system. The postal codes starts with the two digit &quot;Leitzahl&quot;. This is a number between 00 and 99 excluding the  not yet used numbers: 00, 05, 43 and 62! After that follows directly a three digit number, 000-999.
Comments welcome. This works for me, however I think it could be written more compact, but could not figure out how ;-)

For more information on german postal codes see:
http://de.wikipedia.org/wiki/Liste_der_Postleitbereiche_Deutschland
http://de.wikipedia.org/wiki/Postleitzahl_%28Deutschland%29
http://en.wikipedia.org/wiki/List_of_postal_codes_in_Germany"
1027,,"&lt;(\/{0,1})img(.*?)(\/{0,1})\&gt;",This regular expression allows you to match all image tags
1028,,(^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$),Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits
1029,,"\A([A-Za-z0-9'~`!@#$%&amp;^_+=\(\){},\-\[\]\;])+?([ A-Za-z0-9'~`
!@#$%&amp;^_+=\(\){},\-\[\];]|([.]))*?(?(3)(([ A-Za-z0-9'~`!@#$
%&amp;^_+=\(\){},\-\[\]\;]*?)([A-Za-z0-9'~`!@#$%&amp;^_+=\(\){},\-\[
\];])+\z)|(\z))",Used to match windows filenames.  Fails if there is leading or trailing spaces. Fails if the input contains /\:*?&quot;&lt;&gt;| . Fails if the input begins or ends with '.'
1030,,^(((((((0?[13578])|(1[02]))[\.\-/]?((0?[1-9])|([12]\d)|(3[01])))|(((0?[469])|(11))[\.\-/]?((0?[1-9])|([12]\d)|(30)))|((0?2)[\.\-/]?((0?[1-9])|(1\d)|(2[0-8]))))[\.\-/]?(((19)|(20))?([\d][\d]))))|((0?2)[\.\-/]?(29)[\.\-/]?(((19)|(20))?(([02468][048])|([13579][26])))))$,"Simple American date format mm-dd-yyyy or mm-dd-yy, no time. Date range is 1900 --&gt; 2099. Is enough for my purposes. Incorectly validates 02-29-1900. I created this to validate dates on a web form where the likely range will be 2000--&gt;2020. Seperators can be '.','/' or '-'
Anyone know the rules for operator precedence for regex syntax?"
1031,,^[^\\\/\?\*\&quot;\'\&gt;\&lt;\:\|]*$,Validation of a Folder Name. Excludes all forbidden characters
1032,,^([2-9]\d{3}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|(([2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00))0229)$,"yyyyMMdd with leap year validation, starting from year 2000 only.
The length of the expression is minimized, but still validates all entries.
If you want it with years like 1600 or separators, just ask :)"
1033,,^(\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)$,"yyMMdd with leap years.
Minimized expression.
As we have only 2 numbers for the years, dates 1600, 2000, etc are still validated."
1034,,^([01]\d|2[0123])([0-5]\d){2}$,HHmmss without any separators. Hours in 24h format.
1036,,(^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$),This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...
1038,,^(((0[1-9]|1[012])/(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])/(29|30)|(0[13578]|1[02])/31)/[2-9]\d{3}|02/29/(([2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$,"MM/dd/yyyy with 100% leap year validation starting from year 2000.

If this one doesn't fit your needs, just tell me.
Sorry for starting &quot;only&quot; from year 2000, this is so simple to change this, please ask if needed.
Enjoy"
1039,,"^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$","Formatted Number with &quot;,&quot; as thousand separator and &quot;.&quot; as decimal separator. now accept numbers without separators of thousands."
1040,,wave/([A-Za-z0-9\s/\%\-_]+)(/)?,
1041,,"^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$","I need a pattern to match the whole number / integer (0-99999...), but also allow users to put comma in the thousand positions. 

This is what I got."
1042,,"\b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&amp;\?\:\\\&quot;\'\,\|\~\;]*)\b",Url matching
1045,,[B-Db-dF-Hf-hJ-Nj-nP-Tp-tV-Xv-xZz],"This simple reg-ex accepts any consonant character.
(Temporarily excluded, since Y need to be checked for whether it's combined with another vowel)."
1046,,[AaEeIiOoUuYy],This simple reg-ex accepts any vowel letter.
1049,,"^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$","Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place. 

Leading zeros on the left of the decimal are accepted.

Only positive values are accepted."
1050,,"^(\$)?(([1-9]\d{0,2}(\,\d{3})*)|([1-9]\d*)|(0))(\.\d{2})?$",Modified Joe Lynwood's to allow zero amounts.  Handles US Dollars including zero dollars.  
1051,,"((http\://|https\://|ftp\://)|(www.))+(([a-zA-Z0-9\.-]+\.[a-zA-Z]{2,4})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9%:/-_\?\.'~]*)?","This RE matches the web links which begin http://, ftp://, https:// or www. 
You can edit this disadvantage easy..."
1052,Currency,"^\$( )*\d*(.\d{1,2})?$",Validates US currency but allows for spaces between the dollar sign and dollar amount. If there is cents the period validates to two decimal places
1053,,/\*.+?\*/,Searches for SQL comments within a T-SQL statement...
1054,,([^\=&]+)(?<!param1|param2|param3)\=([^\=&]+)(&)?,"this regex eleminates all parameters from a html querry e.g.

param1=hans&amp;param2=5&amp;badparam=5

so bad param will be deleted from the params given. its usefull to clean up urls from unwanted params you not allow befor using the query string for further issues."
1055,,"^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$","Matchs comma delimited numbers. Easily changed to allow for other delimiters. (Edit &quot;,&quot;)
Does not allow a leading 0
Does not allow groups of numbers with less than 3 numbers, exculding the first group."
1056,,\{\\\*\\bkmkstart\s(.*?)\},"Applied to a .RTF document, returns all the names of the# bookmarks. Useful to  retrieve# dinamically#   the list of bookmarks from a document. "
1057,,"(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?","You can use this regular expression in your PHP scripts to convert entered URL in text to URL link. Example:
$text=ereg_replace(&quot;(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?&quot;,&quot;&lt;a href=\&quot;./redir.php?url=\\0\&quot; target=\&quot;_blank\&quot;&gt;\\0&lt;/a&gt;&quot;,$text);"
1059,,"""[^""\r\n]*""",returns string between two quotes
1060,,^\d{3}-\d{7}[0-6]{1}$,"Airway bill no that allows only the format 999-99999998 and does not allow the last digit to be 7,8,9."
1061,,(^.+\|+[A-Za-z]),Anti-Spam/Spam stopper: Detects all words with the character &quot;|&quot; instead of an &quot;l&quot; or &quot;1&quot;
1062,,"^\({0,1}0(2|3|7|8)\){0,1}(\ |-){0,1}[0-9]{4}(\ |-){0,1}[0-9]{4}$",Expression to parse Australian landline telephone numbers. Will only accept valid STD codes. Allows for brackets around the STD code and either spaces or dashes between number groups.
1063,,(^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$),Positive real number greater than zero.
1065,,"^([A-Z|a-z|&amp;]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$","Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of caracters for a person or corporation registration .

Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda."
1066,All existing TLDs (Top-Level Domains) according to IANA specifications,(a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]),This regexp matches all existing TLDs (Top-Level Domains) according to IANA specifications as of 14/07/2007.
1070,,"^((\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5]))$
",Matches valids TCP/IP-Adresses
1071,,^(((0?[1-9]|1[012])/(0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\d)\d{2}|0?2/29/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$,"MM/dd/yyyy with 100% leap years. Valid since year 1900.
MM and DD could have 1 or 2 digits : M/d/yyyy or MM/d/yyyy or M/dd/yyyy

This was a request from a user in http://www.regexlib.com/REDetails.aspx?regexp_id=1038"
1072,,"^(?=.*\d)(?=.*[a-zA-Z])(?!.*[\W_\x7B-\xFF]).{6,15}$","Password validator

Requires 6-20 characters including at least 1 upper or lower alpha, and 1 digit.

It should disallow just about everything else, inluding extended characters.
"
1075,,^([a-zA-Z].*|[1-9].*)\.(((j|J)(p|P)(g|G))|((g|G)(i|I)(f|F)))$,Regular expression to limit types of files accepted. This example matches .jpg and .gif files only.
1077,,^[^']*?\&lt;\s*Assembly\s*:\s*AssemblyVersion\s*\(\s*&quot;(\*|[0-9]+.\*|[0-9]+.[0-9]+.\*|[0-9]+.[0-9]+.[0-9]+.\*|[0-9]+.[0-9]+.[0-9]+.[0-9]+)&quot;\s*\)\s*\&gt;.*$,Matches the AssemblyVersion attribute in an Assembly.vb file. The version value is captured.
1078,,9[0-9],
1079,,"^(\$\ |\$)?((0|00|[1-9]\d*|([1-9]\d{0,2}(\,\d{3})*))(\.\d{1,4})?|(\.\d{1,4}))$","Allows for a dollar sign with no space after, a dollar sign with a space after, and no dollar sign.  Also makes sure theres no more than 4 decimal places.  Takes out leading zeros if the number isn't 0, and protects against blank entries."
1080,,^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\d{6}([A-D]|\s)$,"UK National Insurance (NI) Number, updated 14 Dec 2005 and current for 2006."
1081,,^[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}$,Simple Microsoft product key check.
1085,,"\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}\s.\s.\s\[\d{2}\/\D{3}\/\d{4}:\d{1,2}:\d{1,2}:\d{1,2}\s.\d{4}\]\s\&quot;\S*\s\S*\s\S*\&quot;\s\d{1,3}\s\S*\s\&quot;.*\&quot;\s\&quot;.*\&quot;","This RegExp makes sure a line in a log file matches the Apache Common log format:

LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common.

It is not very strict on what appears in the 'page', 'referer' or 'agent' fields, as this text can vary massively, plus it keeps the RegExp as fast as possible...

It was useful for me to check that logfiles on the server can be parsed by Log Analysis software I'm writing.

I hope someone finds it useful."
1086,,&amp;\#x0*(0|1|2|3|4|5|6|7|8|B|C|E|F|10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F);,"Can be used to match on (and strip out) low-order non-printable ASCII characters (ASCII 0-31) from string data prior to adding to an XML document.  Useful when using parsers like Microsoft's MSXML3 that strictly enforce W3C specification on allowable characters.  Does not match on ASCII 9 (horiz tab), 10 (carriage return), 13 (line feed)."
1087,,^[1-9]{1}[0-9]{3}\s?[a-zA-Z]{2}$,it matches dutch zip codes (postcode)
1091,,&lt;[iI][mM][gG]([^&gt;]*[^/&gt;]*[/&gt;]*[&gt;]),"This is a derivation of a few other image tag regex patterns I found on the site that didn't seem to work. This is my first regex, so if I did this wrong - apologies in advance! It works for me..."
1092,,&lt;[iI][fF][rR][aA][mM][eE]([^&gt;]*[^/&gt;]*[/&gt;]*[&gt;]),"My second ever regex - a derivation of an image tag pattern, use in conjunction with &lt;[iI][mM][gG]([^&gt;]*[^/&gt;]*[/&gt;]*[&gt;]) to remove advertisements from RSS feeds. Whee!"
1093,,"^[ .a-zA-Z0-9:-]{1,150}$","Belgian Carenet message Alphanumerical field - as described in the 'programmer's guide for carenet - Belgacom'. 
Only the following characters, ASCII, are authorised:
Space . - : 
Alphanumerical characters (a-z and A-Z)
Numerical characters (0-9)

Length is restricted to 150 chars"
1095,,(^(\d{2}.\d{3}.\d{3}/\d{4}-\d{2})|(\d{14})$)|(^(\d{3}.\d{3}.\d{3}-\d{2})|(\d{11})$),"Validador de CPF ou CNPJ brasileiro. Utilizado em campos que podem receber os dois valores, como um campo de busca, que pode buscar por CPF ou CNPJ, como era o meu caso.
[00.000.000/0000-00],   [123.456.789-98],[00000000000000] e [12345678998]

Enjoy! =)"
1096,,"^([1-9]{1}[\d]{0,2}(\.[\d]{3})*(\,[\d]{0,2})?|[1-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$","Numera&#231;&#227;o usar para valores moeda brasileira e de outras regi&#245;es. Dinheiro, money...

Enjoy! =)"
1098,,"(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}$)",Matching any valid MS Excel range
1099,,"(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}$)",A regular expression for any valid MS Excel range
1100,,\\\\\w+?(?:\\[\w\s$]+)+,Detect windows share path (unc path)
1101,,(^\d*\.\d{2}$),"If you need a textbox to allow only positive numbers with two decimal places, try this. I wanted the user to be able to enter any type of currency amount (US of course) but also have two decimal places for database field."
1102,,^[NS]([0-8][0-9](\.[0-5]\d){2}|90(\.00){2})\040[EW]((0\d\d|1[0-7]\d)(\.[0-5]\d){2}|180(\.00){2})$,"Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W) ,degrees,minutes,seconds.
Range check for minutes and seconds (0-59),
max.latitude 90.00.00, max longitude 180.00.00
"
1103,,^[http://www.|www.][\S]+$,a simple url validation
1105,,"((xmlns:.*?=[&quot;,'].*?[&quot;,'])|(xmlns=[&quot;,'].*?[&quot;,']))","XML Namespace ( xmlns ) matcher.  Properly matches one or more of either xmlns=&quot;blah&quot; or xmlns:blah=&quot;blooey&quot; .

(for c#, make sure to escape the double-quotes.)
"
1106,,"(?<=,)\s*(?=,)|^(?=,)|[^\""]{2,}(?=\"")|([^,\""]+(?=,|$))","Use for parsing CSV files exported from MS Excel, This program adds or not quotes, so it's more complicated..
Use for parsing individual lines, the Regex doesn't capture end of line (supposed to ($) but not made it in the testing so you cannot parse the whole file.
Read a line and split it, with this regex
"
1107,,/\*[\d\D\s]*\*/,"Matches /* style comments */. 
Matches whitespace (so can detect tabs, etc.)"
1108,,/\*((?!\*/)[\d\D\s])*\*/,"Matches /* style comments */. 
Matches whitespace (so can detect tabs, etc.)

Problems with nested comments. "
1109,,^(([0-9]{5})*-([0-9]{4}))|([0-9]{5})$,"Accepts valid US Postal Code - either 5 digit, or extended   "
1111,,"(?=^.{6,10}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\s).*$","This regular expression match can be used for validating strong password. It expects atleast 1 small-case letter, 1 Capital letter, 1 digit, 1 special character and the length should be between 6-10 characters. The sequence of the characters is not important. This expression follows the above 4 norms specified by microsoft for a strong password."
1114,,"^[1-9]{3}\s{0,1}[0-9]{3}$",Pattern for Indian Postal Code.
1115,IPv6 address,^([0-9a-fA-F]{4}|0)(\:([0-9a-fA-F]{4}|0)){7}$,IPv6 address (128 bit). Matches hexadecimal patterns and single 0 in the address.
1116,Port Numbers,"^(102[0-3]|10[0-1]\d|[1-9][0-9]{0,2}|0)$",Port Numbers: Well Known Ports: 0 through 1023.  Matches numbers in range of 0 through 1023.
1117,Port Numbers,^(4915[0-1]|491[0-4]\d|490\d\d|4[0-8]\d{3}|[1-3]\d{4}|[2-9]\d{3}|1[1-9]\d{2}|10[3-9]\d|102[4-9])$,Port Numbers: Registered Ports: 1024 through 49151.  Matches numbers in range of 1024 through 49151.
1118,Port Numbers,^(6553[0-5]|655[0-2]\d|65[0-4]\d\d|6[0-4]\d{3}|5\d{4}|49[2-9]\d\d|491[6-9]\d|4915[2-9])$,Port Numbers: Dynamic and/or Private Ports: 49152 through 65535.  Matches numbers in range of 49152 through 65535.
1119,Port Numbers,"^(4915[0-1]|491[0-4]\d|490\d\d|4[0-8]\d{3}|[1-3]\d{4}|[1-9]\d{0,3}|0)$",Port Numbers: Well Known Ports &amp; Registered Ports: 0 through 49151.  Matches numbers in range of 0 through 49151.
1120,Port Numbers,"^(6553[0-5]|655[0-2]\d|65[0-4]\d\d|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}|0)$","Port Numbers: Well Known Ports, Registered Ports &amp; Dynamic and/or Private Ports: 0 through 65536.  Matches numbers in range of 0 through 65536."
1121,URL,"^((([hH][tT][tT][pP][sS]?|[fF][tT][pP])\:\/\/)?([\w\.\-]+(\:[\w\.\&%\$\-]+)*@)?((([^\s\(\)\<\>\\\""\.\[\]\,@;:]+)(\.[^\s\(\)\<\>\\\""\.\[\]\,@;:]+)*(\.[a-zA-Z]{2,4}))|((([01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}([01]?\d{1,2}|2[0-4]\d|25[0-5])))(\b\:(6553[0-5]|655[0-2]\d|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}|0)\b)?((\/[^\/][\w\.\,\?\'\\\/\+&%\$#\=~_\-@]*)*[^\.\,\?\""\'\(\)\[\]!;<>{}\s\x7F-\xFF])?)$","Matches a URL string by: protocol,subdomain,domain,ip address,port number,path and/or filename"
1122,Time,^((0?[1-9]|1[012])(\s*:\s*([0-5]\d))?(\s*:\s*([0-5]\d))?(\s*([AaPp])[Mm]?)$|(2[0-3]|[1]\d|0?\d)(\s*:\s*([0-5]\d))(\s*:\s*([0-5]\d))?)$,Matches a time string.  A loose validation for easy user entry. Saves the information needed for a correct time setting.
1123,,"(^[0-9]{0,10}$)",Good For Validating Phone numbers that are 0 to 9 in length
1124,,&lt;a[a-zA-Z0-9 =&quot;'.:;?]*(name=){1}[a-zA-Z0-9 =&quot;'.:;?]*\s*((/&gt;)|(&gt;[a-zA-Z0-9 =&quot;'&lt;&gt;.:;?]*&lt;/a&gt;)),"This expression matches only valid html anchors. Those are anchors with an attribute name=. Such anchor can be closed either with &lt;/a&gt; or with /&gt;.

If someone can help - one thing still missing is not matching html tags with parameter href, becazse such should be considered as non valid anchors."
1125,,"^\$?([1-9][0-9]{3,}(\.\d{2})?|(\d{1,3}\,\d{3}|\d{1,3}\,\d{3}(\.\d{2})?)|(\d{1,3}\,\d{3}|\d{1,3}\,\d{3}\,\d{3}(\.\d{2})?)*)?$
",Currency which cannot be less than $1000 and lower than a billion.
1128,,&lt;a[a-zA-Z0-9 =&quot;'.?_/]*(href\s*=\s*){1}[a-zA-Z0-9 =&quot;'.?_/]*\s*((/&gt;)|(&gt;[a-zA-Z0-9 =&quot;'&lt;&gt;.?_/]*&lt;/a&gt;)),"An expression that matches all XHTML valid hrefs (links). It even alows spaces like href = &quot;href...&quot;, dough this is not quite XHTML valid. It finds only hrefs but not for instance anchors. If you need to find only anchors, replace &quot;href&quot; within expression with &quot;name&quot; and thats it."
1129,,(([a-zA-Z]{3}[0-9]{3})|(\w{2}-\w{2}-\w{2})|([0-9]{2}-[a-zA-Z]{3}-[0-9]{1})|([0-9]{1}-[a-zA-Z]{3}-[0-9]{2})|([a-zA-Z]{1}-[0-9]{3}-[a-zA-Z]{2})),"Dutch licenceplate check also including scooters#
ABC123#
12-AB-AB#
12-ABC-1#
1-ABC-12#
A-123-AB#"
1131,Oracle Binding Variables,"(:[a-z]{1}[a-z1-9\$#_]*){1,31}",This matches oracle binding variables in SQL.  Not sure if it is the same with other RDBMS'
1133,,^([A-Z\d]{3})[A-Z]{2}\d{2}([A-Z\d]{1})([X\d]{1})([A-Z\d]{3})\d{5}$,US vehicle VIN numbers for vehicles with GVW &lt; 10k lbs
1135,,(?<!\\)\[(\\\[|\\\]|[^\[\]]|(?<!\\)\[.*(?<!\\)\])*(?<!\\)\],"This regular expression will find the highest level groups within recursive tokens. For instance, if I have &quot;This is [just [an] example] of the [expression]&quot;, it'll find [just [an] example] and [expression], and nothing else. It will also not find an escaped bracket expression. If you want to replace the bracket with curly braces or parenthesis, be careful. As an example, curly braces will be: (?&lt;!\\)\{(\\\{|\\\}|[^\{\}]|(?&lt;!\\)\{.*(?&lt;!\\)\})*(?&lt;!\\)\}"
1136,,"^[0-9,+,(), ,]{1,}(,[0-9]+){0,}$",It could be used to validate local as well as International Phone nos where the number my be preceeding by + sign for(00) and may have brackets to accept the city code like (22).It will also accept space in between like 001 116 23314
1137,,"^(.){0,20}$",This limits an HTML textarea to only be 20 characters.  Built for an ASP:regularexpression tag to validate a textarea.
1139,,^((\d|[1-9]\d|2[0-4]\d|25[0-5]|1\d\d)(?:\.(\d|[1-9]\d|2[0-4]\d|25[0-5]|1\d\d)){3})$,validates a simple ip v4 address. including 0.0.0.0 or 255.255.255.255. leading 0 is and numbers above 255 are forbitten.
1142,,"^\+?\(?\d+\)?(\s|\-|\.)?\d{1,3}(\s|\-|\.)?\d{4}$",Simply matches a telephone number. Not meant to be extremly accurate but more for q uick match or extracting from a body of text. Does not support extensions
1143,,"^\+?\(?\d+\)?(\s|\-|\.)?\d{1,3}(\s|\-|\.)?\d{4}$",Simply matches a telephone number. Not meant to be extremly accurate but more for q uick match or extracting from a body of text. Does not support extensions
1144,,^[1-9]+[0-9]*$,"Allows only positive numbers, greater than zero"
1145,,"(?=^.{6,51}$)([A-Za-z]{1})([A-Za-z0-9!@#$%_\^\&amp;\*\-\.\?]{5,49})$","This expression was originally developed for user names.  Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:
 ! @ # $ % ^ &amp; * - . _ ?"
1146,,([^a-zA-Z0-9]),"(Corrected)
This pattern will match 1 instance of a NON-alphanumeric character. This is very handy to use when y
ou want to filter input only by alphanumeric characters, by using Regex.Replace.

However, when used in a Regex.Replace, it will replace all instances of non-alphanumeric characters 
with specified character."
1147,,^([a-zA-Z][a-zA-Z\&amp;amp;\-\.\'\s]*|)$,"This expression will allow Letters, periods, apostrophe, dashes. "
1148,,\b(get)\b.*{,This piece of regex catches the if the open braces are not placed the line under a get command
1149,,\bfor\b.*[A-Za-z][&lt;&gt; ][\d],This regex catches the hard-coded for blocks
1150,,\b(byte|char|short|long|float|int|double|decimal|bool|string)\b.*\s[a-zA-Z](?=;),This regex catches if the variable isn't initialized when it is declared
1151,,(\bprotected\b.*(public))|(\bprivate\b.*(protected))|(\bprivate\b.*(public)),This regex catches illegal precedence order of declerations of a class
1152,,\b(\w+).\1,This regex catches the redundacy of including class names in the name of class properties. 
1153,,"\b(public|private|protected|internal)\b.*(byte|char|short|long|float|int|double|decimal|bool|string)\b.*(?=,)",This regex forces the programmer to make only one decleration per line.
1154,,((\bm_[a-zA-Z\d]*\b)|(\bin_[a-zA-Z\d]*\b)|(\bin _[a-zA-Z\d]*\b)),This regex limits the use of any special prefix characters to indicate that the variable is scoped to the class. 
1155,,\binterface\b.*(\bI[_]\w*\b),This regex forbids the use of underscore in the interface decleration.
1162,,^[1-9]{1}[0-9]{3}$,This expression matches most swiss postal codes
1163,,^[1-9]{1}[0-9]{3}$,This expression should match with most Portugese Post codes
1164,,^([0][1-9]|[1-4[0-9]){2}[0-9]{3}$,Matches spanish postcodes
1165,,(^\d{5}\-\d{3}$)|(^\d{2}\.\d{3}\-\d{3}$)|(^\d{8}$),"This is a correction from regex by Fernando Cerqueira. It validates brazilian zip codes, aka CEP, with or without mask."
1167,,"^((100)|(\d{0,2}))$","Matches any positive integer (and blank) between 1 and 100 useful for validating input of a percentage, or nothing."
1168,,^[a-zA-Z]+((\s|\-|\')[a-zA-Z]+)?$,"This is an extension of already existing expression submitted. It checks for characters, hyphen and single quotes. Single quote and hyphen cannot appear at the beginning or at the end."
1169,,^[0-9]{5}$,A simple expression for algerian postcodes
1170,,^([A-Z]{2}[0-9]{3})|([A-Z]{2}[\ ][0-9]{3})$,Expression for matching andorran postcodes
1171,,^[A][Z](.?)[0-9]{4}$,Expression to test for valid postcodes for azerbaijan
1172,,^([1][0-9]|[0-9])[1-9]{2}$,Simple postcode validation for postcodes for bahrain
1173,,^[1-9][0-9]{3}$,Simple expression to validate bangladeshi postcodes
1174,,^[0-9]{6}$,Simple validation expression for postcodes for Belarus
1175,,^([A-Z]{2}[\s]|[A-Z]{2})[\w]{2}$,An expression to validate postcodes for bermuda
1176,,^[B|K|T|P][A-Z][0-9]{4}$,This is a simple expression to validate postcodes from Brunei
1177,,^[0-9]{3}[-][0-9]{4}$,Simple Postcode validation expression for Chile
1178,,^[H][R][\-][0-9]{5}$,Simple expression for internationally formatted croatian postcodes.
1179,,^[0-9]{4}$,Simple validation expression for cyprus postcodes
1180,,^[0-9]{5}$,Simple expression for validation of egyptian postcodes
1181,,^[0-9]{5}$,Simple expression to match estonian postcodes
1182,,^[1-9][0-9]{3}$,Simple expression to validate ethiopian post codes
1183,,^[F][O][\s]?[0-9]{3}$,Simple expression to validate postcodes for the faroe islands
1184,,^[0-9]{5}$,Simple expression for matching postcodes for French Polynesia
1185,,^[9][7|8][1|0][0-9]{2}$,Simple validation expression for postcodes in guadeloupe
1186,,^[0-4][0-9]{2}[\s][B][P][\s][0-9]{3}$,This is a simple expression for testing postcodes in Guinea
1187,,^[1-9][0-9]{3}$,Simple expression for validating postcodes for guinea-bissau
1188,,(<[^>]*?tag[^>]*?(?:identify_by)[^>]*>)((?:.*?(?:<[ \r\t]*tag[^>]*>?.*?(?:<.*?/.*?tag.*?>)?)*)*)(<[^>]*?/[^>]*?tag[^>]*?>),"This Pattern matches a HTML like tag and its closing tag without any childtags, that was identified by an attribute or anything identifiable (?) mark inside the opening tag.
Look for A as Tag and 1 ans identifier. A greedy expression woulds usualy end at the A 2 closing tag, non-greedy will probably end at the A 3 end tag.
e.g.:
&lt;A 1&gt;
 &lt;A 2&gt;
  &lt;A 2&gt;dfgdfg&lt;/A&gt;
 &lt;/A&gt;
&lt;Z&gt;&lt;/Z&gt;
&lt;/A&gt;
&lt;A 3&gt;
&lt;/A&gt;

Returns:
0 Full Match
1 Whole starttag
2 Content inside the tag
3 Whole endtag

P.S.: I use it in a parser, to find tags and add code to them, without to know the code, the content or any further infomation."
1190,,(?<=(?:\\))[a-zA-Z0-9\-\s_]*(?=(?:\.\w*$)),"WINDOWS ONLY
Useful to get the filename whenever you get it from anysource, recommended for non-critical filename-dependant applications."
1193,,&lt;!\[CDATA\[([^\]]*)\]\]&gt;,"for getting cdata from and xml document.
cdata returns in $1.
it's not perfect as you can see from the non-matching examples.  improvements needed - but this works for most scenario's.
"
1194,,^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)+$,
1195,,\s(type|name|value)=(?:(\w+)|(?:&quot;(.*?)&quot;)|(?:\'(.*)\')),"Returns the three most important attributes from an HTML &lt;input&gt; tag: 'type', 'name' and 'value'. Supports attribute values that are double- or single-quoted or unquoted. Returns four references, the first being the name of the attribute, and the other three being the value, of which only one will be populated based on the way the value was quoted."
1196,,^[01]?[- .]?\(?(?!\d[1]{2})[2-9]\d{2}\)?[- .]?(?!\d[1]{2})\d{3}[- .]?\d{4}$,"A combination of W. D. and JP Honeywell's U.S./Canada phone expressions, but this does allow the legal (but rare) 555 exchange number and forces an area code."
1197,CSV Parser,"((?:[^"",]|(?:""(?:\\{2}|\\""|[^""])*?""))*)","Very simple (but very useful!) regex to split CSV files.  It does not drop the commas - you have to do that manually.  Quotes are dealt with properly and escaped quotes are ignored.  Matches from sample:this is ;a;""line,\""in\""a"";csv;file"
1198,Query String Ampersand Replacer,&(?!amp;),Used to replace lone ampersands in query strings with their &amp;amp; counterparts.  
1199,,"&lt;input[^&gt;]*?type[/s]*=[/s]*(['|&quot;]?)text\1[^&gt;]*?value[/s]*=[/s]*(['|&quot;])(.*?)\2[^&gt;]*?&gt;



","&lt;input[^&gt;]*?value[/s]*=[/s]*(['|&quot;])(.*?)\1[^&gt;]*?type[/s]*=[/s]*(['|&quot;]?)text\3[^&gt;]*?&gt;

A pair of reg ex's to capture the value from an &lt;input type=text&gt; - depending on whether the type or value is listed first in the tag.

For some reason, when I combine them as a []|[] form regex, they don't work at all any more.

The font on this site doesn't show the difference, but the last matching expression has a &quot; character, the last non-matching one has two ' characters.  The last non-matching exp matches (with the typo in value fixed), but doesn't return the value correctly, any help with that would be appreciated. (this is my first commercially-used regex... I'm new to this still)
"
1200,,&lt;select(.|\n)*?selected(.|\n)*?&gt;(.*?)&lt;/option&gt;(.|\n)*?&lt;/select&gt;,"All useful examples are multi-line, so not displayed.

this will match any &lt;select&gt;&lt;/select&gt; block in an HTML document, and the return $3 will contain the displayed text (NOT the value of the displayed option)

"
1201,,&lt;textarea(.|\n)*?&gt;((.|\n)*?)&lt;/textarea&gt;,"Matches any textarea block, and returns the text inside it."
1202,,&lt;img .+ src[ ]*=[ ]*\&quot;(.+)\&quot;,Gets the image url in an HTML &lt;IMG&gt; tag.
1203,,^[0-9\s\(\)\+\-]+$,"Telephone number validation. Validates a telephone number which contains either 0-9,(,),+,- and space. Let me know if it works for you. :)"
1204,,"^((67\d{2})|(4\d{3})|(5[1-5]\d{2})|(6011))-?\s?\d{4}-?\s?\d{4}-?\s?\d{4}|3[4,7]\d{13}$","Credit Card Matching - Matches Switch, Solo, Visa, MasterCard and Discover. Matches length and valid prefix. Accepts input optional spaces and dashes between number groups"
1205,,"^((67\d{2})|(4\d{3})|(5[1-5]\d{2})|(6011))(-?\s?\d{4}){3}|(3[4,7])\d{2}-?\s?\d{6}-?\s?\d{5}$","Credit Card Validation. Matches Switch/Solo, Visa, MasterCard and Discover in 4-4-4-4/4 4 4 4/4444 format and Amex in 4-6-5/4 6 5/465 format.
Includes checks for prefixes, (67 for switch/solo, 4 for visa, 51-55 for MasterCard, 37/34 for Amex and 6011 for Discover. 
Matches all major UK debit and credit cards with spaces dashes or as a continous number"
1207,,^[a-z\.]*\s?([a-z\-\']+\s)+[a-z\-\']+$,"Matches Names - written for credit card matching. 
Optional Prefix that can contain a fullstop, one or more forenames that can contain hyphens and apostrophes followed by a surname that can contain hyphens and apostrophes"
1208,,\\red([01]?\d\d?|2[0-4]\d|25[0-5])\\green([01]?\d\d?|2[0-4]\d|25[0-5])\\blue([01]?\d\d?|2[0-4]\d|25[0-5]);,"This RegEx will match a RTF color taken from a color tabel in a RTF document (having the form '\redXXX\greenXXX\blueXXX;', where XXX is a number between 0 and 255)."
1209,,'&quot;,
1210,,&lt;script[\s\S]*?&lt;/script([\s\S]*?)&gt;,This pattern is intended to remove all javascript blocks from a chunk of code.  EDIT: a bug is cutting off additional matches.
1211,,"[\x01-\x08,\x0A-\x1F,\x7F,\x81,\x8D,\x8F,\x90,\x9D]",We had a need to cleanse webservice replies where the call behind the webmethod went to a legacy mainframe through a thunked middle tier. The escaped chars being in the reply broke the reply stream.  This exp when used in regex.replace within the webmethod will replace the garbage with chars of your choice. 
1212,,"([,!@#$%^&*()\[\]]+|\\\.\.|\\\\\.|\.\.\\\|\.\\\|\.\.\/|\.\/|\/\.\.|\/\.|;|(?<![A-Z]):)","Checks file paths for offending characters

A successful file path is one that does not return a match"
1214,,"(?:[\w]*) *= *""(?:(?:(?:(?:(?:\\\W)*\\\W)*[^""]*)\\\W)*[^""]*"")","This Pattern matches HTML attributes with quoted quotes or other non-word characters correctly. I used it in an parser-engine.
Replace the quotes in this RX to match other boundaries."
1217,,"((http|ftp|https):\/\/w{3}[\d]*.|(http|ftp|https):\/\/|w{3}[\d]*.)([\w\d\._\-#\(\)\[\]\\,;:]+@[\w\d\._\-#\(\)\[\]\\,;:])?([a-z0-9]+.)*[a-z\-0-9]+.([a-z]{2,3})?[a-z]{2,6}(:[0-9]+)?(\/[\/a-z0-9\._\-,]+)*[a-z0-9\-_\.\s\%]+(\?[a-z0-9=%&amp;\.\-,#]+)?","Here is my first regexp. I hope you like it! It parses quite a few different urls, although it's not a high-quality regexp. Http, Ftp protocols are supported, parameters and anchors too."
1218,,Password=&quot;(\{.+\}[0-9a-zA-Z]+[=]*|[0-9a-zA-Z]+)&quot;,Matches unencrypted or encrypted SAS password in OMR configuration files
1219,,^[-]?P(?!$)(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?!$)(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$,Matches the XSD schema duration built in type as defined by http://www.w3.org/TR/xmlschema-2/#duration
1221,,"^\d{2,6}-\d{2}-\d$","Chemical Abstract Service Registry Number (CAS Nr). Identify chemical substance or mixture.
(http://www.cas.org/New1/casinfo.html)"
1222,,CZ\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|CZ\d{22},International Bank Account Number (IBAN) Czech. Identify Bank account in Czech Republic.
1223,,SK\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|SK\d{22},International Bank Account Number (IBAN) Slovak. Identify Bank account in Slovak Republic. 
1224,,AD\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|AD\d{22},International Bank Account Number (IBAN) Andorra. Identify Bank account in Andorra.
1225,,ES\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|ES\d{22},International Bank Account Number (IBAN) Spain. Identify Bank account in Spain.
1226,,SE\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|SE\d{22},International Bank Account Number (IBAN) Sweden. Identify Bank account in Sweden.
1227,,"CH\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{1}|CH\d{19}
",International Bank Account Number (IBAN) Switzerland. Identify Bank account in Switzerland.
1228,,DE\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{2}|DE\d{20},International Bank Account Number (IBAN) Germany. Identify Bank account in Germany.
1229,,PL\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|PL\d{26},International Bank Account Number (IBAN) Poland. Identify Bank account in Poland.
1231,,"^(?:(?:[^@,""\[\]\x5c\x00-\x20\x7f-\xff\.]|\x5c(?=[@,""\[\]\x5c\x00-\x20\x7f-\xff]))(?:[^@,""\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,""\[\]\x5c\x00-\x20\x7f-\xff]|\x5c(?=[@,""\[\]\x5c\x00-\x20\x7f-\xff])|\.(?=[^\.])){1,62}(?:[^@,""\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,""\[\]\x5c\x00-\x20\x7f-\xff])|""(?:[^""]|(?<=\x5c)""){1,62}"")@(?:(?:[a-z0-9][a-z0-9-]{1,61}[a-z0-9]\.?)+\.[a-z]{2,6}|\[(?:[0-1]?\d?\d|2[0-4]\d|25[0-5])(?:\.(?:[0-1]?\d?\d|2[0-4]\d|25[0-5])){3}\])$",just another email validation perl regexp. I tryed to follow as much as possible the RFC 3696 don't hesitate to report.
1232,,^[0-9]*\/{1}[1-9]{1}[0-9]*$,This regular expression checks if the given string is a fraction. This does not allow 0 either in the numerator or the denominator.
1233,,^\\\\[\w-]+\\(([\w()-][\w\s()-]*[\w()-]+)|([\w()-]+))\$?(\\(([\w()-][\w\s()-]*[\w()-]+)|([\w()-]+)))*\\?$,"Validation of a directory (not file) in UNC format

Checks for \\server\share\subdir, where subdirs are optional.
Share may have a $, but only at the end.
Shares and subdir may have embedded spaces.
String may optionally have a trailing slash."
1234,Fraction numbers,(?:-(?!0))?\d+(?:(?: \d+)?/\d+)?,"This regexp matches string which represents a fraction.
This fraction can be in these forms:<br />
1. # or -# (not -0)<br />
2. #/# or -#/# (not -0/#)<br />
3. # #/# or -# #/# (not -0 #/#)"
1236,,"^(0|([1-9]\d{0,3}|[1-5]\d{4}|[6][0-5][0-5]([0-2]\d|[3][0-5])))$","Matches TCP port numbers from 0 to 65535. Other than '0', no leading 0's are accepted."
1237,,^((25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]\.){3}(25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]))$,"This Regular Expression matches all valid ip-patterns.
01.02.03.04 is not matched, as leading zeros is not valid a ip-pattern.
255.255.255.0 is not matched, as 255 is a broadcast identifier, and as such not allowed in ip-patterns."
1238,,"^((CN=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(OU=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(DC=['\w\d\s\-\&amp;]+[,]*\s*){1,}(DC=['\w\d\s\-\&amp;]+\s*){1})$","Matches LDAP path (AdsPath) in Active Directory. Modified version of regex which has been found in library. 
Accepts spaces after , character. Also \/ and \, sequences (escapes) in CN or OU name are accepted."
1239,,"^5[1-5][0-9]{14}$

# First character is 5
# Second character is 1-5
# Last 14 characters 0-9","Validates Mastercard credit card

"
1240,,[ ]*=[ ]*[\&quot;]*cid[ ]*:[ ]*([^\&quot;&lt;&gt; ]+),"This is a Microsoft .NET/Mono regular expression that can be used to find the address of an embedded image inside an HTML email body.

The address will be the 2nd group found in the match."
1241,,^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.((html|HTML)|(htm|HTM))$,Path of files HTML and HTM
1243,,[\u0410-\u042F\u0430-\u044F]+, Maches small and big cyrillic letters. Using Unicode codes.
1244,,\s?\b((?!\b50\b|\b00\b)\w*)\b\s?,"This Expression exclude any word/code from a sentence.
To find out all the words except any specific codes/words use this. In this example we will exclude 50 and 00 and find all other words in the sentence.

Example Text: &quot;Ask me 50 00 times&quot;
Matches:Ask,me,times

Here it ignores 50 and 00 and matches the other words. Modify according to your needs. I excluded 50 or 00.
"
1246,,^(^N[BLSTU]$)|(^[AMN]B$)|(^[BQ]C$)|(^ON$)|(^PE$)|(^SK$)$,used to match standard province codes in upper case.
1247,,^(([+]31|0031)\s\(0\)([0-9]{9})|([+]31|0031)\s0([0-9]{9})|0([0-9]{9}))$,Expression to check Dutch phone numbers. Number must start with zero and number of digits should be 10. Different area and country codes are allowed.
1248,,^[0-9]{10}$|^\(0[1-9]{1}\)[0-9]{8}$|^[0-9]{8}$|^[0-9]{4}[ ][0-9]{3}[ ][0-9]{3}$|^\(0[1-9]{1}\)[ ][0-9]{4}[ ][0-9]{4}$|^[0-9]{4}[ ][0-9]{4}$,"Australian phone numbers including Mobiles and common spacing used. This is used only to test normal contact numbers for residential purposes for example not information lines like 139999.

Other Matching:
9999999999, 9999 9999, (09)99999999"
1250,,^(N[BLSTU]|[AMN]B|[BQ]C|ON|PE|SK)$,"Matches Canadian provincial codes. Similar to the one already posted but smaller, faster, and will correctly return the results in one match group rather than using several so it's much friendlier."
1252,,^(0?[1-9]|1[012])$,This will match numbers between 0 and 12.  The 0? at the beginning will allow &quot;01&quot; as a valid match.  This is useful for validation the month only component of a date part.
1253,,^([12]?[0-9]|3[01])$,This will match numbers in the range 1-31.  This is useful for matching the day component of a datetime part.
1254,,^((18[5-9][0-9])|((19|20)[0-9]{2})|(2100))$,Will check to ensure the data is between 1850 and 2100.
1255,,"(^(((GIR)\s{0,1}((0AA))))|(([A-PR-UWYZ][0-9][0-9]?)|([A-PR-UWYZ][A-HK-Y][0-9][0-9]?)|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s{0,1}([0-9][ABD-HJLNP-UW-Z]{2})$)","United Kingdom Postcode expression, modified for use with Microsoft.Net regular expression validations.
( see http://www.govtalk.gov.uk/gdsc/html/frames/PostCode.htm 
and
http://www.govtalk.gov.uk/gdsc/schemas/bs7666-v2-0.xsd )"
1256,,^04[0-9]{8},Australian mobile phone number
1257,,(?!&lt;a.*)text(?!.*a&gt;),"This regular expression will match all occurances of &quot;text&quot; that occur outside of an anchor tag.

It can be expanded to match occurances of &quot;text&quot; outside of other tags as well just by replacing &quot;a&quot; with whichever other tag you'd like.

It matches &quot;text&quot; even if there is other text before or after it inside of the tag.

Enjoy!"
1258,,"0{3,}|1{3,}|2{3,}|3{3,}|4{3,}|5{3,}|6{3,}|7{3,}|8{3,}|9{3,}",An expression to look for numbers that repeat 3 or more times in succession.
1259,,"^(?:[\w]+[\&amp;\-_\.]*)+@(?:(?:[\w]+[\-_\.]*)\.(?:[a-zA-Z]{2,}?))$","This validates an email address and only an email address. None of the &lt;email&gt; stuff, just user@email.whatever. Comments are more then welcome."
1261,,^[a-zA-Z]{1}[-][0-9]{7}[-][a-zA-Z]{1}$,"Spanish NIE Number. Currently ignores case, but seems to work quite nicely."
1263,,"((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)\:\/\/([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@){0,1}((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]{2,5}[^:]){0,1}(\/(\s+|$|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+)){0,1})","Modified version of Brian Bothwell's valid url submission. Eliminates a couple of the user discovered bugs, expands protocol recognition and considers trailing /"
1264,Valid IP,\b(((?!\d\d\d)\d+|1\d\d|2[0-4]\d|25[0-5])(\b|\.)){4},match valid ip
1267,,(.*\.jpe?g|.*\.JPE?G),"I just couldn't find any simple expression to check if an entered value is a jp(e)g.

If you're using this to check for e.g. mp3, just use the following:
(.*\mp3|.*\.MP3)

This expression is not really stable, cause it will also match file.jpg.mp3 or stuff like that."
1268,,"^(\w+=[^\s,=]+,)*(\w+=[^\s,=]+,?)?$",validate comma separated key/value pair
1270,,^((([A-PR-UWYZ](\d([A-HJKSTUW]|\d)?|[A-HK-Y]\d([ABEHMNPRVWXY]|\d)?))\s*(\d[ABD-HJLNP-UW-Z]{2})?)|GIR\s*0AA)$,matches uk postcodes according to specifications found at: http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm
1271,,"^(((((0[1-9])|(1\d)|(2[0-8]))\/((0[1-9])|(1[0-2])))|((31\/((0[13578])|(1[02])))|((29|30)\/((0[1,3-9])|(1[0-2])))))\/((20[0-9][0-9])|(19[0-9][0-9])))|((29\/02\/(19|20)(([02468][048])|([13579][26]))))$",matches a date in dd/mm/yyyy format
1272,,^(0|(-?(((0|[1-9]\d*)\.\d+)|([1-9]\d*))))$,matches a double number 
1275,,e(vi?)?,Prueba
1276,,e(vi?)?,Prueba
1277,,e(vi?)?,Prueba
1278,,(vi(v))?d,Prueba
1280,,"(?=^.{6,10}$)(?=.*\$)(?=.*[a-z])(?=.*[A-Z])(?=.*[!~@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\s).*$",reg
1281,,^(([A-Za-z]+[^0-9]*)([0-9]+[^\W]*)([\W]+[\W0-9A-Za-z]*))|(([A-Za-z]+[^\W]*)([\W]+[^0-9]*)([0-9]+[\W0-9A-Za-z]*))|(([\W]+[^A-Za-z]*)([A-Za-z]+[^0-9]*)([0-9]+[\W0-9A-Za-z]*))|(([\W]+[^0-9]*)([0-9]+[^A-Za-z]*)([A-Za-z]+[\W0-9A-Za-z]*))|(([0-9]+[^A-Za-z]*)([A-Za-z]+[^\W]*)([\W]+[\W0-9A-Za-z]*))|(([0-9]+[^\W]*)([\W]+[^A-Za-z]*)([A-Za-z]+[\W0-9A-Za-z]*))$,"Password with minimum 1 Letter (A-Za-z), 1 Number (0-9) and Special Character (\W). It doesn't matter the charaters position. See the Mathching Examples.

Question? Write an Email to me."
1282,,"(^(\d+)$)|(^(\d{1,3}[ ,\.](\d{3}[ ,\.])*\d{3}|\d{1,3})$)","Searches for number greater than 0 with thousand delimiter as space, comma or period."
1283,,&lt;table&gt;(&lt;tr&gt;((&lt;td&gt;([A-Za-z0-9])*&lt;/td&gt;)+)&lt;/tr&gt;)*&lt;/table&gt;,"This accepts html's tables, with rows and colums.
Acepta tablas Html, con sus respectivas filas y columnas."
1284,,^(958([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)|(958-([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)$,"it accepts Granada's numbers telephone. 
Acepta n&#250;meros de tel&#233;fono de Granada (espa&#241;a)"
1285,,"(\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*(\s)*(\()(\s)*((int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*((\s)*[,](\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*)*)?(\s)*(\))(\s)*;","C++ prototipes.
It is necessary to write a \s before a variable or function
identifier."
1286,,(?:/\*[\w\W]*?\*/|//[^\n]*?$|\#[^\n]*?$),Return all comment lines (starts with //) and regions (serounded by /* */) as well as compiler arguments (#) in C# code
1287,,^((l((ll)|(b)|(bb)|(bbb)))|(bb*))$,"Regular expression to recognise messages formed with &quot;beeps&quot; of IBM mainboards, when the computer makes the Power On Self Test. &quot;b&quot; means &quot;short beep&quot;, and &quot;l&quot; means &quot;long beep&quot;."
1288,,^3(?:[47]\d([ -]?)\d{4}(?:\1\d{4}){2}|0[0-5]\d{11}|[68]\d{12})$|^4(?:\d\d\d)?([ -]?)\d{4}(?:\2\d{4}){2}$|^6011([ -]?)\d{4}(?:\3\d{4}){2}$|^5[1-5]\d\d([ -]?)\d{4}(?:\4\d{4}){2}$|^2014\d{11}$|^2149\d{11}$|^2131\d{11}$|^1800\d{11}$|^3\d{15}$,"For credit card numbers from MC, Visa, Amex, Diners/CarteBlanche, Discover/Novus, Enroute, and JCB.  Does as much as I feel is possible using regex (doesn't do MOD 10).  Javascript safe."
1289,,"<a[a-zA-Z0-9 =""'.:;?]*(href=[\""\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\""\'])*(>[a-zA-Z0-9 =""'<>.:;?]*</a>)","i've merged two regular expression those i found on this site. thanks to the owners &quot;Aleš Potocnik and 
Andrew Lee &quot;. i used their expression to make mine. this expression finds the URL/Hyperlink with the HTML tags."
1290,,&lt;a [a-zA-Z0-9 =&quot;'.:;?]*href=*[a-zA-Z0-9 =&quot;'.:;&gt;?]*[^&gt;]*&gt;([a-zA-Z0-9 =&quot;'.:;&gt;?]*[^&lt;]*&lt;)\s*/a\s*&gt;,you can find all the hyperlinks with their caption and attributes. in other words you can find anchors with their attributes and label or value.
1291,Accurate IP address verification,"^((0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})\.){3}(0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})$","Accurate IP address verification...

Each numeric part of an IP address must be between 0 and 255. All patterns I have seen on the net cover this range but they allow leading zeros. The valid cases are:
* 0
* 1, 10-19 and 100-199 aka 1[0-9]{0,2}
* 2 and 20-29 aka 2[0-9]{0,1}
* 200-249 aka 2[0-4][0-9]
* 250-255 aka 25[0-5]
* 3-9 and 30-99 aka [3-9][0-0]{0,1}"
1292,Australian postal code verification,^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$,"Accurate Australian postal code verification.

Australia has 4-digit numeric postal codes with the following state based specific ranges. 
ACT: 0200-0299 and 2600-2639. 
NSW: 1000-1999, 2000-2599 and 2640-2914. 
NT: 0900-0999 and 0800-0899. 
QLD: 9000-9999  and 4000-4999. 
SA: 5000-5999. 
TAS: 7800-7999  and 7000-7499. 
VIC: 8000-8999 and 3000-3999. 
WA: 6800-6999 and 6000-6799."
1293,Canadian postal code format verification,"^([ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ])\ {0,1}(\d[ABCEGHJKLMNPRSTVWXYZ]\d)$","Accurate Canadian postal code format verification.

The format of a Canadian postal code is LDL DLD where L are alpha characters and D are numeric digits. But there are some exceptions. The letters D, F, I, O, Q and U never appear in a postal code because of their visual similarity to 0, E, 1, 0, 0, and V respectively. In addition to avoiding the six &quot;forbidden&quot; letters W and Z also do not appear as the first letter of a postal code (at least not at present)."
1294,German postal code verification,^([0124678][0-9]{4})$,"Accurate German postal code verification. 

Germany has 5-digit numeric postal codes with the following state based specific ranges. BW: 7xxxx. 
BY: 8xxxx. 
BE: 10-14xxx. 
BR: 15-19xxx. 
HB: 28xxx. 
HH: 20-22xxx. 
HE: 6xxxx. 
NI: 2xxxx. 
MV: 18-19xxx. 
NW: 4xxxx. 
RP: 67-68xxx. 
SL: 66xxx. 
SN: 0xxxx. 
ST: 0xxxx. 
SH: 23-25xxx. 
TH: 0xxxx."
1295,UK postal code format verification,"^(([A-Z]{1,2}[0-9][0-9A-Z]{0,1})\ ([0-9][A-Z]{2}))|(GIR\ 0AA)$","Accurate UK postal code format verification.

UK postal codes have two parts. The right part is formatted as DLL (L:letter D:digit) and the left part has six alternative formats: LD, LDL, LDD, LLD, LLDL and LLDD. There is only one exception to these formats: GIR 0AA."
1296,"VAT Numbers format verification (DE, EE, EL, PT) ","^(EE|EL|DE|PT){0,1}[0-9]{9}$","VAT Numbers format verification (Estonia, Germany, Greece, Portugal) with support for optional member state definition."
1297,"VAT Numbers format verification (FI, HU, LU, MT, SI)","^(FI|HU|LU|MT|SI){0,1}[0-9]{8}$","VAT Numbers format verification (Finland, Hungary, Luxemburg, Malta, Slovenia) with support for optional member state definition."
1298,"VAT Numbers format verification (PL, SK)","^(PL|SK){0,1}[0-9]{10}$","VAT Numbers format verification (Poland, Slovakia) with support for optional member state definition."
1299,"VAT Numbers format verification (IT, LV)","^(IT|LV){0,1}[0-9]{11}$","VAT Numbers format verification (Italy, Latvia) with support for optional member state definition."
1300,," ^(SE){0,1}[0-9]{12}$","VAT Numbers format verification (Sweden) with support for optional member state definition.
"
1301,,"^(BE){0,1}[0]{0,1}[0-9]{9}$",VAT Numbers format verification (Belgium) with support for optional member state definition.
1302,,"^(CY){0,1}[0-9]{8}[A-Z]$","VAT Numbers format verification (Cyprus) with support for optional member state definition.  
"
1303,,"^(CZ){0,1}[0-9]{8,10}$","VAT Numbers format verification (Czech Republic) with support for optional member state definition.  
"
1304,,"^(DK){0,1}([0-9]{2}\ ){3}[0-9]{2}$",VAT Numbers format verification (Denmark) with support for optional member state definition.
1305,,"^(ES){0,1}([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}[0-9A-Z])$","VAT Numbers format verification (Spain) with support for optional member state definition.  
"
1306,,"^(FR){0,1}[0-9A-Z]{2}\ [0-9]{9}$","
VAT Numbers format verification (France) with support for optional member state definition.
"
1307,,"(\bR(\.|)R(\.|)|RURAL\s{0,}(ROUTE|RT(\.|)))\s{0,}\d{1,}(,|)\s{1,}\bBOX\s{0,}\d",This will validate a rural route address against the United States Postal Service (USPS) rural route standard.
1308,,"^(GB){0,1}([1-9][0-9]{2}\ [0-9]{4}\ [0-9]{2})|([1-9][0-9]{2}\ [0-9]{4}\ [0-9]{2}\ [0-9]{3})|((GD|HA)[0-9]{3})$","VAT Numbers format verification (United Kingdom) with support for optional member state definition.  
"
1309,,"^(IE){0,1}[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]$","VAT Numbers format verification (Ireland) with support for optional member state definition.  
"
1310,,"^(LT){0,1}([0-9]{9}|[0-9]{12})$",VAT Numbers format verification (Lithuania) with support for optional member state definition.
1311,,"^(NL){0,1}[0-9]{9}B[0-9]{2}$","VAT Numbers format verification (The Netherlands) with support for optional member state definition.  
"
1312,,^\s*([\(]?)\[?\s*\d{3}\s*\]?[\)]?\s*[\-]?[\.]?\s*\d{3}\s*[\-]?[\.]?\s*\d{4}$,"US 10-Digit Phone number matching.
*Requires Area Code
*Brackets optional, supports: () and []
*seperators optional, supports: - and .
*whitespace optional"
1314,,"^(([a-zA-Z0-9]+([\-])?[a-zA-Z0-9]+)+(\.)?)+[a-zA-Z]{2,6}$",Checks domain names. This will match all of the valid domains. It will accept TLD's that are from 2 to 6 characters. You can not have more then one dash or period next to each other. Also it will not let you have dashes at end of the words.
1315,,^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$,Email validation for domain or IP
1316,,"^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$",Remi provided an example that would match all domain names (http://www.regexlib.com/REDetails.aspx?regexp_id=391).  I'm adding it so that it can be tested.
1317,,"^rgb\(([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\)$ #Matches standard web rgb pattern",Matches standard rgb syntax for web colors
1318,,^([01]\d|2[0123])([0-5]\d){2}([0-99]\d)$,"hhmmsscc hh=hours [00-24], mm = minutes[00-59], ss=seconds [00-59] where cc is a hundredth of a second [00-99]"
1319,,"(?=^.{1,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)","Validates MS FQDNs.  1) Entire fqdn less than 255 chars. 2) Host and domain names may contain an underscore.  3) 1st char can be a number.  4) No part can be all numbers. 5) Allows any TLD

Works in C#.  Based on Remi Sabourin's regex"
1320,,"(?=^.{1,254}$)(^(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]\.?)+(?:[a-zA-Z]{2,})$)",Based on Remi Sabourin pattern.  Adds total length validation.  Like Remi's this allows a part to be all numbers.  To prevent all numbers just add (?!\d+\.) between (^(?: and ([a-z-A-Z0-9]
1321,,"^[A-Fa-f0-9]{32}$|({|\()?[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}(}|\))?$|^({)?[0xA-Fa-f0-9]{3,10}(, {0,1}[0xA-Fa-f0-9]{3,6}){2}, {0,1}({)([0xA-Fa-f0-9]{3,4}, {0,1}){7}[0xA-Fa-f0-9]{3,4}(}})$",Matches GUIDs defined in MSDN library (http://msdn2.microsoft.com/en-us/library/96ff78dc.aspx)
1324,,target[ ]*[=]([ ]*)([&quot;]|['])*([_])*([A-Za-z0-9])+([&quot;])*,Matches the HTML &quot;target&quot; attribute.  I had an editor that edited pages but whe wysiwyg editor would break on link that had a target to say &quot;_top&quot; or another window.  So I needed an expression to match the target attribute on links in HTML.
1326,,^(([a-zA-Z]+\d+)|(\d+[a-zA-Z]+))[a-zA-Z0-9]*$,Password validator that validates the password contains 1 letter (regardless of case) and 1 number
1328,,"((((http[s]?|ftp)[:]//)([a-zA-Z0-9.-]+([:][a-zA-Z0-9.&amp;%$-]+)*@)?[a-zA-Z][a-zA-Z0-9.-]+|[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9.-]+)[.](com|edu|gov|mil|net|org|biz|pro|info|name|museum|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ax|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)([:][0-9]+)*(/[a-zA-Z0-9.,;?'\\+&amp;%$#=~_-]+)*)",uri
1329,,"^((0?[1-9])|((1)[0-1]))?((\.[0-9]{0,2})?|0(\.[0-9]{0,2}))$","This Regular Expression allows the user to enter a value to represent the imperial measurement of Inches.

The expression won't allow and value of 12 or above (otherwise it would be a foot!), and has the option of having a decimal value upto 2 decimal places.

My first Regular Expression so go easy on me!! :)"
1330,,"(?=^.{8,30}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;&quot;:;'?/&gt;.&lt;,]).*$","Password filter that matches the NSA Password filter DLL ENPASFILT.DLL.

At least 1 small-case letter
At least 1 Capital letter
At least 1 digit
At least 1 special character
Length should be between 8-30 characters. 
Spaces allowed
The sequence of the characters is not important.
"
1333,Tags,(< *balise[ *>|:(.|\n)*>| (.|\n)*>](.|\n)*</balise *>),retrieve any tag and its content
1335,US Telephone,^\(?([0-9]{3})\)?[\s\.\-]*([0-9]{3})[\s\.\-]*([0-9]{4})$,Basically I didn't like any of the regular expressions that were available because they all failed at parsing them into variables correctly...  This regular expression gives you the full match and then the 3 sections of digits seperately.
1338,BB Code Extractor,\[(\w*)(?:(?:=([\w:=@#%\&\?\-\/\.]+?))?(?:;([\w:=@#%\&\?\-\/\.]+?))?)?\](.*?)\[\/\1\],"Capture bulletin board-style ""code"" segments (see examples) from text with one or two optional parameters. Returns with four backreferences: the name of the tag ($1), the two parameters ($2, $3), and the text found between the matching tags ($4). Tag names must consist only of word characters (letters, numbers, and underscore), while parameters can also include @ : . = # % & ? - and /. Works with zero, one, or two arguments, separated from the tag name by an equals sign ( = ) and from each other by a semi colon( ; )."
1339,E-mail Address Validator,"^([\w\-\.]+)@([a-zA-Z0-9\-]{1,63})\.((?:aero|biz|co(?:op|m)|edu|gov|in(?:fo|t)|m(?:useum|il)|n(?:ame|et)|org|pro|travel)|(?:a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnorsuvxyz]|d[ejkmoz]|e[ceghrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortvyz]|t[cdfghjklmnoprtvwz]|u[agkmsyz]|v[aceginu]|w[fs]|y[et]|z[amw]))$","Matches only email addresses with domain names, including all special domain types and foreign country extensions. The address part (before the '@' symbol) must consist of letters, numbers, underscore, hyphen (-), and period (.). Captures the address portion ($1), subdomain ($2), domain name ($3), and domain extention ($4). Word of warning, if an address with a domain of the form 'somebritishdomain.co.uk' is entered, the 'co' will be returned as the domain name, and 'somebritishdomain' as the subdomain."
1344,My Pattern 2,My Pattern,My Pattern
1345,Match XML 'Time' Format,"\A((?:[01]{0,1}\d)|(?:[2][0123])):([012345]\d):([012345]\d)(.\d{1,3})?([Z]|(?:[+-]?(?:[01]{0,1}\d)|(?:[2][0123])):([012345]\d))\Z","Matches a literal string which conforms to the XML Schema Part 2 'Time' format, which is to say on of:"
1346,Match XML Date Type,"\A-?(\d{4,})-(\d{2})-(\d{2})([Z]|(?:[+-]?(?:[01]\d)|(?:[2][0123])):(?:[012345]\d))\Z",Matches a literal XML Date string: See http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#date
1347,Mr,"UploadFriendly is an easy to use Java Applet that will allow multiple file uploads on a web server in a web page. The control supports file filtering, limits and more. Samples available in the following languages: ASP, ASP.NET, PHP, Coldfusion and JSP","UploadFriendly is an easy to use Java Applet that will allow multiple file uploads on a web server in a web page. The control supports file filtering, limits and more. Samples available in the following languages: ASP, ASP.NET, PHP, Coldfusion and JSP"
1348,Percent Expression,"^\s*(\d{0,2})(\.?(\d*))?\s*\%?\s*$","Basically this matches into variables for percentages..  It allows as much whitespace before and after the expression.  $1 = Percent before decimal, $2 = percentage after decimal inc decimal, $3 = percentage after decimal. Disallowed anything past 99.99999 repeating percent.  No negative percents either.  Easy to implement but I do not need it."
1349,metabuilders pattern,metabuilders pattern,metabuilders pattern foo
1356,asdf,asdf,asdf
1357,Insert Test,asdf,reqw asdf
1358,asdf zxcv,asdf zxcv,asdf zxcv
1359,Password Matching Expression,"^(?=.*[a-zA-Z].*[a-zA-Z])(?=.*\d.*\d)[a-zA-Z0-9]{6,20}$",Password matching expression. Password must consists of at least 6 characters and not more than 20 characters. Password must contain only letters and digits. Password must contain at least 2 digits and at least 2 letters.
1361,Spam Control,"^[a-zA-Z]{1,3}\[([0-9]{1,3})\]",this spam kontrol Fw[number] blocked. 
1362,Email Extractor,([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+),"i&#231;inde @ isareti ve en az 1 tane ""."" olmayanlar kabul edilmez."
1363,URL Test,"(?#WebOrIP)((?#protocol)((http|https):\/\/)?(?#subDomain)(([a-zA-Z0-9]+\.(?#domain)[a-zA-Z0-9\-]+(?#TLD)(\.[a-zA-Z]+){1,2})|(?#IPAddress)((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))+(?#Port)(:[1-9][0-9]*)?)+(?#Path)((\/((?#dirOrFileName)[a-zA-Z0-9_\-\%\~\+]+)?)*)?(?#extension)(\.([a-zA-Z0-9_]+))?(?#parameters)(\?([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?(?#additionalParameters)(\&([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?)*)?","I needed a regex for validating URLs, couldn't find a suitable one, so wrote this, with comments! It matches any valid web URL (Address or IP, with or without protocol), including optional port number, directory path, filname.extension and any paramater pairs.  Hope it helps, even if just to understand expressions easier!"
1364,IPv4 Address Match,^(?!0+\.0+\.0+\.0+$)(?!255\.255+\.255\.255$)(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])$,Perl regexp that matches IPv4 addresses. Does not match 0.0.0.0 or 255.255.255.255 and does not allow leading zero's. This can be changed by removing '(?!0+\.0+\.0+\.0+$)(?!255\.255+\.255\.255$)' from the start of the regexp.
1365,,"^[^_][a-zA-Z0-9_]+[^_]@{1}[a-z]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$",this pattern validates email address. it allows (1)numeric characters and underscore(_) in an address.(2)numeric characters in domain name. it doesn't match user names with a dot(.). doesn;t allow username starting or ending with @ underscore. they can be used in between
1366,Email,"^[^_.]([a-zA-Z0-9_]*[.]?[a-zA-Z0-9_]+[^_]){2}@{1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$",Email-it is an extension to my previous expression for Validating email address.it has the following additional features: 1-username cant begin with a periods(.) and underscore(_) 2-maximum 2 periods(.) can be used in a username(previous xprsn didn't allowed any)(remember gmail which allows periods)
1367,java class,^[a-zA-Z]([a-zA-Z0-9])*([\.][a-zA-Z]([a-zA-Z0-9])*)*$,Matches any legal java class (inclusive package name).
1368,Email,"^([\w]+@([\w]+\.)+[a-zA-Z]{2,9}(\s*;\s*[\w]+@([\w]+\.)+[a-zA-Z]{2,9})*)$ ","Validates a semi colon delimited list of email addresses.  Appropriate for use with .NET Web.Mail.MailMessage fields (To, BCC, CC)"
1370,PHP Function Regex,"^\s*\w+\s*\((\s*((""|')([^\3]+|\\\3)\3|\$?[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]|[0-9]*)\s*,?)*\s*\)","I needed a regex to parse PHP functions, so I made it and here it is. It will not validate with array variables as the function arguments."
1371,IsNumeric,"^(?:(?:[+\-]?\$?)|(?:\$?[+\-]?))?(?:(?:\d{1,3}(?:(?:,\d{3})|(?:\d))*(?:\.(?:\d*|\d+[eE][+\-]\d+))?)|(?:\.\d+(?:[eE][+\-]\d+)?))$",This regex will validate the given string is numeric
1374,RFC URL,"(([\w]+:)?//)?(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?","A pretty decent URL matching expression.  I've followed most RFC guidelines, so it'll match most anything ya throw at it (And wont match what it's not supposed to).  If you see any problems with it, please email me so I can make the appropriate changes :)"
1377,HTML Entity,&.*?;,Catches all HTML Entities and their codes.
1378,HTML/XML Tags,<(.|\n)+?>,"Simple regex that seems to catch most if not all HTML and XML tags.  Not very useful if you need attributes of the tag, like the href in an anchor, but it is useful if you just want to strip tags or find out what the tags are in a doc."
1380,MSSQL Connection String,server=([^;]*);\s*database=([^;]*);\s*uid=([^;]*);\s*pwd=([^;]*),"Matches a MSSQL Connection String used with ADO.NET as long as it follows the standard form server;database;uid;pwd.  If the connection string is in a different order or contains other parts between these parts, then a match will not be found."
1382,Number Range,(^\b\d+-\d+$\b)|(^\b\d+$\b),"Matches a range ""X-X"" or ""XXX-XXX"" or a single number ""X"" but does not match X- or XXX-"
1386,Percentage Match,"^100$|^\d{0,2}(\.\d{1,2})? *%?$",It matches % value from 0 - 100. The two decimal places are used.
1387,Hex Colors,^#?([0-9a-fA-f]{6})$, Matches hex color values with or without the '#' sign. 
1388,User Input Validation / Malicious Code / SQL Injections Prevention,"^([a-zA-Z0-9@. `'""-]*(union select|UNION SELECT|exec sp_|EXEC SP_|drop table|DROP TABLE|drop database|DROP DATABASE|drop schema|DROP SCHEMA|delete from|DELETE FROM|\` |\' |\""|;|=| = |<|>|\'\+\'|\' \+\ '|\*|%|--)+[a-zA-Z0-9@. -'`"";=<>+*%--]*)$","This regular expression will catch malicious code from user input to prevent SQL injections. Instead of matching the allowed characters it matches the malicious code without blocking out the most common user data entries like e-mail, first and last names, phone numbers and so on. Check your data with this regex before you write it's values into the database for TRUE. If your data validates as TRUE, that means  you have unwanted malicious  code in your variables. Output a userfriendly error message without writing the data into the database. If your data validates as FALSE, that means your data is safe. After validating my data with the regex, I still run my data through a database escape function like PHP's mysql_real_escape_string($value) for extra security. By using this Regex you most likely won't end up with irritating backslashed \data\ in your database and why would you want to have safe ""escaped malicious code"" in your database anyway? And don't forget that escape functions like the one mentioned earlier do not always guarantee data safety. For example, it does not catch the semicolon SQL injection like ""; DELETE FROM users"".  Remember to always validate your user input or use data cast to make sure that when you expect a numeric value, you will end up with a numeric value and so on."
1389,Password Validator - 3 of 4 groups - w/VBS bugfix,"(?=^[\da-zA-Z!@#$%]{4,20}$)((?=.*[\d])(?=.*[a-z])(?=.*[A-Z)|(?=.*[\d])(?=.*[a-z])(?=.*[!@#$%])|(?=.*[\d])(?=.*[A-Z)(?=.*[!@#$%])|(?=.*[a-z])(?=.*[A-Z)(?=.*[!@#$%]))","Password strength validator.  Length must be 4 to 20 characters.  Must have 3 of 4 character groups: digit, lower alpha, upper alpha, and symbol (defined as [!@#$%]).  Like other password validators here, but rearranged to work with VBS and javascript regex engines.  Fix was suggested by Matthew Hazzard for Steven Smith's pattern.  Thanks Matthew!  See second page of comments on this pattern for discussion: http://regexlib.com/REDetails.aspx?regexp_id=31"
1390,Pattern For WebCrawler to find contact details,"[\+]{0,1}(\d{10,13}|[\(][\+]{0,1}\d{2,}[\13)]*\d{5,13}|\d{2,6}[\-]{1}\d{2,13}[\-]*\d{3,13})","This is useful for finding contact numbers, or mobile numbers or phone numbers while crawling websites."
1392,Get XML tag from string,<\?xml.*</note>,This will find any XML within a string starting with the <?xml header and ending with the closing root tag. Replace </note> with your closing root tag. (use singleline and case insensitive) - I use this to pull xml written in a web document.
1393,Numeric week and year (WW/YYYY),^(([1-4][0-9])|(0[1-9])|(5[0-2]))\/[1-2]\d{3}$,This pattern can be used to validate a numeric week (between 01 and 52) and four digit year (valid years between 1000 and 2999) separated by a slash in the form of WW/YYYY.
1394,Whole or quarter hours,"^\d{1,2}((,)|(,25)|(,50)|(,5)|(,75)|(,0)|(,00))?$",Maximum 2 digits followed by an optional comma and a valid quarter to be used in time calculations. I wasn't satisfied with the quarter regex posted earlier by Bob Kranson.
1396,Password Overdue ,"^(?=[a-zA-Z])(?=.*[0-9])(?=.*[#\$_])(?=.*[A-Z])(?=.*[a-z])(?!.*[^a-zA-Z0-9#\$_])(?!.*\s).{8,12}$","Pattern must match 8-12 character, numeric, and symbol combination 1) at least one uppercase letter, 2) at least on lowercase letter, 3) at least one number, 4) and one special charater, that is specified in advanced.  The first character must be a character upper or lower, and no spaces allowed. "
1397,img,"<img[^>]* src=\""([^\""]*)\""[^>]*>",It searches for a IMG tag and group information about source of image.
1398,Password,"^([ a-zA-Z0-9`~!@#$%^&*()-_=+\\|\]}\[{'"";:/?.>,<])*$",Matches passwords.
1399,XML Schema DateTime,^(-?\d{4})-(\d{2})-(\d{2})(T(\d{2}):(\d{2}):(\d{2})(\.\d+)?(Z|(\+|-)(\d\d):(\d\d))?)?$,"Matches an XML Schema DateTime value defined in http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#dateTime.  Breaks individual parts into subgroups:  1 - year, 2 - month, 3 - day, 5 - hour, 6 - min, 7 - sec, 8 - fractional second, 9 - complete timezone, could be Z, 10 - timezone sign, 11 - tz hour, 12 - tz minutes."
1401,Date in MMDDYYYY,^((((((0[13578])|(1[02]))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|(11))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(30)))|((02)[\s\.\-\/\\]?((0[1-9])|(1[0-9])|(2[0-8]))))[\s\.\-\/\\]?(((([2468][^048])|([13579][^26]))00)|(\d\d\d[13579])|(\d\d[02468][^048])|(\d\d[13579][^26])))|(((((0[13578])|(1[02]))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|(11))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(30)))|((02)[\s\.\-\/\\]?((0[1-9])|([12][0-9]))))[\s\.\-\/\\]?(((([2468][048])|([13579][26]))00)|(\d\d[2468][048])|(\d\d[13579][26])|(\d\d0[48]))))$,"This was made for use in javascript to detect MMDDYYYY formatted text.  It tests all valid dates, including 31 vs 30 days in a month and the 28 vs 29 leap year rules which exclude centennial years not divisible by 400 and years not divisible by 4."
1403,ISO Date Format,^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])(\D?([01]\d|2[0-3])\D?([0-5]\d)\D?([0-5]\d)?)?$,"Regex to match the ISO Date Format. The time part is optional, including the seconds, as are all of the delimiters (although they must be non-numeric).  Each part of the date will be returned as a selection e.g. \1 will contain the Year, \2 will contain the Month."
1404,U.S. Street Address,"^[0-9]{1,}([[:space:]]{1})[A-Za-z0-9/.\'\-]{1,}([[:space:]]{1})?[A-Za-z0-9/.\'\-]{1,}]?([[:space:]]{1})?[A-Za-z0-9/.\'\-]{1,}]?$","This is meant to work in PHP where SQL injection can be a problem. It is meant to understand a typical address entry, while avoiding strange characters like ?, +, and ;."
1405,Allow quotes in email address,^\w+(([-+']|[-+.]|\w+))*@\w+([-.]\w+)*\.\w+([-.]\w+)*$,Allow quotes in email address. Its Allow to enter quotes after first char and before @.
1406,Price,^[$]?[0-9]*(\.)?[0-9]?[0-9]?$,Should match prices with or without a dollar sign.
1407,data time validator,^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-2]) ([0-1][0-9]|2[0-4]):([0-4][0-9]|5[0-9]):([0-4][0-9]|5[0-9])$,it will match a valid date & time string which looks like this : 2006-12-31 23:59:59
1408,Disallow HTML code,^[^<^>]*$,"I use this one as a simple way to disallow HTML code in form fields.  It simply doesn't allow the use of the &lt; and &gt; characters.  It does, however, allow the entities for these characters (&amp;lt; and &amp;gt;), which will print the characters to the screen appropriately, if needed.  I'm sure there are more complex expressions to block HTML, but none more concise."
1409,GuildWars Nickname Regex,^(^[A-Z]{1}([a-z]?)+)+([\s][A-Z]{1}([a-z]?)+)+$,"This is one of my first expressions. I'm not really used to regex, but I'm trying my best. Hope some of you guys might have some use of this regex. Don't forget to check the length of the string! The string has to be shorter than 20 characters to be valid! The string also has to start with a capitalized letter, followed by any other letters. Any parts of the name seperated by a space (e.g. Adva Kouta Jr) have to start with another capitalized letter. -- Regards ;)"
1410,One lower-case US ASCII Letter,^[a-z]$,Will match with any single lower-case letter.
1411,Dotted Quad (Decimal),^(([1-9]?\d|1\d\d|2[0-4]\d|25[0-5]).){3}([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])$,Regex for IP Address validation. 
1412,Check filename extensions,^.*(([^\.][\.][wW][mM][aA])|([^\.][\.][mM][pP][3]))$,Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. This is a better solution (I think) than #343. Works in Javascript and C#.
1413,replace html tags with valid xhtml,(<input )(.*?)(>),"Finds all &lt;input attrib1=""value1"" attrib2=""value2"" ... &gt; tags. You can make it end with ""/&gt;"" for xhtml compatibility replacing with the expression ""&lt;input $2 /&gt;"". You can repeat it with other tags like &lt;img /&gt; or &lt;br / &gt;"
1414,Almost RFC2822 Compliant Email Address Check,"^(?:(?#local-part)(?#quoted)""[^\""]*""|(?#non-quoted)[a-z0-9&+_-](?:\.?[a-z0-9&+_-]+)*)@(?:(?#domain)(?#domain-name)[a-z0-9](?:[a-z0-9-]*[a-z0-9])*(?:\.[a-z0-9](?:[a-z0-9-]*[a-z0-9])*)*|(?#ip)(\[)?(?:[01]?\d?\d|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d?\d|2[0-4]\d|25[0-5])){3}(?(1)\]|))$","Validates an RFC 2822 email address, except does not allow most punctuation and non-ascii alphanumeric characters. Also does not take length requirements into account. Allows domain name and IP addresses, but ensures that the IP address entered is valid."
1415,,^\d+(\.\d+)?$,Matches any unsigned floating point number/numeric string.
1416,Matching urls in free text,"((www|http)(\W+\S+[^).,:;?\]\} \r\n$]+))","A regular expression which allows me to find strings of text floating around in free text that are in fact URLs. I need to tag these as &lt;url&gt;www.bmj.com/advice&lt;/url&gt;. The problem has been allowing special characters in the url, but not mixing them up with genuine punctuation marks at the end of the url in the text-e.g. '.' or '?' or ) or ';' etc)"
1417,test,test,test
1421,UK Phone # with International option,"^\s*\(?((\+0?44)?\)?[ \-]?(\(0\))|0)((20[7,8]{1}\)?[ \-]?[1-9]{1}[0-9]{2}[ \-]?[0-9]{4})|([1-8]{1}[0-9]{3}\)?[ \-]?[1-9]{1}[0-9]{2}[ \-]?[0-9]{3}))\s*$","UK phone number formats with optional international prefix, optional spaces, dashes and brackets. Brackets mandatory for regional/capital leading zero if included in international form. Based on ""Mh"" UK London & Regional. (Thanks Mh for the groundwork).  New to Regex so I'm sure it can be done more elegantly... but it works. "
1423,version number validation,^((\d)?(\d{1})(\.{1})(\d)?(\d{1})){1}$,This simple regular expression comes handy when we need to validate a version number of a document. The version numbers can have decimals upto two decimal places
1424,UK Driver License,[A-Z0-9]{5}\d[0156]\d([0][1-9]|[12]\d|3[01])\d[A-Z0-9]{3}[A-Z]{2},"Matches the UK Drivers License format as laid down by the DVLA / dvla.    See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm    Matches:       1. Must be 16 characters  2. First 5 characters are alphanumeric.  3. Next 6 characters must be numeric  4. Next 3 characters are alphanumeric  5. Last 2 characters are alpha  6. Second character of numeric section can only be 0, 1, 5 or 6.  7. Fourth and fifth characters of numeric section must be in the range 01 to 31."
1425,"Ultimate email, e-mail","/^([a-z0-9])(([\-.]|[_]+)?([a-z0-9]+))*(@)([a-z0-9])((([-]+)?([a-z0-9]+))?)*((.[a-z]{2,3})?(.[a-z]{2,6}))$/i","Matches any valid e-mail... Kind of large, but worth it to those who really care............email, e-mail, e mail"
1426,UserName,"^([a-z]{1,6}[ ']){0,3}([&#201;&#200;&#202;&#203;&#220;&#219;&#206;&#212;&#196;&#207;&#214;&#196;&#197;&#199;A-Z]{1}[&#233;&#232;&#235;&#234;&#252;&#251;&#231;&#238;&#244;&#226;&#239;&#246;&#228;&#229;a-z]{2,}[- ']){0,3}[A-Z]{1}[&#233;&#232;&#235;&#234;&#252;&#251;&#231;&#238;&#244;&#226;&#239;&#246;&#228;&#229;a-z]{2,}$","Pattern for user name input form validation <br />Expression pour tester la validit&#233; des noms propres lors de la validation des formulaires.  <br />Syntaxe: <br />Les particules (de della, von, op, …..) peuvent &#234;tre en minuscule  <br />Apr&#232;s les particules doit appara&#238;tre un nom, &#233;crit en minuscule, mais avec la premi&#232;re lettre en majuscule. <br />Les &#233;l&#233;ments du nom peuvent &#234;tre s&#233;par&#233;s par un seul espace, un moins ou une apostrophe"
1427,Valid integer,^(3276[0-7]|327[0-5]\d|32[0-6]\d{2}|3[01]\d{3}|[12]\d{4}|[1-9]\d{3}|[1-9]\d{2}|[1-9]\d|\d)$,Checks that the input is a positive integer in the range 0-32767
1429,OAGIS Phone,"^\+[0-9]{1,3}\([0-9]{3}\)[0-9]{7}$",The OAGIS standard has a format for phone and fax as +###(###)#######. For details on standard see the open applications group.
1430,UK Telephone,"(((\+44)? ?(\(0\))? ?)|(0))( ?[0-9]{3,4}){3}","This regex matches UK phone numbers in multiple formats, including those that begin with the international dial code and optionally bracket the leading zero of the area code. To match a number must begin with either +44 or 0 and have 9-12 following digits."
1431,IPV4 and IPV6 address,"([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(\d{1,3}\.){3}\d{1,3}",Matches all IPV6 and IPV4 addresses.  Doesn't limit IPV4 to just values of 255. Doesn't allow IPV6 compression.
1432,header 2 anchor,"""{(<h)([1-6])(.id=\"")(.+?\"")(.+?)(</h[1-6])}"",'\\2~<a href=""#\\4\\5</a'","Easy way to transform header tag to its local referer. I use it to make TOC after reading headers.<br><b> &lt;h# id=""identifier""&gt;Caption&lt;/h#&gt; -&gt; #~&lt;a href=""#identifier""&gt;Caption&lt;/a&gt; </b><br>There is stored original heading's level in output."
1434,US phone numbers,^\(?\d{3}?\)?\-?\d{3}?\-?\d{4}?$,Matches US phone numbers with area code inclosed in parents...
1435,Manage img,"<img[\s]+[^>]*?((alt*?[\s]?=[\s\""\']+(.*?)[\""\']+.*?)|(src*?[\s]?=[\s\""\']+(.*?)[\""\']+.*?))((src*?[\s]?=[\s\""\']+(.*?)[\""\']+.*?>)|(alt*?[\s]?=[\s\""\']+(.*?)[\""\']+.*?>)|>)","This pattern can intercept img like < img src=""src1"" alt=""alt1""> or < img alt=""alt1"" src=""src1""> or < img src=""src1""> or < img src=""src1"" width=3 height=4> then values of src can be found in $5 or $8, the value of tag alt can be found in $3 or $10."
1436,OS Grid/Tile Reference,^(H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}\d{4}(NE|NW|SE|SW)?$|((H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}(\d{4}|\d{6}|\d{8}|\d{10}))$,"This pattern validates a British Ordnance Survey Grid/Tile/Sheet Reference Number. Information on the range of possible values can be found here: http://www.ordnancesurvey.co.uk/oswebsite/gps/information/coordinatesystemsinfo/guidetonationalgrid/page17.html. Grid Ref, Tile Ref, Sheet Ref."
1438,Simple App Relative Path,^~/[0-9a-zA-Z_][0-9a-zA-Z/_-]*\.[0-9a-zA-Z_-]+$,Matches the app relative path of a file. This will work for relative paths of URLs. Not very complicated but will work to do basic validation.
1439,Grabbing title tag from web pages,<title>+(.*?)</title>,"This pattern could intercept the value of the tag title in every web pages, it could be found in $1."
1440,Grab tag meta from web pages,"<meta[\s]+[^>]*?name[\s]?=[\s\""\']+(.*?)[\s\""\']+content[\s]?=[\s\""\']+(.*?)[\""\']+.*?>","This pattern intercept meta tags, the name can be found in $1 the content value in $2."
1442,Action Replay code,(([A-Z0-9]{4}-){2}[A-Z0-9]{5}\s?)+,Matches valid Action Replay codes for the Gamecube and Playstation 2
1443,Find <h1> Tags,<h([1-6])>([^<]*)</h([1-6])>,This regex find valid <h1-6> html tags
1444,Israel Cell Phone ,^0?(5[024])(\-)?\d{7}$,This is a pattern for cell phone of main israel cell phone companies
1445,Spaces in between words,"^[a-zA-Z\s]{1,20}$","There are situations like a text box accepting city names with total length not exceeding 20.

City Names can be either one word , eg. Philadelphia
Or it can be two words separated by a space, eg. New York

1. This expression allows alphabets and spaces in between.
2. Also the total length of city name should not exceed upper limit of 20 characters.

 "
1446,finds websites,(http://)?[a-zA-Z]+\.[a-zA-Z0-9]+\.[a-zA-Z]+,finds any website consists of 3 strings like www.yahoo.com or even http://www.yahoo.com but doesn't math websites like rapidshare.de 
1447,Decimal Number,"^[-+]?\d*(?:\.\d{0,2}0*)?$",Matches any decimal number up to two digits after the decimal place or more than two if the value is zero.  A leading + / - is allowed. Based on the regex by Steven Smith
1448,Email validation,"^((([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|/|=|\?|\^|_|`|\{|\||\}|~)+(\.([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|/|=|\?|\^|_|`|\{|\||\}|~)+)*)@((((([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.))*([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.(af|ax|al|dz|as|ad|ao|ai|aq|ag|ar|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|bi|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|co|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|in|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|mu|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|na|nr|np|nl|an|nc|nz|ni|ne|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|pr|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|ae|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa))|(((([0-9]){1,3}\.){3}([0-9]){1,3}))|(\[((([0-9]){1,3}\.){3}([0-9]){1,3})\])))$","This is a robust email validation: the username part conforms with RFC 2822 (for instance, emails with tags (""+"") are validated).

The host part is checked for valid subdomains and its TLD is checked against all the 243 countries codes and the 14 ICANN'sTLDs. The host part also accepts IP with or without brackets."
1449,CAS Number,"\b[1-9]{1}[0-9]{1,5}-\d{2}-\d\b",This is a more robust regex for matching Chemical Abstract Service (CAS) Numbers. This distinguishes between CAS numbers and other identifiers (e.g. EC number).
1450,CEP Brazil,^\d{5}(\-)(\d{3})?$,CEP do Brasil com separa&#231;&#227;o ex: 99999-999
1451,Time,^([0-1]?\d|2[0-3])([:]?[0-5]\d)?([:]?|[0-5]\d)?\s?(A|AM|P|p|a|PM|am|pm|pM|aM|Am|Pm)?$,Its a very flexible time entry regular expression. It can accept all valid combination of time entry
1452,horizontal smileys,"(\A|\s)(((>[:;=+])|[>:;=+])[,*]?[-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+|[@#!OoPpXxZS$03])|>?[xX8][-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+))(\Z|\s)","Matches all common horizontal smileys facing from left to right in its own ""word"". To match horizontal smileys in the reverse direction (.ie D:) see horozontal smileys (reverse)."
1453,horizontal smileys (reverse),"(\A|\s)((\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+|[@#!OoXxZS$0])[-~+o]?[,*]?((<[:;=+])|[<:;=+])|(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+)[-~+o]?[xX8]<?)(\Z|\s)","Matches all common horizontal smileys from right to left in its own ""word""."
1454,vertical smileys,"(\A|\s)[({\[]*([\^\*\-@#$%<>XxVvOo0ZzTt+'&#172;](_+|\.)[\^\*\-@#$%<>XxVvOo0ZzTt+'&#172;]|\._\.|[\^\*@#$%<>XxVOo0ZTt']\-[\^\*@#$%<>XxVOo0ZTt']|>>|><|<<|o[O0]|[O0]o)[)}\]]*[;.?]*['""]?(\Z|\s)","Matches all common vertical smileys in a ""word""."
1455,Strip leading characters from currency,"([^,0-9]\D*)([0-9]*|\d*\,\d*)$","For currency: strips out leading non-numeric characters. Numbers may use a comma for the decimal place, but cannot use anything for the thousands separator."
1456,USA Phone,"^(\d)?[ ]*[\(\.\-]?(\d{3})[\)\.\-]?[ ]*(\d{3})[\.\- ]?(\d{4})[ ]*(x|ext\.?)?[ ]*(\d{1,7})?$","Requires area code.  Allows extension.  Any common US format works.  If you prefer not to require area code, use this:   ^(\d)?[ ]*[\(\.\-]?(\d{3})?[\)\.\-]?[ ]*(\d{3})[\.\- ]?(\d{4})[ ]*(x|ext\.?)?[ ]*(\d{1,7})?$"
1457,Image File Extension,.*(\.[Jj][Pp][Gg]|\.[Gg][Ii][Ff]|\.[Jj][Pp][Ee][Gg]|\.[Pp][Nn][Gg]),"This expression should work to validate that an uploaded file's extension is either jpg, gif, or png."
1458,US Phone Number,^1?[-\. ]?(\(\d{3}\)?[-\. ]?|\d{3}?[-\. ]?)?\d{3}?[-\. ]?\d{4}$,"US Phone number with optional leading 1, optional area code, and optional delimiters (hyphen, space or period)"
1459,sip and sips,"^(sip|sips)\:\+?([\w|\:?\.?\-?\@?\;?\,?\=\%\&]+)","The sip/sips syntax is from http://www.ietf.org/rfc/rfc3261.txt?number=3261, seems the pattern works fine, but I worry about the performance"
1461,Israeli Cellular Number,^[0][5][0]-\d{7}|[0][5][2]-\d{7}|[0][5][4]-\d{7}|[0][5][7]-\d{7}$,"This Regex validate all israeli cellular companies numbers (050,052,054,057)"
1462,IP validator,/^(?:(?:1\d?\d|[1-9]?\d|2[0-4]\d|25[0-5])\.){3}(?:1\d?\d|[1-9]?\d|2[0-4]\d|25[0-5])$/,It matches an IP address only in the correct format. There was a previous regex send which matches 192.168.01.2 but this code won't match preceeding 0's
1463,Russian phone numbers,"((8|\+7)-?)?\(?\d{3,5}\)?-?\d{1}-?\d{1}-?\d{1}-?\d{1}-?\d{1}((-?\d{1})?-?\d{1})?",pattern for processing phone (phones) numbers (Russia)
1464,Strip Domain from URL,http://[^/]*/,I was looking for a long time for a simple regex to strip the domain name from a long url or to Get rid of directories and pages. I found a simple one that I wanted to share. If you have http://www.google.com/products/bob?gmail.ckj it will return only http://www.google.com getting rid of all the other parts of the url
1467,Positive or Negative Integer with Commas,"^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*$",This pattern matches on Integer values.  Handles leading positive or negative signs.  Supports commas where only the leading group can have less than three digits.
1468,Positive or Negative Decimal with Commas,"^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*(\.?\d+)$",This pattern matches decimal values.  It supports option leading positive or negative symbols.  Supports commas where only the leading group can have less than three numbers.  
1469,12 hour time,^([1-9]|0[1-9]|1[0-2]):([0-5][0-9])$,"Simple 12 hour time, no am pm added, no 24 hour clock, 1 or 2 digits for hour. "
1470,Another Email RegEx,"^[A-Za-z0-9\_]{1,}\@[A-Za-z0-9\_]{1,}\.[A-Za-z\.]{2,}$","OK. Go easy, people. This was my first crack at regular expressions. Hasn't let me down yet, though."
1471,Detect zip files,^([a-zA-z]:((\\([-*\.*\w+\s+\d+]+)|(\w+)\\)+)(\w+.zip)|(\w+.ZIP))$,I used this regex to check to make sure the file type being uploaded through an input tag was a zip file. Changing the '.zip' to another extension will change the file extension being verified. 
1474,Number between 0.0 and 2.0 with comma or dot separator,"^([0-1](?:\.\d)|[0-1](?:\,\d)|(2\.0)|(2\,0))$","Had to handle both "","" and ""."" as separator in a validationscript where values are between 0.0 and 2.0 like in results of Swedish H&#246;gskoleprov (SAT)."
1475,Match path and file,(\/.*\/)?(page.aspx\?id=|file_viewer.aspx\?id=)(\d+),Matches an optional path and a filename and number. I used this pattern to pull out /library/page.aspx?id=33 from an html string and replace with a real file /library/Default.htm.
1476,US/Can Zip,^(?!0{5})([0-9]{5}|[A-Z][0-9][A-Z]\s[0-9][A-Z][0-9])$,US 5 or Canadian Zip Code
1477,Test,(NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?,test
1478,Percent regexp,"^100$|^\s*(\d{0,2})((\.|\,)(\d*))?\s*\%?\s*$",Percent regulaar expression. 
1479,Sentence boundary detector," ""[\.\?\!]+[\""|`|\']*[[:space:]]+[|\""|`|\']*(?=[A-Z])""",This is to split text into sentences. any suggestions?
1480,Phone Number,"^([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){7}[0-9a-zA-Z,#/ \.\(\)\-\+\*]*$","Very flexible phone number entry. -- There are many valid ways to enter a phone number, and often there is other data that a restrictive Regex pattern will not abide. -- This pattern accepts any number of letters, commas, pound signs, slashes, spaces, periods, parenthesis, hyphens, plus signs, and asterisks... but amongst it scans for a minimum of 7 digits (modify {7} to adjust the minimum number of required digits (i.e. 10 for area code + phone number, 18 for long international numbers). -- This pattern does not attempt to restrict the entered phone number format in any way, but instead just verfies that enough digits for one was entered. -- Data in excess of the 7 required digits is allowed. -- I've posted another submission that forces compliance for US phone numbers."
1481,US Phone Number,"^([a-zA-Z,#/ \.\(\)\-\+\*]*[2-9])([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){2}([a-zA-Z,#/ \.\(\)\-\+\*]*[2-9])([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){6}[0-9a-zA-Z,#/ \.\(\)\-\+\*]*$","Very flexible US phone number entry. -- There are many valid ways to enter a phone number, and often there is other data that a restrictive Regex pattern will not abide. -- This pattern accepts any number of letters, commas, pound signs, slashes, spaces, periods, parenthesis, hyphens, plus signs, and asterisks... but amongst it scans for a minimum of 10 digits, the first and fourth of which cannot be 0 or 1 (per US phone number standards in 2006). -- Data in excess of the 10 required digits is allowed."
1483,Alphanumeric,"^[\w ]{0,}$",The alphanumeric patterns I have seen here are unnecessarily long. This is all you need.
1484,Decimal number,"^[\+\-]?[0-9]+([\,\.][0-9]+)?$","Accepts integer and decimal numbers, the decimal delimiter beeing either a point or a comma, prefixed or not by a plus or minus sign."
1485,CEP (Brazil zip),^\d{5}-\d{3}$|^\d{8}$,Valida&#231;&#227;o de CEP Brasileiro. Aceita n&#250;mero com tra&#231;o ou sem tra&#231;o.
1486,Phone number,"^[+]*(1|86)*((.| |-||\()(\d{3})(.| |-||\))\d{3}(.| |-|)(\d{4}|\d{5}))([ ]*ext[. -]*(\d{1,9}))*",Match almost any format of US phone numbers
1487,Parse VB String,"(?:""(?:.|"""")*?(?<!"")""(?!""))|(?:&\s+[^""]*(\b))","This will return a collection of string parts as {""xxxx """"xxxx"""" xxx""} for parsing into a string (i.e. remove initial and end "", then replace double """" with single), and {& xxxx} for parsing as variables (e.g. remove ampersand and white space and prefix with@). It's not perfect, as it will math to a word boundary for the 'variable' clause, so will not recognise calculations in the string."
1488,Mobile No Validation,^((\+)?(\d{2}[-]))?(\d{10}){1}?$,This Pattern is to Validate Mobile Number with 10 digit Number and Countrycode as Optional.
1489,Telephone Number Validation (with Area Code),"^((\+)?(\d{2})[-])?(([\(])?((\d){3,5})([\)])?[-])|(\d{3,5})(\d{5,8}){1}?$",Telephone Number Validation with Country code Optional but Mandatory Area Code.
1490,Pattern for Login Id,^([a-zA-Z](?:(?:(?:\w[\.\_]?)*)\w)+)([a-zA-Z0-9])$,This Pattern is used to validate Login Name with . and _ seprators only.
1491,single Email Id Validation,^[a-zA-Z]([a-zA-Z[._][\d]])*[@][a-zA-Z[.][\d]]*[.][a-z[.][\d]]*,This Pattern used to Validate single Email Address .with first character as Alphabate and allowing . and _ as seprator more that once.
1492,US Area Code (NANPA Format),^[2-9]{1}[0-9]{1}((?<!1)[1]|[0]|[2-9]){1}\b,"According to NANPA (North American Numbering Plan Administration): The format of an area code is NXX, where N is any digit 2 through 9 and X is any digit 0 through 9.  N11 are ERCs, called service codes, and are not used as area codes.  This regex checks for these conditions.  However, this regex does not check for N9X which are reserved for expansion in the future nor 37X or 96X which are also reserved for potential expansion in the future."
1493,Arabic+Farsi+English Cleanup," ^[ a - z, 0 - 9 , ?   -   ?   ,?   -   ? , ?    -  ?   ,?   -  ? , . ]",good for cleanup none (farsi+arabic+english)letters
1494,Cleanup non Alpha Numeric,"[^""""\?\/\&\;\:\|\”\“\(\)\[\]\=\^\.\%\$\#\!\*\?\?\&#187;\&#171;\&#215;\?]",Cleanup non Alpha Numeric
1495,Image without alt attribute (.Net only),\<img ((src|height|width|border)=:q:Wh*)*/\>,This regex is good for finding image tags without alt tags.  I used this for working on Section 508 compliance.  This is a M$ flavored regex and probably won't work with anything else.
1496,Detect Javascript,"<script.*/*>|</script>|<[a-zA-Z][^>]*=['""]+javascript:\w+.*['""]+>|<\w+[^>]*\son\w+=.*[ /]*>","Matches any opening or closing script tags, inline javascript: tags, inline on<function> (ex: onClick) tags.

MATCHES:
<a href=""javascript:alert('test0');"">
<a href='javascript:alert(""test1"");'>
<a href=""#"" onClick=""alert('test2');"" />
<script language=""javascript"" src=""somewhere.js"">
<script language=""javascript"" src=""somewhere.js"" />
<script>
</script>"
1497,A Forgiving US Phone Number,^(1?)(-| ?)(\()?([0-9]{3})(\)|-| |\)-|\) )?([0-9]{3})(-| )?([0-9]{4}|[0-9]{4})$,This is a fairly forgiving phone number match. It's original purpose was to extract phone numbers from the details field in our database and into their own phone number table. It worked brilliantly. Enjoy!
1498,Peruvian telephone,"^[0-9]{1,3}(\s|\-)*[0-9\s\-]{6,9}[\s]*$|^[0-9]{1,3}(\s|\-)*[0-9\s\-]{6,9}[\s|\-]*(a|an|AN|ane|anex|ANEX|ANEXO|anexo)?[\s|\-|\.]*[0-9]{1,4}[\s]*$","It allows to filter telephone peruvian format with or without extension (""Anexo""), It admits several variations for this word . The extension can be 1 through 4 digits long. It can also accept city prefix (1 through 3 digits)."
1501,IPCodeSectionSeriesRim,"\d{5,12}|\d{1,10}\.\d{1,10}\.\d{1,10}|\d{1,10}\.\d{1,10}",regex for IPCodeSectionSeriesRim.
1504,VBScript functions,(?<=\s|:|&|\()(Abs|Array|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|DateAdd|DateDiff|DatePart|DateSerial|DateValue|Date|Day|DerivedMath|Escape|Eval|Exp|Filter|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Join|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Replace|RGB|Right|Rnd|Round|ScriptEngineBuildVersion|ScriptEngineMajorVersion|ScriptEngineMinorVersion|ScriptEngine|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Timer|TimeSerial|TimeValue|Time|TypeName|UBound|UCase|Unescape|VarType|WeekdayName|Weekday|Year)(?=\(),Matches all(?) basic functions for VBScript (VB some in).
1505,VB/VBScript keyword,"(?<=[\s=&\+\-,\(\)])(True|False|Nothing|Empty|Null)(?=[\s=&\+\-,\(\)])",Matches all keywords in VB and VBScript.
1506,VB and VBscript operators,(?<=\s)(And|Or|Eqv|Imp|Is|Mod|Not|Xor)(?=\s),"Matches all textual (not +, -, etc) operators in VB and VBScript."
1507,Trailing white spaces,[ \t]*?(?=\r?\n),Matches all tabs or spaces at the end of a line.
1508,JDBC DB2 Url,"^jdbc:db2://((?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:(?:(?:[A-Z|a-z])(?:[\w|-]){0,61}(?:[\w]?[.]))*)(?:(?:[A-Z|a-z])(?:[\w|-]){0,61}(?:[\w]?)))):([0-9]{1,5})/([0-9|A-Z|a-z|_|#|$]{1,16})$",Pattern for testing a jdbc db2 url (Type 4). Format jdbc:db2://<ServerName><Port>/<DatabaseName>
1509,&Mania,&( ),This pattern  will replace & with &amp; if the ampersand is followed by space else it will escape &
1510,Alphanumeric and Spacing,^[a-zA-Z0-9\040]+$,"It will allow for alphanumeric characters only, with the exception of spacing."
1511,Currency,"^\$([0]|([1-9]\d{1,2})|([1-9]\d{0,1},\d{3,3})|([1-9]\d{2,2},\d{3,3})|([1-9],\d{3,3},\d{3,3}))([.]\d{1,2})?$|^\(\$([0]|([1-9]\d{1,2})|([1-9]\d{0,1},\d{3,3})|([1-9]\d{2,2},\d{3,3})|([1-9],\d{3,3},\d{3,3}))([.]\d{1,2})?\)$|^(\$)?(-)?([0]|([1-9]\d{0,6}))([.]\d{1,2})?$","Matches number with optional commas and decimal places. Allows only max 7 digits before decimal and max 2 digits after decimal. Does not allow numbers beginning with 0 e.g., $0,234,567 but allows $0.05"
1512,Email - RFC 3696,^[a-z0-9!$'*+\-_]+(\.[a-z0-9!$'*+\-_]+)*@([a-z0-9]+(-+[a-z0-9]+)*\.)+([a-z]{2}|aero|arpa|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|travel)$,Checks email format against RFC 3696 (http://tools.ietf.org/html/rfc3696). Allows all characters described in Sections 2 and 3 of the RFC EXCEPT those described in Section 4.3 as unsafe for mailto URLs without encoding. Allows any 2-letter TLD plus any of the current gTLDs as listed at http://www.icann.org/registries/top-level-domains.htm. Does not accept quoted strings in the local part or IP addresses in lieu of the domain name. Does not enforce length limits. Intended to be used as case-insensitive. Comments are appreciated!
1513,Decimal numbers,"^[+-]?\d+(\.\d{1,4})? *%?$",An expression for .NET regular expression validation controls intended to facilitate the entry of percentage values both a whole numbers or as their decimal representations. Also compatible with the default US format for string formatting for percentages. Recommend that if you intended accept a value passing this express that you strip the percentage signs and take measures to ensure that any whole values are converted to percentages. 
1514,Split SQL Query,"((?:[^""';]|(?:""(?:\\{2}|\\""|""{2}|[^""])*?"")|(?:'(?:\\{2}|\\'|'{2}|[^'])*?'))*;?)","Splits SQL queries separated with semicolons, includes ending semicolon, all string literals are preserved.  The example statement splits into ""SELECT * FROM table WHERE field = ""item1;\n'item2'"" AND x = 1;"" and ""DELETE FROM table2 WHERE field=""x;y"" AND t='x;""y""';"""
1515,U.S. Phone numbers,^(((\(\d{3}\)|\d{3})( |-|\.))|(\(\d{3}\)|\d{3}))?\d{3}( |-|\.)?\d{4}(( |-|\.)?([Ee]xt|[Xx])[.]?( |-|\.)?\d{4})?$,with or without area code (of various forms)(does not allow for unbalanced parens in the area code).  With or without an extension (of various forms).  Does not allow for leading or trailing space.
1516,Surname Prefixes and Suffixes capturing,((A[FGIKLMNPRSUZ]S?X?|DAL?L?A?E?S?|DE|DE[LNRST]L?A?E?H?I?O?S?|DI[AE]?|DOS?|DU|EIT?N?E?|ELS?|EN|ETT?|HAI?|HE[NT]|HIN?A?I?N?R?|HOI|IL|IM|ISA|KA|KE|LAS|LES?|LH?IS?|LOS?|LO?U|MA?C|N[AIY]|O[IP]|SI|T[AEO]N?R?|U[MN][AEOS]?|VAN|VE[LR]|VO[MN]|Y[ENR]|ZU[MR]?) )?((LAS?|LOS?|DEN?R?|ZU) )?[A-Z0/'\.-]+( |$)(SR|JR|II+V?|VI+|[1-9][STRDH]+)?,This syntax matches most surname prefixes and suffixes with the surname appropriately placed.  Assumes all caps.  Useful if you want a precise match of surname prefixes and suffixes.
1517,vaildate URL,"^[http|ftp|wap|https]{3,5}:\//\www\.\w*\.[com|net]{2,3}$","it validates a simple URL like http://www.google.com , ftp://www.soso.com"
1518,Full Date with Abbreviated Month,(?i)^((((0[1-9])|([12][0-9])|(3[01])) ((JAN)|(MAR)|(MAY)|(JUL)|(AUG)|(OCT)|(DEC)))|((((0[1-9])|([12][0-9])|(30)) ((APR)|(JUN)|(SEP)|(NOV)))|(((0[1-9])|([12][0-9])) FEB))) \d\d\d\d ((([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9])$,Validates datetimes in an internationally resilient form that is still readable by the average person.
1519,Non-blank contiguous lines,(^(?=.*\S).*\n)*,"This expression bypasses an infinite-backtracking bug by looking ahead in the current line for any non-whitespace, then matching to the end of the line if the lookahead was positive. Without the lookahead, you'll end up with an infinine backtracking expression and a bad day."
1520,CSV exported from Excel (all variants),";?(?:(?:""((?:[^""]|"""")*)"")|([^;]*))","This expressions parses one line from a CSV file which has been written with Excel. It does cover all variants: simple value, value masked by double quotes (including semicolons between double quotes which don't count) and double quotes masked by double quotes (""""). Replace all semicolons within the regex to change the separator character."
1521,Phone Brazil,^((\(0?[1-9][0-9]\))|(0?[1-9][0-9]))[ -.]?([1-9][0-9]{3})[ -.]?([0-9]{4})$,"Matches Brazilian phone numbers, includes DDD (long-distance call) with or without 0. Accepts characters -, . and [space] as separators."
1522,Indian Telephone Number Format,"^((\+){1}[1-9]{1}[0-9]{0,1}[0-9]{0,1}(\s){1}[\(]{1}[1-9]{1}[0-9]{1,5}[\)]{1}[\s]{1})[1-9]{1}[0-9]{4,9}$",This is a bit strict validation format for a telephone number. It has been tested and used on live server and it works fine without any error. +91 indicates ISD code for India. Numbers inside brackets() indicates STD code and at last the is the phone number. It works with all the indian STD codes and phone numbers existing till date.
1524,label having date ,"^(\d{4})[.](0{0,1}[1-9]|1[012])[.](0{0,1}[1-9]|[12][0-9]|3[01])[.](\d{2})$",capture labels having format yyyy.mm.dd.nn here nn is for number s from 00 to 99
1528,SQL constant string,'('{2})*([^'\r\n]*)('{2})*([^'\r\n]*)('{2})*',Mach with constant string in SQL style.
1530,YYYY-MM-DD[ HH:MM[:SS]],^((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s(((0?[1-9])|(1[0-9])|(2[0-3]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])))?))?$,"Date YYYY-MM-DD (optional time HH:MM(optional seconds :SS)).  Was borrowed from this [http://regexlib.com/REDetails.aspx?regexp_id=390] but changed to use 24 hour time and optional seconds.  You can use / - or space for date delimiters, so 2004-12-31 works just as well as 2004/12/31. Checks leap year from 1901 to 2099."
1531,U.S. Currency Validation,"^\$?\d{1,3}(,?\d{3})*(\.\d{1,2})?$",Just a small pattern to make sure commas are in the rite place (if present).  Only allows one decimal to be suffixed with with 1 or 2 digits.  Also optional dollar sign may proceed value.
1532,Opening HTML Anchor Elements,(\<(a[^\>]+)\>),Finds the opening of an HTML anchor element.
1533,Postcode for Latvia,^(LV-|LV)+[0-9]{4}$,Simple postcode match for latvia.
1534,Danish Civil Registration Number,^[0-3][0-9][0-1]\d{3}-\d{4}?,"This regex performs a crude test on the given input string.
The danish cilvil registration number consists of 10 numeric characters and one special character '-'. The format is DDMMYY-XXXX."
1535,Latitude Validation,"^-?([1-8]?[1-9]|[1-9]0)\.{1}\d{1,6}",I was inspired by this regexp - Matches a whole number between 1 and 20 inclusively - because it was doing something I could not find elsewhere so this is how I expanded it to validate lat values
1536,Longitude Validation,"^-?([1]?[1-7][1-9]|[1]?[1-8][0]|[1-9]?[0-9])\.{1}\d{1,6}",Longitude validation (similiar to Latitude Validation) and inspired by the same code
1538,Does string have HTML in it?,[\w*|\W*]*<[[\w*|\W*]*|/[\w*|\W*]]>[\w*|\W*]*,This will match true if the string contians at least one HTML tag.
1540,No special chart,"""[A-Za-z0-9]{3}""",Allow only 3 charcters or number without any special characters
1541,Whole Numbers,"^(([1-9]{1}\d{0,2},(\d{3},)*\d{3})|([1-9]{1}\d{0,}))$","Matches whole numbers only, including comma separated. Does not allow leading zeros. To match comma separated numbers only, change ""\d{0,}"" to ""\d{0,2}"". To match 0, add ""|([0])"" before "")$"". If you want to use it with Java's regexp match(), remove ""^("" and "")$"" since they are not needed. "
1543,Match PCRE Modifiers (At Least in PHP),/[^imsxeADSUXu]([imsxeADSUXu]*)$/,"This matches the modifiers section of a properly formed PCRE RegEx (at least in PHP).  This of course assumes that the delimiters are not any of the modifiers letters, if that's even possible."
1544,Character position before and after decimal,"^\d{1,3}\.\d{1,4}$",Allows for 3 characters max before the decimal and 4 characters max after the decimal
1545,Price,"\d[\d\,\.]+","This regex will match any price, what so ever, if it's uses a comma as a 1000 seperator, or a dot, and if it uses comma as a decimal seperator or a dot, or if it do not use any seperator what so ever."
1546,Phone Number with Extension,"(\s+|)((\(\d{3}\) +)|(\d{3}-)|(\d{3} +))?\d{3}(-| +)\d{4}( +x\d{1,4})?(\s+|)","This expression only accept numbers, spaces, x, ( ) and -. It accepts the values with 10 digits for phone numbers. These may be seperated with any number of spaces or a single '-'. The expression also allows an optional extension number to be provided atleast a single digit and a maximum of 4 digits."
1547,Data ddMMM,[0-3]{1}[0-9]{1}(jan|JAN|feb|FEB|mar|MAR|apr|APR|may|MAY|jun|JUN|jul|JUL|aug|AUG|sep|SEP|oct|OCT|nov|NOV|dec|DEC){1},Express&#227;o para datas no formato ddMMM obrigando dois d&#237;gitos para o dia e tr&#234;s letras para o m&#234;s (em ingl&#234;s). Regex for dates at ddMMM format mandatory two digits for days and three letters for the months.
1548,email validation,"\b[\w]+[\w.-][\w]+@[\w]+[\w.-]\.[\w]{2,4}\b",Validates some common email-adresses.
1549,email,([a-zA-Z0-9_\-\.]+)(@[a-zA-Z0-9_\-\.]+),"matches any email address, where a @ is contained"
1550,url,(?:(?:(?:http|ftp|gopher|telnet|news)://)(?:w{3}\.)?(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])+),"an expression to match internet addresses with one of the known protocolls (http, ftp, gopher, telnet, news)"
1551,url,(?:(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.](?!www))+(?:\.[Cc]om|\.[Ee]du|\.[gG]ov|\.[Ii]nt|\.[Mm]il|\.[Nn]et|\.[Oo]rg|\.[Bb]iz|\.[Ii]nfo|\.[Nn]ame|\.[Pp]ro|\.[Aa]ero|\.[cC]oop|\.[mM]useum|\.[Cc]at|\.[Jj]obs|\.[Tt]ravel|\.[Aa]rpa|\.[Mm]obi|\.[Aa]c|\.[Aa]d|\.[aA]e|\.[aA]f|\.[aA]g|\.[aA]i|\.[aA]l|\.[aA]m|\.[aA]n|\.[aA]o|\.[aA]q|\.[aA]r|\.[aA]s|\.[aA]t|\.[aA]u|\.[aA]w|\.[aA]z|\.[aA]x|\.[bB]a|\.[bB]b|\.[bB]d|\.[bB]e|\.[bB]f|\.[bB]g|\.[bB]h|\.[bB]i|\.[bB]j|\.[bB]m|\.[bB]n|\.[bB]o|\.[bB]r|\.[bB]s|\.[bB]t|\.[bB]v|\.[bB]w|\.[bB]y|\.[bB]z|\.[cC]a|\.[cC]c|\.[cC]d|\.[cC]f|\.[cC]g|\.[cC]h|\.[cC]i|\.[cC]k|\.[cC]l|\.[cC]m|\.[cC]n|\.[cC]o|\.[cC]r|\.[cC]s|\.[cC]u|\.[cC]v|\.[cC]x|\.[cC]y|\.[cC]z|\.[dD]e|\.[dD]j|\.[dD]k|\.[dD]m|\.[dD]o|\.[dD]z|\.[eE]c|\.[eE]e|\.[eE]g|\.[eE]h|\.[eE]r|\.[eE]s|\.[eE]t|\.[eE]u|\.[fF]i|\.[fF]j|\.[fF]k|\.[fF]m|\.[fF]o|\.[fF]r|\.[gG]a|\.[gG]b|\.[gG]d|\.[gG]e|\.[gG]f|\.[gG]g|\.[gG]h|\.[gG]i|\.[gG]l|\.[gG]m|\.[gG]n|\.[gG]p|\.[gG]q|\.[gG]r|\.[gG]s|\.[gG]t|\.[gG]u|\.[gG]w|\.[gG]y|\.[hH]k|\.[hH]m|\.[hH]n|\.[hH]r|\.[hH]t|\.[hH]u|\.[iI]d|\.[iI]e|\.[iI]l|\.[iI]m|\.[iI]n|\.[iI]o|\.[iI]q|\.[iI]r|\.[iI]s|\.[iI]t|\.[jJ]e|\.[jJ]m|\.[jJ]o|\.[jJ]p|\.[kK]e|\.[kK]g|\.[kK]h|\.[kK]i|\.[kK]m|\.[kK]n|\.[kK]p|\.[kK]r|\.[kK]w|\.[kK]y|\.[kK]z|\.[lL]a|\.[lL]b|\.[lL]c|\.[lL]i|\.[lL]k|\.[lL]r|\.[lL]s|\.[lL]t|\.[lL]u|\.[lL]v|\.[lL]y|\.[mM]a|\.[mM]c|\.[mM]d|\.[mM]g|\.[mM]h|\.[mM]k|\.[mM]l|\.[mM]m|\.[mM]n|\.[mM]o|\.[mM]p|\.[mM]q|\.[mM]r|\.[mM]s|\.[mM]t|\.[mM]u|\.[mM]v|\.[mM]w|\.[mM]x|\.[mM]y|\.[mM]z|\.[nN]a|\.[nN]c|\.[nN]e|\.[nN]f|\.[nN]g|\.[nN]i|\.[nN]l|\.[nN]o|\.[nN]p|\.[nN]r|\.[nN]u|\.[nN]z|\.[oO]m|\.[pP]a|\.[pP]e|\.[pP]f|\.[pP]g|\.[pP]h|\.[pP]k|\.[pP]l|\.[pP]m|\.[pP]n|\.[pP]r|\.[pP]s|\.[pP]t|\.[pP]w|\.[pP]y|\.[qP]a|\.[rR]e|\.[rR]o|\.[rR]u|\.[rR]w|\.[sS]a|\.[sS]b|\.[sS]c|\.[sS]d|\.[sS]e|\.[sS]g|\.[sS]h|\.[Ss]i|\.[sS]j|\.[sS]k|\.[sS]l|\.[sS]m|\.[sS]n|\.[sS]o|\.[sS]r|\.[sS]t|\.[sS]v|\.[sS]y|\.[sS]z|\.[tT]c|\.[tT]d|\.[tT]f|\.[tT]g|\.[tT]h|\.[tT]j|\.[tT]k|\.[tT]l|\.[tT]m|\.[tT]n|\.[tT]o|\.[tT]p|\.[tT]r|\.[tT]t|\.[tT]v|\.[tT]w|\.[tT]z|\.[uU]a|\.[uU]g|\.[uU]k|\.[uU]m|\.[uU]s|\.[uU]y|\.[uU]z|\.[vV]a|\.[vV]c|\.[vV]e|\.[vV]g|\.[vV]i|\.[vV]n|\.[vV]u|\.[wW]f|\.[wW]s|\.[yY]e|\.[yY]t|\.[yY]u|\.[zZ]a|\.[zZ]m|\.[zZ]w)),"here are specified all the top level domains. In fact, this expression gets the urls only till the TLD. "
1552,url,(?:(?:w{3}\.)(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])+[\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.aero|\.coop|\.museum|\.cat|\.jobs|\.travel|\.arpa|\.mobi|\.ac|\.ad|\.ae|\.af|\.ag|\.ai|\.al|\.am|\.an|\.ao|\.aq|\.ar|\.as|\.at|\.au|\.aw|\.az|\.ax|\.ba|\.bb|\.bd|\.be|\.bf|\.bg|\.bh|\.bi|\.bj|\.bm|\.bn|\.bo|\.br|\.bs|\.bt|\.bv|\.bw|\.by|\.bz|\.ca|\.cc|\.cd|\.cf|\.cg|\.ch|\.ci|\.ck|\.cl|\.cm|\.cn|\.co|\.cr|\.cs|\.cu|\.cv|\.cx|\.cy|\.cz|\.de|\.dj|\.dk|\.dm|\.do|\.dz|\.ec|\.ee|\.eg|\.eh|\.er|\.es|\.et|\.eu|\.fi|\.fj|\.fk|\.fm|\.fo|\.fr|\.ga|\.gb|\.gd|\.ge|\.gf|\.gg|\.gh|\.gi|\.gl|\.gm|\.gn|\.gp|\.gq|\.gr|\.gs|\.gt|\.gu|\.gw|\.gy|\.hk|\.hm|\.hn|\.hr|\.ht|\.hu|\.id|\.ie|\.il|\.im|\.in|\.io|\.iq|\.ir|\.is|\.it|\.je|\.jm|\.jo|\.jp|\.ke|\.kg|\.kh|\.ki|\.km|\.kn|\.kp|\.kr|\.kw|\.ky|\.kz|\.la|\.lb|\.lc|\.li|\.lk|\.lr|\.ls|\.lt|\.lu|\.lv|\.ly|\.ma|\.mc|\.md|\.mg|\.mh|\.mk|\.ml|\.mm|\.mn|\.mo|\.mp|\.mq|\.mr|\.ms|\.mt|\.mu|\.mv|\.mw|\.mx|\.my|\.mz|\.na|\.nc|\.ne|\.nf|\.ng|\.ni|\.nl|\.no|\.np|\.nr|\.nu|\.nz|\.om|\.pa|\.pe|\.pf|\.pg|\.ph|\.pk|\.pl|\.pm|\.pn|\.pr|\.ps|\.pt|\.pw|\.py|\.qa|\.re|\.ro|\.ru|\.rw|\.sa|\.sb|\.sc|\.sd|\.se|\.sg|\.sh|\..si|\.sj|\.sk|\.sl|\.sm|\.sn|\.so|\.sr|\.st|\.sv|\.sy|\.sz|\.tc|\.td|\.tf|\.tg|\.th|\.tj|\.tk|\.tl|\.tm|\.tn|\.to|\.tp|\.tr|\.tt|\.tv|\.tw|\.tz|\.ua|\.ug|\.uk|\.um|\.us|\.uy|\.uz|\.va|\.vc|\.ve|\.vg|\.vi|\.vn|\.vu|\.wf|\.ws|\.ye|\.yt|\.yu|\.za|\.zm|\.zw](?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])*),"So, that's it. Gets url-s with ""www"", BUT without the protocols. If you need one regEx with the protocols, search for it in this database, I've added one"
1553,phone number USA,(?:(?:(?:\+)?1[\-\s\.])?(?:\s?\()?(?:[2-9][0-8][0-9])(?:\))?(?:[\s|\-|\.])?)(?:(?:(?:[2-9][0-9|A-Z][0-9|A-Z])(?:[\s|\-|\.])?)(?:[0-9|A-Z][0-9|A-Z][0-9|A-Z][0-9|A-Z])),any north american us phone number
1554,Path from jar,jar:file:/(([A-Z]:)?/([A-Z 0-9 * ( ) + \- & $ # @ _ . ! ~ /])+)(/[A-Z 0-9 _ ( ) \[ \] - = + _ ~]+\.jar!),"In java using this.getClass().getResource(""""); will result in a jar:file:/ etc url ending with yourjarfile.jar!/internal/package/path/ this regular expression matches the directory before the internal jar path declaration returning the physical directory the file resides in. should work in both posix and windows machines (untested for posix*)"
1555,Java Get Path,(jar:)?file:/(([A-Z]:)?/([A-Z0-9\*\()\+\-\&$#@_.!~\[\]/])+)((/[A-Z0-9_()\[\]\-=\+_~]+\.jar!)|([^!])(/com/regexlib/example/)),More advanced regular expression to get the full path to the directory from which your program is running. You may use this to detect the program installation dir whether you are just debugging or having a deployed program. Using the second group combined with the 7th group you'll have a full path to your program. Very useful if you use resources outside of the java package.
1556,Days in a Class Schedule,"^M{0,1}T{0,1}W{0,1}(TH){0,1}F{0,1}S{0,1}(SU){0,1}$","Matches a string if it is valid in the form of MWF or TTHS.  Maybe used for validating the ""days part"" of a class schedule field.  The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU' .  Only one instance of these set of letters is accepted."
1557,12-hr Time,^(([0][0-9]|[1][0-2])|[0-9]):([0-5][0-9])( *)((AM|PM)|(A|P))$,"Matches a string if it is a valid time in the format of ""HH:MM AM"" or ""HH:MM A""."
1559,"Currency 16,3","^\$?(([1-9],)?([0-9]{3},){0,3}[0-9]{3}|[0-9]{0,16})(\.[0-9]{0,3})?$","Currency expression, accepts 4 commas and 4 groups of 3 numbers and 1 number before the first comma, this first number will have to be different from zero. It accepts a number of, two or three decimal. It accepts zero numbers after the point. You can change the number of groups and numbers accespts before and after the point."
1561,Matches x to y number of occurrences of a regular expression,"\d{2,4}","\d{2,4} matches at least 2 but no more than 4 digits"
1562,"Unicode expression (Latin, Baltic & Cyrillic)",[a-zA-Z\u0410-\u042F\u0430-\u044F\u0401\u0451\u0101\u0100\u010c\u010d\u0112\u0113\u011E\u011F\u012A\u012B\u0136\u0137\u013b\u013C\u0145\u0146\u0160\u0161\u016A\u016B\u017D\u017E]$,"Accept Russian, Latvian & English characters"
1563,,^-?\d+(\.\d+)?$,Matches any unsigned or signed floating point number/numeric string.
1565,,"^""[^""]+""$",This expression will match quoted string without quote inside string
1566,Email regexp for ereg(),"^[a-z0-9_]{1}[a-z0-9\-_]*(\.[a-z0-9\-_]+)*@[a-z0-9]{1}[a-z0-9\-_]*(\.[a-z0-9\-_]+)*\.[a-z]{2,4}$",Checks whether email in the string that must be an E-mail address
1567,Alphanumeric w spaces and double quotes,"^[""a-zA-Z0-9\040]+$",Accepts words or quoted phrases for search strings. Stops SQL injection.
1568,email,^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$,checks all valid email id's
1571,South African Cell Phone Number,(^0[87][23467]((\d{7})|( |-)((\d{3}))( |-)(\d{4})|( |-)(\d{7}))),only allows valid cell phones from south african service providers. to date i havent seen a cell phone number starting 079 or 089 but i think the networks might support it...
1572,south african phone number,[0](\d{9})|([0](\d{2})( |-)((\d{3}))( |-)(\d{4}))|[0](\d{2})( |-)(\d{7}),validates south african phone numbers
1573,South African ID Number,(((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229))(( |-)(\d{4})( |-)(\d{3})|(\d{7})),Validates South African ID Numbers
1574,US States,^(?:(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]))$,Just a simple US State regex.  Requires valid 2 letter abbreviations.
1575,File Names Without Extensions,^[^.]+$,"Used in a web site .htaccess file as: <br /><blockquote>&lt;filesMatch ""^[^.]+$""&gt; <br />ForceType application/x-httpd-php <br />&lt;/filesMatch&gt;</blockquote> Calls for PHP parsing on files without extensions. Solution thanks to ""mash"" on RegexAdvise.com.<br /><br />"
1578,Common English Stopwords for Search Engine,[\s]a[\s]|[\s]about[\s]|[\s]an[\s]|[\s]are[\s]|[\s]as[\s]|[\s]at[\s]|[\s]be[\s]|[\s]by[\s]|[\s]for[\s]|[\s]from[\s]|[\s]how[\s]|[\s]in[\s]|[\s]is[\s]|[\s]it[\s]|[\s]of[\s]|[\s]on[\s]|[\s]or[\s]|[\s]that[\s]|[\s]the[\s]|[\s]this[\s]|[\s]to[\s]|[\s]was[\s]|[\s]what[\s]|[\s]when[\s]|[\s]where[\s]|[\s]who[\s]|[\s]will[\s]|[\s]with[\s]|[\s]the[\s]|[\s]www[\s],use this to produce search strings in your programs that run more efficiently. use the replace of the regex class to remove the characters from the user input then use the resulting string to query the database...
1579,Universal Real Number Pattern,((-)?([1-9]\d*\.\d+|0\.\d+|[1-9]\d*|0)),matches all real numbers inside a string also matches 0.0
1580,Danish CPRNR,^((((0[1-9]|[12][0-9]|3[01])(0[13578]|10|12)(\d{2}))|(([0][1-9]|[12][0-9]|30)(0[469]|11)(\d{2}))|((0[1-9]|1[0-9]|2[0-8])(02)(\d{2}))|((29)(02)(00))|((29)(02)([2468][048]))|((29)(02)([13579][26])))[-]\d{4})$,"Danish social security. [ddMMyy-0000]. Validates a correct date, but does not enforce the modulus 11 check (see www.cpr.dk for more information)."
1582,us phone pattern,"([0-9]{1}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3})?[0-9]{3}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3}[0-9]{3}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3}[0-9]{4}",This pattern enables any combination of 10 of 11 nubers written in the form of x.xxx.xxx.xxxx. The (.) separator can be replaced with any non alphabet separator.The first x with its symbol are optional
1583,ISIN number between ><,(?<=>)[A-Z]{2}[\d|\w]{9}\d{1}(?=(<)),ISIN must be located inside a html tag eg. <td>JP3756600007</td>. Just remove the (..) at the beginning and the end if you wish to match all ISINs.
1585,Entire URL up to last slash,http://.*[*/],Gets everything up to the last slash; so the match on a url like this: http://www.yoursite.com:8700/flex/photos/PhotoViewer2.swf?0=0&1=0 is this: http://www.yoursite.com:8700/flex/photos/
1586,List HTML tags,<(?![!/]?[ABIU][>\s])[^>]*>,Used to return all the html tags and closing tags in a section of html. Can be used to replace all the tags with nothing or itterate through them.
1587,find body-tag,((<body)|(<BODY))([^>]*)>,find the body-tag of a html page
1588,simple url validation,"^(http)?(https)?(\:\/\/+)?([a-zA-Z0-9\-\.]+)?\.[A-Za-z]{2,4}$",just a simple pattern to make sure a user entered URL is reasonable and possibly valid.
1589,U.S. Military Time,^([0]?\d|1\d|2[0-3]):([0-5]\d):([0-5]\d)$,Matches U.S. military time with option leading zero and required seconds.
1590,Fecha espa&#241;ol (Spanish Date),^((((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|1&#173;1)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2&#173;[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])&#173;(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)&#173;([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9&#173;][13579][26]))))$,A&#241;o con formato dd/mm/yyyy permitiendo tambi&#233;n d/m/yyyy o dd/m/yyyy y d/mm/yyyy. Adem&#225;s controla los meses con 31 y 30 d&#237;as y si es a&#241;o bisiesto o no para el mes de febrero.
1591,Entero o fracci&#243;n de enteros (Integer or fraction of integers),\d+(/\d+)?,Entero o fracci&#243;n de enteros separados por el s&#237;mbolo barra /
1592,Find Link Tags,"^<a[^>]*(http://[^""]*)[^>]*>([ 0-9a-zA-Z]+)</a>$",This pattern matches link tags in html and returns the contents of the href attribute and the text of the link.
1593,Validate a 3 field CSV file,"^(([^,\n]+),([^,\n]+),([^@]+)@([^\.]+)\.([^,\n]+)\n)+([^,\n]+),([^,\n]+),([^@]+)@([^\.]+)\.([^,\n]+)\n?$","This pattern validates a 3 field CSV file. I designed it to capture first name, last name and email address in that order."
1594,Number w/wo commas and decimal,"((^([\d]{1,3})(,{1}([\d]{3}))*)|(^[\d]*))((\.{1}[\d]{2})?$)",This re matches numbers with our without commas and with or without exactly two decimal places.
1595,Valid Date,(?:(?:(?:04|06|09|11)\/(?:(?:[012][0-9])|30))|(?:(?:(?:0[135789])|(?:1[02]))\/(?:(?:[012][0-9])|30|31))|(?:02\/(?:[012][0-9])))\/(?:19|20|21)[0-9][0-9],Matches dates in mm/dd/yyyy format. Matches only valid dates -except is unable to test for a leapyear. Always allows February 29th. Allows years from 1901 to 2199.
1596,"floating point using "",""","^[-+]?[0-9]+[\.\,]?[0-9]*([eE][-+]?[0-9]+)?$","This is a variation from pattern's Srinivas Gummadi to use a "","" in expression for floating point numbers. Este patr&#243;n valida una expresi&#243;n que contenga exclusivamente valores n&#250;mericos decimales (coma flotante), negativos y exponenciales. El ejemplo mostrado es una variaci&#243;n del original creado por Srinivas Gummadi para permitir tanto el uso de la "","" como el ""."" en notaciones decimales."
1597,Formato RUT (identificaci&#243;n personal Chile),"^\d{1,2}\.\d{3}\.\d{3}[-][0-9kK]{1}$","Verifica que un RUT tenga el formato 00.000.000-X, despues de comprobar el formato ser&#225; necesario validar su d&#237;gito verificador."
1598,Dollar Currency Pattern,"^(([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?)|([0]\.(([0][1-9])|([1-9]\d)))$","Building on Joe Lynwood's Regex which makes use of a combination of Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input, I've added support for values between 0 and 1. Being relatively new to regex, I hope someone would be able to spot any discrepancies with the code and its supposed function.
Edit 1: Corrected mis-match with non-decimal numbers."
1600,New Zealand phone numbers,"(^\([0]\d{1}\))(\d{7}$)|(^\([0][2]\d{1}\))(\d{6,8}$)|([0][8][0][0])([\s])(\d{5,8}$)","Matches New Zealand local, mobile and freecall (0800) phone numbers. "
1601,Pascal case,"^([A-Z]{1,}[a-z]{1,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,})$","Matches words in PascalCase. Only alphas, no spaces or other special characters, the first character must be upper case. Matches up to 12 PascalCase words."
1602,Password with at least 8 characters and at least 3 special symbols,"^.*(?=.{8,})((?=.*\w)((?=.{3,})?(?=.\W))).*$","Password with at least 8 characters, letters or digits and at least 3 special symbols. This regex is not correctly. Sometime it works and sometime it does not %-(. Please help me to fix it. My ICQ: 194-990-072"
1603,HTML server side include tag,"<!--\s*\#\s*include\s+(file|virtual)\s*=\s*([""'])([^""'<>\|\b]+/)*([^""'<>/\|\b]+)\2\s*-->","Works with virtual or file include type and double or single quotes.  Breaks out include type, include file path, and include file name."
1604,Newzbin File Name Prefix Stripper,(?<=\d{7}_).+((?=\x5B\d\x5D)|.{3}),"Although written specifically to strip Newzbin version 2 and 3 prefixes and the [1] IE adds in Newsbin from NZB file names, this expression can be modified to search for any prefix/suffix combination.  It also provides an example of using of grouping constructs to remove matching text."
1605,eMail Search Pattern,"^([_a-zA-Z0-9-]+\.[_a-zA-Z0-9-]*)\@((([a-zA-Z0-9-]{2,255})\.(ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|di|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|in|io|iq|ir|is|it|jo|jm|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|an|nc|ne|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sq|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|arpa|arts|biz|com|edu|firm|gov|info|int|mil|nato|net|nom|org|rec|store|web))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))$",This Regular Expression searches for a valid eMail address. It uses a list of all the known top-level-domains to verify that the domain is correct. Also Possible to find the IP Address
1606,non zero positive integer,^(0+[1-9]|[1-9])[0-9]*$,used to validate form fields values for positive integer values greater than 0 without explicitly checking if the input form value is greater than 0
1607,US/Canadian Addresses,"^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[BLKSZRAP]|BC|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ABDEHINOPST]|N[BCDEHJLMSTUVY]|O[HKRN]|P[AERW]|QC|RI|S[CDK]|T[NX]|UT|V[AIT]|W[AIVY]|YT)\s+((\d{5}-\d{4})|(\d{5})|([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[A-Za-z]\s?\d[A-Za-z]\d))\s*$",This is built on an Address expression by Ross Hammer (who in turn built on an expression from Michael Ash)... and the zipcode expression from Matthew Aznoe.  This one adds validation for Canadian provinces and postal codes (so it does both US and Canada)
1608,RegEx that match all most all Telephone number pattern,"preg_match_all(""/([\(\+])?([0-9]{1,3}([\s])?)?([\+|\(|\-|\)|\s])?([0-9]{2,4})([\-|\)|\.|\s]([\s])?)?([0-9]{2,4})?([\.|\-|\s])?([0-9]{4,8})/"",$string, $phones); ","This expression matches all following Telephone number patterns [US Telephone, Indian Telephone, Canadian Telephone & Fax Numbers]. I tested it and its working fine. and hope this will be helpful to u people. suggestion are welcome ! +91-80-1234567 | +91 80 1234567 | +91 80-1234567 | +91-80 1234567 | +91.80.1234567 | +91.80-1234567 | +91-80.1234567 | (91)80-1234567 | (91)80 1234567 | (91)80.1234567 | +91-80-12345678 | +91 80 12345678 | +91 80-12345678 | +91-80 12345678 | +91.80.12345678 | +91.80-12345678 | +91-80.12345678 | (91)80-12345678 | (91)80 12345678 | (91)80.12345678 | +91-484-1234567 | +91 484 1234567 |  +91 484-1234567 | +91-484 1234567 | +91.484.1234567 | +91.484-1234567 |  +91-484.1234567 | (91)484-1234567 | (91)484 1234567 | (91)484.1234567 | +91-484-12345678 | +91 484 12345678 | +91 484-12345678 | +91-484 12345678 | +91.484.12345678 | +91.484-12345678 | +91-484.12345678 | (91)484-12345678 | (91)484 12345678 | (91)484.12345678 | +123-123-1234 | +123 123 1234 | +123 123-1234 | +123-123 1234 | +123.123.1234 | +123.123-1234 | +123-123.1234 | (123)123-1234 | (123)123 1234 | (123)123.1234 | +123-123-1234 | +123 123 1234 | +123 123-1234 | +123-123 1234 | +123.123.1234 | +123.123-1234 | +123-123.1234 | (123)123-1234 | (123)123 1234 | (123)123.1234 | 123-123-1234 | 123 123 1234 | 123 123-1234 | 123-123 1234 | 123.123.1234 | 123.123-1234 | 123-123.1234 | 123-123-1234 | (001)456-789-1234 | 001-456-789-1234 | 4841801234 | +91.1234567890 | +91-1234567890 | +91 1234567890 | 1-561-555-1212 | 1234567890 | 1234-1234567 | 123-12345678 (05)12341234 | 09886657989  - Phone , Telephone

""+91 80 2559 4800"" and ""91 (80) 234 65453"""
1609,Last word,\w*$,Finds the last word in a string eg. the user in \\domain\user or the extension/file type in a file name.
1610,Last word,\w*$,Finds the last word in a string eg. the user in \\domain\user or the extension/file type in a file name.
1611,Remove (X)HTML like tags,<\s*?[^>]+\s*?>,This simple pattern is useful for removing all HTML tags with or without atributes. It has no removing white spaces
1612,Numeric Range,"^[0-9]%?$|^1[0-9]%?$|^2[0-9]%?$|^3[0-5]%?$|^[0-9]\.\d{1,2}%?$|^1[0-9]\.\d{1,2}%?$|^2[0-9]\.\d{1,2}%?$|^3[0-4]\.\d{1,2}%?$|^35%?$",A range of numbers 0-35 optionally including a percent sign and 2 position decimal.
1613,Very Strong Password,"^(?=.*[a-z].*[a-z])(?=.*[A-Z].*[A-Z])(?=.*\d.*\d)(?=.*\W.*\W)[a-zA-Z0-9\S]{9,}$","This pattern requires at least two lowercase letters, two uppercase letters, two digits, and two special characters.  There must be a minimum of 9 characters total, and no white space characters are allowed."
1615,Relative paths in HTML,"(<(?:.*?)\s)href\s*=([\s""'])*/?([^\2:#]+?)\2((?:.*?)>)","This expression matches all HREF relative paths, but not full URLs or dead # links.  It can be used for selecting paths that need to be updated in HTML that has replaced from its original page onto a new one.  It matches the entire containing tag with the following groups: 1 - the start of the containing tag through the space before the attribute, 2 - the delimiter between the attribute's equal sign and its value (e.g. a double quote), 3 - the attribute value, 4 - the remainder of the tag after the closing attribute value delimiter."
1616,website URL,(http://|)(www\.)?([^\.]+)\.(\w{2}|(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum))$,I think this is one of the website url we can validate
1617,Bugtraq logregex property for trac,"(refs|references|re|closes|closed|close|see|fixes|fixed|fix|addresses) #(\d+)(( and |, | & | )#(\d+))*",This expression can be used to set the bugtraq:logrexep property of a subversion repository. It uses the format supported by trac and enables for example tortoisesvn to transform the issue numbers used in the commit messages into links pointing to the issue in the bugtracker.
1618,Time Regex,^(((0?[1-9])|([1][0-2])):[0-5][0-9]\s(([Aa][Mm]|[Pp][Mm])))|(([0-1][0-9]|[2][0-3])([0-5][0-9]))$,"This expression matches for all times in standard AM/PM 12-hour clock format with a colon between hour and minute, and a space between numbers and AM/PM.  AM/PM is case insensitive.  It also matches for valid 24 hour times"
1619,South African VAT registration number,((19|20)[\d]{2}/[\d]{6}/[\d]{2}),Useful for verifying VAT Registration Numbers
1620,Istat Code,\d{2}[.]{1}\d{2}[.]{1}[0-9A-Za-z]{1},This pattern match the Italian Istat Ateco Code (Codice Istat) updated to Istat Declaration Ateco 2004
1621,Iban Italy,IT\d{2}[ ][a-zA-Z]\d{3}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{3}|IT\d{2}[a-zA-Z]\d{22},International Bank Account Number (IBAN) Italian. Identify Bank account in Italy.
1622,email with german umlaut,"^\w[a-zA-Z0-9&#246;&#228;&#252;&#214;&#196;&#220;\.\-_]+@[a-zA-Z0-9&#246;&#228;&#252;&#214;&#196;&#220;\-_]+?\.[a-zA-Z]{2,3}$","allows numbers, umlauts, dots and bars"
1623,File Path,"^(([a-zA-Z]\:)|(\\))(\\{1}|((\\{1})[^\\]([^/:*?<>""|]*))+)$","Checks for a valid Filepath, either located on a local drive or a UNC share on the network. Use the following string to include the regex within a XML defintion file: RegEx=""^([a-zA-Z]\:)|(\\)(\\{1}|((\\{1})[^\\]([^/:*?&lt;&gt;&quot;|]*(?&lt;!\[\])))+)$""/> (encode the appropiate HTML characters like <,>,"" with the appropiate HTML codes < = (ampersand)lt; > = (ampersand)gt; "" = (ampersand)quote;"
1624,Hexadecimal color,"/^#?(?:[0-9A-F]{3}){1,2}$/i",Test hex color for valid.
1625,Visa Credit Card,(^4\d{12}$)|(^4[0-8]\d{14}$)|(^(49)[^013]\d{13}$)|(^(49030)[0-1]\d{10}$)|(^(49033)[0-4]\d{10}$)|(^(49110)[^12]\d{10}$)|(^(49117)[0-3]\d{10}$)|(^(49118)[^0-2]\d{10}$)|(^(493)[^6]\d{12}$),"Matches Visa CC types 13 or 16 digits starting with 4 including Visa CC, Visa ATM only, Visa Electron and Visa Delta.  Safe for international and will NOT match ""^(49)"" Switch debit cards."
1626,Maestro Credit Card ,"(^(5[0678])\d{11,18}$)
|(^(6[^0357])\d{11,18}$)
|(^(601)[^1]\d{9,16}$)
|(^(6011)\d{9,11}$)
|(^(6011)\d{13,16}$)
|(^(65)\d{11,13}$)
|(^(65)\d{15,18}$)
|(^(633)[^34](\d{9,16}$))
|(^(6333)[0-4](\d{8,10}$))
|(^(6333)[0-4](\d{12}$))
|(^(6333)[0-4](\d{15}$))
|(^(6333)[5-9](\d{8,10}$))
|(^(6333)[5-9](\d{12}$))
|(^(6333)[5-9](\d{15}$))
|(^(6334)[0-4](\d{8,10}$))
|(^(6334)[0-4](\d{12}$))
|(^(6334)[0-4](\d{15}$))
|(^(67)[^(59)](\d{9,16}$))
|(^(6759)](\d{9,11}$))
|(^(6759)](\d{13}$))
|(^(6759)](\d{16}$))
|(^(67)[^(67)](\d{9,16}$))
|(^(6767)](\d{9,11}$))
|(^(6767)](\d{13}$))
|(^(6767)](\d{16}$))","Meastro ONLY card matching - begins with ""50"" or ""56-58"" or ""6"" & 13 to 20 total digits. Overlap of Discover, Solo and Switch is handled and NOT matched."
1627,MasterCard Credit Card,^5[1-5]\d{14}$,"Matches MasterCard credit cards.  International safe, no overlap with other cards."
1628,Discover Credit Card,(^(6011)\d{12}$)|(^(65)\d{14}$),"Discover Credit Card matching.  International safe, no overlap"
1629,AMEX Credit Card,(^3[47])((\d{11}$)|(\d{13}$)),AMEX Credit Card match.  International safe
1630,Solo Credit card,"(^(6334)[5-9](\d{11}$|\d{13,14}$))
|(^(6767)(\d{12}$|\d{14,15}$))",Solo Credit Card match.  International safe.
1631,Switch Credit Card,"(^(49030)[2-9](\d{10}$|\d{12,13}$))
|(^(49033)[5-9](\d{10}$|\d{12,13}$))
|(^(49110)[1-2](\d{10}$|\d{12,13}$))
|(^(49117)[4-9](\d{10}$|\d{12,13}$))
|(^(49118)[0-2](\d{10}$|\d{12,13}$))
|(^(4936)(\d{12}$|\d{14,15}$))
|(^(564182)(\d{11}$|\d{13,14}$))
|(^(6333)[0-4](\d{11}$|\d{13,14}$))
|(^(6759)(\d{12}$|\d{14,15}$))",Switch CC match.  International safe.
1632,JCB credit card,(^(352)[8-9](\d{11}$|\d{12}$))|(^(35)[3-8](\d{12}$|\d{13}$)),JCB cc match.  International safe
1633,Dinner credit card,(^(30)[0-5]\d{11}$)|(^(36)\d{12}$)|(^(38[0-8])\d{11}$),Diners CC match.  International safe
1634,Cart Blance Credit Card,^(389)[0-9]{11}$,Cart Blance Credit Card match. International safe
1635,EnRoute Credit Card,(^(2014)|^(2149))\d{11}$,EnRoute Credit Card match. international safe.
1636,url pattern,(http(s)?|ftp(s)?://)?([\w-]+\.)+(BIZ|COM|EDU|GOV|INT|MIL|NET|ORG|PRO|AERO|ARPA|COOP|INFO|NAME|NATO|[A-Z]{2}),match most url except for 10.100.200
1637,UK Debit Cards,"(^(5[0678])\d{11,18}$)|(^(6[^05])\d{11,18}$)|(^(601)[^1]\d{9,16}$)|(^(6011)\d{9,11}$)|(^(6011)\d{13,16}$)|(^(65)\d{11,13}$)|(^(65)\d{15,18}$)|(^(49030)[2-9](\d{10}$|\d{12,13}$))|(^(49033)[5-9](\d{10}$|\d{12,13}$))|(^(49110)[1-2](\d{10}$|\d{12,13}$))|(^(49117)[4-9](\d{10}$|\d{12,13}$))|(^(49118)[0-2](\d{10}$|\d{12,13}$))|(^(4936)(\d{12}$|\d{14,15}$))","Matches any of Solo, Switch or Maestro.  International safe. Will not match on Discover, Visa or Mastercard.  For example; Most recommendations for matching Visa are that they start with ""4"".  If outside the US, this are incomplete on will falsly ID most Switch cards as Visa."
1638,Signed Integers with Commas,"(^\-|\+)?([1-9]{1}[0-9]{0,2}(\,\d{3})*|[1-9]{1}\d{0,})$|^0?$","Allows any integer, signed (+/-) or not, with or without commas, or zero (0), or blank."
1639,*.css without http,"(href=|url|import).*[\'""]([^(http:)].*css)[\'""]","get all css links, tags ect without http,  i needed this to my web crawler, maybe somebody need this to ;)_"
1640,ISBN 10 or 13,^(97(8|9))?\d{9}(\d|X)$,"Validates both ISBN 10 and ISBN 13 numbers, and confirms ISBN 13 numbers start with only 978 or 979."
1641,Positive Integer with comma separated ,"^[0-9]{1,3}$|^[0-9]{1,3}\,[0-9]{3}$","must have comma separated , can't be biger then  999,999

Thanks to Harel!"
1643,Another CSV," *""[^,]*"" *| *"".*"" *| *[^,]* *","Returns everything between the commas including the quotes anything inside the quotes is ignored.

Only works per single line."
1644,BBCode matching (opened/closed/with arguments/attributes),(\[([^/].*?)(=(.+?))?\](.*?)\[/\2\]|\[([^/].*?)(=(.+?))?\]),"Matches BBCode, non-recursive. You must recursively run the pattern with each resulting subpattern to get all the tag."
1645,VB Style Quoted String,"""(""""|[^""])*""","This will match the VB-style quoted string. That means to use "" in the quoted string you must use """" instead."
1646,C-Style Quoted String version 2,"""(\\.|[^""])*""","This time is for C-Style Quoted String matching. So to use "" in the quoted string you need to use \"" and if you wanted to use \ in your string, use \\."
1647,Microsoft Printing Number ranges validation,"[^\d^\-^\,^\x20]+","Just a beginner....here's something I'm using to emulate the Microsoft ""Print"" functionality, where you can enter page numbers to print seperated by commas or specify a range using the ""-"" symbol. The expression checks across a whole string looking for anything that is NOT equal to a number, a minus symbol, a comma and a space character. You can use this expression to do a quick true-false check to see if the user has entered a valid string / page numbers. Later you could then write a routine to sort and / or process the input. Nothing fancy but might help someone. Comments welcome."
1648,Floating Point Trimmer,([^0-9$\.][0-9]+\.[0-9]+)0([^0-9\.]),"Removes extra zeros after the decimal place in strings containing floating-point values.  Designed to be used on files generated by the ArmA mission editor, however it appears to be feasible for most source code files (c++, vb, etc.)."
1649,File Extension,(^\*\.[a-zA-Z][a-zA-Z][a-zA-Z]$)|(^\*\.\*$),Matching any file extension.
1650,24hr time,^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$,matching times from 0[0]:0[0] to 23:59
1651,UNIX ls -l,^([A-Za-z\-]+)\s+(\w+)\s+([A-Za-z0-9_\-\.]+)\s+([A-Za-z0-9_\-\.]+)\s+(\d+)\s+(.{3} [0-9 ]{2} ([0-9][0-9]:[0-9][0-9]| [0-9]{4}))\s+(.+)$,"GLOB the output of an ""ls -l"" command to extract specific details.  It takes into account issues with older files/directories having a year in place of an hour:minute entry."
1652,Windows Folder Validation,"^[^\\\/\?\*\""\>\<\:\|]*$",Validates entry for a valid Windows folder name. Excludes all forbidden characters.
1653,Simple Email check,"^[a-zA-Z0-9\_\-]+[a-zA-Z0-9\.\_\-]*@([a-zA-Z0-9\_\-]+\.)+([a-zA-Z]{2,4}|travel|museum)$","Simple Email check, ideal for a quick mail check."
1654,Alphanumeric revised,"^[\w]{1,}$",alphanumeric - no space allowed - requires at least one character
1655,Strip RTF Formatting,^\{(.+)|^\\(.+)|(\}*),Removes RTF formatting from a string
1656,Companies House,^[0-9]{3}[-|/]{1}[0-9]{6}[-|/]{1}[0-9]{6}$,This Regular Expression is used to match the Companies House 503 Reference number that is given when a customer places an online order.www.companieshouse.gov.uk
1657,Company Number - Limited,^[0-9]{8}$,Thie expression is used to match a United Kingdom Limited Company number in the UK. This is for Companies registered in England & Wales ONLY. This does not include Scotland.
1658,Company Number - Limited SCOTLAND,^[SC]{2}[0-9]{6}$,Thie expression is used to match a United Kingdom Limited Company number in the UK. This is for Companies registered in Scotland. This is not for Companies registered in England & Wales.
1659,New Style UK Number Plates,"^[A-Za-z]{2}[ ]{0,1}[0-9]{2}[ ]{0,1}[a-zA-Z]{3}$",This expression can be used to check against the format of a United Kingdom Vehicle Registration plate in the new style.
1660,Old Style UK Number Plates,"^[a-zA-Z]{1}[0-9]{0,3}[ ]{0,1}[a-zA-Z]{3}$",This expression can be used to check against the format of a United Kingdom Vehicle Registration plate in the OLD style.
1661,Email Address,^[a-zA-z0-9]+[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$,Expression to check for .com email addresses
1662,ISBN Checker,"^[ISBN]{4}[ ]{0,1}[0-9]{1}[-]{1}[0-9]{3}[-]{1}[0-9]{5}[-]{1}[0-9]{0,1}$",Expression to check for a valid ISBN number
1663,UK Mobile Phone Number Check,"^[0-9]{0,5}[ ]{0,1}[0-9]{0,6}$",UK Mobile phone number check
1664,Companies House,"[cC]{1}[0-9]{0,7}",Companies House Postal Search account number expression
1665,IPv6 address,"(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7})|([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){5}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(:(:[0-9A-Fa-f]{1,4}){1,6})|(:(:[0-9A-Fa-f]{1,4}){0,4}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|([0-9A-Fa-f]{1,4}:(:[0-9A-Fa-f]{1,4}){1,5})|([0-9A-Fa-f]{1,4}:(:[0-9A-Fa-f]{1,4}){0,3}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){1,4})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,2}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){1,3})|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4})?:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){1,2})|(([0-9A-Fa-f]{1,4}:){4}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){5}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,6}:)|(::))",Perl regex for IPv6 addresses. Tested against RFC 2373 specs.
1666,IPv4 address,"((\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})",Perl regex for IPv4 addresses. Tested against RFC 1035 specs.
1667,Private IP address,(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^127\.0\.0\.1),It matches private IP addresses. Private IP addresses (as defined by RFC 1918) are not routable on public Internet. This would help if you want to grant some previlege only to the users from within local network. ***Importnat*** This pattern assumes that the input is a valid IP address. You many need to make sure the input is a valid IP address. 
1668,"pattern matching, start, exclusion, and ending with group","^(edit|start|@|spool+)\s{1,3}[^&amp;]*\.(log)$","This regex should return a list of lines that start with either the word 'spool', 'edit', 'start' or the symbol @,  followed by 1 to 3 spaces, followed by any character except an ampersand, and ending with the file extension .log.   I am having difficulty to get this to work properly.  It seems that it gets stuck determining 1 to three spaces."
1669,Dutch zipcode,^[1-9][0-9]{3}[ ]?(([a-rt-zA-RT-Z]{2})|([sS][^dasDAS]))$,"Dutch zipcode. The non-matching code does not match because lettercombinations SS, SA and SD are not allowed. (historic reasons ?). 
"
1672,Email Address,"([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})",find out the correct email format
1674,vowel,"[aeiou]{2,}",repetation of more than one vowel
1676,Canadian Postal Code,\b[A-Z-[DFIOQUWZ]]\d[A-Z-[DFIOQU]]\ +\d[A-Z-[DFIOQU]]\d\b,Find out Canadian Postal Code in the text or html file or xml file
1677,double words,\b(\w+)\s+\1\b,to find the double same word
1678,All words,\w+,to find all text but not signs
1683,social security number,\d{3}-\d{2}-\d{4},To find out social security number
1684,Numbers from 1-12,^([1-9]$)|(1[0-2]$),Matches numbers from 1-12 without leading zeros
1685,Regular Expression for dd MMM yyyy date format with leap year,Date Format in dd MMM yyyy ----> (^(3[01]|[12][0-9]|0?[1-9])\s{1}(Jan|Mar|May|Jul|Aug|Oct|Dec)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(30|[12][0-9]|0?[1-9])\s{1}(Apr|Jun|Sep|Nov)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(2[0-8]|1[0-9]|0?[1-9])\s{1}(Feb)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(29)\s{1}(Feb)\s{1}([2468][048]00)$)|(^(29)\s{1}(Feb)\s{1}([3579][26]00)$)|(^(29)\s{1}(Feb)\s{1}([1][89][0][48])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][0][48])$)|(^(29)\s{1}(Feb)\s{1}([1][89][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([1][89][13579][26])$)|(^(29)\s{1}(Feb)\s{1}([/])([2-9][0-9][13579][26])$),It validates the leap year also
1686,Regular Expression for dd MMM yyyy date format with leap year,Date Format in dd MMM yyyy ----> (^(3[01]|[12][0-9]|0?[1-9])\s{1}(Jan|Mar|May|Jul|Aug|Oct|Dec)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(30|[12][0-9]|0?[1-9])\s{1}(Apr|Jun|Sep|Nov)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(2[0-8]|1[0-9]|0?[1-9])\s{1}(Feb)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(29)\s{1}(Feb)\s{1}([2468][048]00)$)|(^(29)\s{1}(Feb)\s{1}([3579][26]00)$)|(^(29)\s{1}(Feb)\s{1}([1][89][0][48])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][0][48])$)|(^(29)\s{1}(Feb)\s{1}([1][89][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([1][89][13579][26])$)|(^(29)\s{1}(Feb)\s{1}([/])([2-9][0-9][13579][26])$),It validates the leap year also
1687,UK Postcode,"^(GIR\\s{0,1}0AA|[A-PR-UWYZ]([0-9]{1,2}|([A-HK-Y][0-9]|[A-HK-Y][0-9]([0-9]|[ABEHMNPRV-Y]))|[0-9][A-HJKS-UW])\\s{0,1}[0-9][ABD-HJLNP-UW-Z]{2})$",This regex have been created as per the information provided on http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm. This expression will allow the postcodes with space or without space.
1688,Base64,^([0-9A-Za-z+/]{4})*([0-9A-Za-z+/][AQgw]==|[0-9A-Za-z+/]{2}[AEIMQUYcgkosw048]=)?$,Matches any whitespace-free Base64. Complete with handling of end sequences.
1689,New Zealand mobile phone ,"(^[0][2][1579]{1})(\d{6,7}$)",This pattern matches the New Zealand mobile phone number. Only 021 025 027 029 number are matched.
1690,Match Valid UK Postal District in a partial or whole Postcode,"^(GIR|[A-Z]\d[A-Z\d]?|[A-Z]{2}\d[A-Z\d]?)[ ]??(\d[A-Z]{0,2})??$","This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions.  The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space are also accepted). Requires postcodes to be upper-case."
1691,Match Valid UK Postcode,^(GIR|[A-Z]\d[A-Z\d]??|[A-Z]{2}\d[A-Z\d]??)[ ]??(\d[A-Z]{2})$,"Validates a complete UK postcode. Returns the two halves in sub-expressions. Supports the following 7 formats: A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (** And the same 7 formats without the space are also accepted).  (requires postcodes to be upper-case)"
1692,Slovenian (Mobile) phone number,^(([0-9]{3})[ \-\/]?([0-9]{3})[ \-\/]?([0-9]{3}))|([0-9]{9})|([\+]?([0-9]{3})[ \-\/]?([0-9]{2})[ \-\/]?([0-9]{3})[ \-\/]?([0-9]{3}))$,I'm using this to match Slovenian phone numbers. It's a bit rusty... If you have better version or updated please send it to me.
1693,Tab Delimited Parser,[^\t]+|\t(?=\t)|\t$,"I wrote this for a company that was importing a variety of rich text separated by tabs. By applying this regular expression, you can filter out even empty fields which return as a single tab qualified by a tab in front of them unless its the end of the string, which will return a single tab as well. You can filter out the returned tabs in your .NET code.
For NEWBIES, this expression says:
""Return anything but Tabs, and separate data by the tabs"" [^\t]+
""Or"" |
""For Empty Tabs, Return those that have a tab in front of them"" \t(?=\t)
""Or"" |
""Return Empty Tabs at the end of a string""
\t$
Hope this helps you on your journey in learning Regular Expressions! You can contact me using my form at http://www.thomasdcox.com/contactme.aspx"
1694,Network FilePath Directory,"@""^([\\][\\][^\\\/"""":*?<>|]+)(([\\][^\\/"""":*?<>|]+)*([\\]?))$""",This is a Regex for .Net to verify a Network FilePath with directory only
1695,Drive FilePath Directory,"@""^([A-Za-z]:)(([\\][^\\/"""":*?<>|]+)*([\\])?)$""",This is a Regex for .Net to verify a DriveFilePath with directory only
1696,Filename,"@""^([^\\/"""":*?<>|.])([^\\/"""":*?<>|]*)$""",This is a Regex for .Net to verify a filename only
1697,Drive FilePath with filename,"""^([A-Za-z]:)(([\\][^\\/"""":*?<>|]+)*([\\]([^\\/"""":*?<>|.])([^\\/"""":*?<>|]*))+)$""",This is a Regex for .Net to verify a Drive FilePath with required filename
1699,Proper noun finder,((?!(This|It|He|She|[MTWFS][a-z]+day|[JF][a-z]+ary|March|April|May|June|July|August|[SOND][a-z]+ber))(?:[A-Z]+\.\s?)*(?:(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+)(?:(\b\s?((?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+|[A-Z]+\.|on|of|the|von|der|van|de|bin|and))*(?:\s*(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+))?),Tries to find the proper nouns in a text
1700,min-max field length,"^[\w\W]{1,1500}$","Matches 1-1500 characters including carriage returns (""\r\n"")"
1703,Date and time validation,^((((0?[1-9]|1[012])/(0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\d)\d{2}|0?2/29/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00))))[\s]((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$,The date field takes all values with slashes. Leap year is taken care of Year has to be specified in 4digit. Time is a 12hrclock taking am n pm(case insensitive). AM or Pm has to be specified. Not suited for 24hr clock. In the format of SQL Server datetime field
1704,AW Short Coordinate,^[0-9]+[NnSs] [0-9]+[WwEe]$,"This tests, are entered AW coordinates in correct short format, and it has no world info"
1705,More versatile date matcher,^[01]*[0-9]\/[0-3]*[0-9]\/[12][09][0-9]{2}$,"Matches months from 1 to 19 (allows for preceding 0), date from 00 to 39, years - starting with 10, 19, 20 or 29."
1706,SqlServer Floating point,^(([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?([12]?\d\d?|30[0-8])))?)?$,"SqlServer seems to throw an error when using higher than e308 for e-309 it just makes the value = 0. Either way, this regexp seems to work for me. and allows for empty string as well. To negate the empty string pass through in asp.net just add a required field validator--if your already program asp.net you probably already know that though : ) ."
1707,24H Time,^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$,"Checks time in 24 hours notation, however this one is shorter than the ones I found on regexplib"
1708,tab-delimited numbers,"^([0-9]{1,3}\.?\d*\s+){3}([0-9]{1,3}\.?\d*\s*)$","4 positive numbers or decimals whose values are less than 1000 separated by white-space with or without trailing white-space. This has a problem where whole numbers greater than 1000 are allowed.  Explaination:

^     (start of string)
{1,3} (1 to 3 digits - to check < 1000)
\.?   (zero or one decimal points)
\d*   (zero or more digits)
s+    (one or more white-space characters)
{3}   (first pattern in parens repeats exactly 3 times)
s*    (zero or more white-space characters)
$     (end of string)

"
1709,Filter Other Domain Names,https?://(?!\S*?domainname\.tld/)\S*?/,"This type of filter can be used if you're trying to get rid of results from a report or something not originating from a given domain of the format domainname.tld.  Anything matching the pattern can then be excluded, deleted, etc. (Like with a Google Mini, GSA, or site auditing software)"
1710,Cleaning HTML," <\/{0,1}(?!\/|b>|i>|p>|a\s|a>|br|em>|ol|li|strong>)[^>]*>","following a bit of work this morning trying to get something to strip out arbitrary html but leave 'known' tags in place, we have come up with the following which may be useful. This uses the 'negative lookahead' construct using '?!'  It looks for an angle bracket and perhaps a backslash, as long as it is *not* followed by one of the terms in the ?! section. The brackets in this section do not return a value, they are part of the construct. This regexp can therefore be used to replace all unknown tags  with blanks. Obviously you can add other 'good' html tags to the list."
1711,Cleaning HTML," <\/{0,1}(?!\/|b>|i>|p>|a\s|a>|br|em>|ol|li|strong>)[^>]*>","following a bit of work this morning trying to get something to strip out arbitrary html but leave 'known' tags in place, we have come up with the following which may be useful. This uses the 'negative lookahead' construct using '?!'  It looks for an angle bracket and perhaps a backslash, as long as it is *not* followed by one of the terms in the ?! section. The brackets in this section do not return a value, they are part of the construct. This regexp can therefore be used to replace all unknown tags  with blanks. Obviously you can add other 'good' html tags to the list."
1713,match web pictrue's (eg. jpg) address,https?://[\w./]+\/[\w./]+\.(bmp|png|jpg|gif),"match web pictrue's address,must be full path,include http head."
1714,Numbers sepereted by comma,"^([0-9][,]?)*([0-9][0-9])$",This pattern matches numbers separated by comma
1715,VBScript Declaration,"^[\s]*(?:(Public|Private)[\s]+(?:[_][\s]*[\n\r]+)?)?(Function|Sub)[\s]+(?:[_][\s]*[\n\r]+)?([a-zA-Z][\w]{0,254})(?:[\s\n\r_]*\((?:[\s\n\r_]*([a-zA-Z][\w]{0,254})[,]?[\s]*)*\))?","Matches any VBScript method declaration (= no ""As [datatype]"" support), supports line wraps, only matches valid argument/method names, Public/Private and arguments are optional.

First regex, please comment ;)"
1717,Match Valid HTML Tags As Browser,"<(/)?(a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|em|fieldset|font|form|frame|frameset|h[1-6]|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|xmp){1}(\s(\""[^\""]*\""*|[^>])*)*>","This should match all valid HTML 4.01 tags as a browser would recognize. If you miss a 2nd "" it will continue until it finds one to pair with, so if it doesn't find one, it continues until the end. This is how most browsers work I believe. It does have a few flaws, it will match </img> and </input> which is weird, but perhaps I'll fix that eventually."
1718,Allowing only single space in between two words,"([a-zA-Z]{1}[a-zA-Z]*[\s]{0,1}[a-zA-Z])+([\s]{0,1}[a-zA-Z]+)","This Regular expression will simply not allow more than a single space to be entered between two words of a sentence.It will also prohibit user to enter space at the begining and at the end of a sentence.It will require a minimum of juz 2 alphabets for making it a valid expression
-By Swapnil Shejul"
1719,Easiest URL Link,"(http://|https://)([a-zA-Z0-9]+\.[a-zA-Z0-9\-]+|[a-zA-Z0-9\-]+)\.[a-zA-Z\.]{2,6}(/[a-zA-Z0-9\.\?=/#%&\+-]+|/|)","As always, I couldn't find a regex that worked for me. It only covers full urls with http:// and https://, obviously if you want to add ftp:// then change the first part to: (http://|https://|ftp://) etc..., you get my drift. If you want to cover everything, like short urls, try this site: http://internet.ls-la.net/folklore/url-regexpr.html"
1720,dd MONTH YYYY,([1-9]|[12][0-9]|3[01])\s(J(anuary|uly|une)|February|Ma(rch|y)|April|August|(Octo|Decem|Septem|Novem)ber)\s[1-9][0-9]{3},A basic regexp to find occurences of human readable text in the form of dd MONTH YYYY
1721,Strong Password,"^(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{7,30}$","The basic expression requires at least 1 lower case, 1 upper case, 1 numeric, 1 non-word and no whitespace.
<br /><br />
The format of the expression lends itself to being parameterised, thus in C# I have a method that returns a modified pattern based on passed in parameters e.g.
<br /><br />return ""^(?=(.*[a-z]){"" + minLowerCase.ToString() + "",})""<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ""(?=(.*[\d]){"" + minNumeric.ToString() + "",})""<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ "".{"" + minLength.ToString() + "","" + maxLength.ToString() + ""}$"");<br /><br />Its then possible to set the password strength via configuration files which require strong passwords in production environments, but allow weaker passwords in development environments."
1722,US Phone with/without Extension (.NET),"\(?(\d{3})(?:\)*|\)\s*-*|\.*|\s*|/*|)(\d{3})(?:\)*|-*|\.*|\s*|/*|)(\d{4})(?:\s?|,\s?)","Fairly universal regex for matching any US Phone number in .net.  It basically matches the 10 digit phone number using the common US patterns, and allows for any text after the fact.  I use it with the .replace method and pull out ""$1$2$3"" to get the pure 10-digit phone number, and anything after that is just stored as additional text.  this additional text could be an extension, daytime information, hours, etc."
1723,"MONTH DD, YYYY","(J(anuary|uly|une)|February|Ma(rch|y)|April|August|(Octo|Decem|Septem|Novem)ber)\s([1-9]|[12][0-9]|3[01]), [1-9][0-9]{3}",Regular expression for Common american format
1724,Time (12 or 24),"^(((?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(([0-1][0-9]|[2][0-3]):([0-5][0-9])))$",Validate the time in either 12-hours or 24-hours base
1725,Malaysian Identification Card (IC) format,"^([a-zA-Z]{1,3}-\d{1,7})|(\d{6}-\d{2}-\d{4})$","IC format for Malaysian (Public, Police, Army)"
1726,Number Validation,(?!^([0-9]+[-]?[0-9]+)$)(?!^([0-9]+[[\\s]*]?[0-9]+)$)^([0-9]+\.?[0-9]+$|(^[-]?[0-9]+([[\\s]*]?)$)|^([-]?)[0-9]+\.?[0-9]+([[\\s]*]?)|([0-9]+))$,"I have worked on this regular expression to get valid numbers from users. Its really simple, but yes required alot of my time and attention to make it work perfectly. It was my very first creation of regular expression."
1727,UserId,(?!^([0-9]+)([[\\s]*]?)$)(?!^([0-9]+)[[a-zA-Z]*]?([[\\s]*]?)$)^([_]?([a-zA-Z0-9]+)([[\\s]*]?))$,This regular expression validates for a user id. The expression was built by keeping the rules of defining a variable in c++.
1728,Match Valid HTML Tags,"</?(a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|em|fieldset|font|form|frame|frameset|h[1-6]|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|xmp)\b((\""[^\""]*\""|\'[^\']*\')*|[^\""\'>])*>","This is very similar to my other expression, except it only matches tags that a browser would read, so if you have an extra "" in the tag, it will not count it, and move onto the next possibility."
1729,Current Century Date,^([0-1]?[0-9]{1}/[0-3]?[0-9]{1}/20[0-9]{2})$,"This regular expression will validate most (current & future) date options. The weaknesses with this one is that it will allow the days to go up to 39 and does not account for leap year. Also, the months can go up to 19, instead of our commonly accepted 12 month year. :)  I designed this expression to validate dates from the year 2000 to 2099. I do not plan on this same code being in place in 2099, so I hope this is sufficient enough..."
1730,Nextel Direct Connect,^\d+\*\d+\*\d+$,"one or more numbers, asterisk, one or more numbers, asterisk, one or more numbers, no letters or punctuation other than asterisks."
1731,URI Validation & Extraction,"^((http|https|ftp):\/\/)?((.*?):(.*?)@)?([a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])((\.[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])*)(:([0-9]{1,5}))?((\/.*?)(\?(.*?))?(\#(.*))?)?$","Validates and extracts URI components.
Protocol is optional.
Username & Password is optional.
Host regex was taken from Remi Sabourin and follows RFC1035 except that it allows hostnames greater than 253 chars.
Also TLD length is not restriced.
Port number is optional.
Absolute Path is optional, and also extracts the optional querystring and optional anchor reference."
1732,HTML Tag Remover,<\/?(tag1|tag2)[^>]*\/?>,"This is expression is good if you need to clean up some code (like from using DW Design View or Front Page). Just  the ""tag1"" and ""tag2"" with the tags you want, and you can add more by putting a | inbetween each tag."
1733,HTML Tag and InnerHTML Remover,<(tag1|tag2)[^>]*\/?>.*<\/(?:\1)>,"Removes all the text between two tags. Replace the ""tag1"" and ""tag2"" with the tag you want to remove, you can add more by placing additional ""|"" between each tag."
1734,Percentages,"^100(\.0{0,2}?)?$|^\d{0,2}(\.\d{0,2})?$",Matches percentages from 0-100 inclusive with two decimal places.
1735,FQDN Validation,"(?=^.{1,254}$)(^(?:(?!\d+\.|-)[a-zA-Z0-9_\-]{1,63}(?<!-)\.?)+(?:[a-zA-Z]{2,})$)",Validates MS FQDNs. 1) Entire fqdn less than 255 chars. 2) Host and domain names may contain an underscore. 3) 1st char can be a number. 4) No part can be all numbers. 5) Allows any TLD Works in C#. Based on Remi Sabourin's regex.  Based on anonymous feedback I've corrected it to no longer match domains that start or end with a hyphen.
1736,Port Finder,((?:[\\?&](?:[a-z\d\\.\\[\\]%-]+)(?:=[a-z\\d\\.\\[\\]%-]*)?)*),This will give u detail of port
1737,Date-MM/DD/YYYY MONTH/DATE/YEAR,^((0[1-9])|(1[0-2]))\/((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))\/(\d{4})$,"This regular expressions matches dates in the format MM/DD/YYYY where MM can be 01 to 12, DD can be 01 to 31 and YYYY is always 4 digits long. "
1738,Find Relative Paths,"(src|href|action)=""(?!http://|#|mailto:|&)([^/#""])","If when making a website you need to find your relative paths, this regex will find them. You can use the follow to make them absolute:
\1=""/\2"
1739,"Sunday, April 22, 2006","^((Sunday|Tuesday|Wednesday|Thursday|Friday|Saturday),\s+)?((January|February|March|April|May|June|July|August|September|October|November|December)\s+([1-2]?[0-9]|3[01])),\s+?(19[0-9]{2}|[2-9][0-9]{3})","Validates date with month in the format ""dddd, MMMM dd, yyyy"""
1740,First and Last Name,^([A-Z][a-z]+)\s([A-Z][a-zA-Z-]+)$,"The pattern matches what would at least appear to be a first and last name, with an optional hyphenated last name.  There is an obvious flaw that it can't distinguish between actual names and any two words that start with capital letters as noted in the matching text.  Also, two part first names like ""Mary Jo"" can cause problems."
1741,Date YYYY-MM-DD,[0-9]{4}-([0][0-9]|[1][0-2])-([0][0-9]|[1][0-9]|[2][0-9]|[3][0-1]),This function does basic testing for the YYYY-MM-DD date format.
1742,Split SQL UPDATE statement,"(UPDATE\s+)(\w+)\s+(SET)\s+([\w+\s*=\s*\w+,?\s*]+)\s+(WHERE.+)","Use with ""/i"" flag (case-insensitive) to match any valid SQL UPDATE statement, and to parse it into it's component parts.  Most useful will be group $2, the table name, group $4, the field=value list, and group $5, the WHERE clause."
1743,Floating Complex Number,"^([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?|[-+]?((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i]|[-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?[-+]((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i])$","DESCRIPTION 
Parses a complex number of kind 'a+bi' from an input string. Please remove all spaces from the input string before using this regex pattern. 
MATCHING EXAMPLES
'[]'  means is an optional parameter; 
'|'   means OR;
'+'   is the positive sign;
'-'   is the negative sign;
'#'   is one ore more decimal digits;
'E|e' are the valid exponent symbols;
'...' is the range for the exponent;
'r'   means the real part of complex number;
'i'   means the imaginary part of complex number.
NOTE
Has the imaginary part of the input string not a numeric value (e.g. '5-i' is a valid format) it should be interpreted as '5-1i'!"
1745,Floating Number,^([-+]?(\d+\.?\d*|\d*\.?\d+))$,"DESCRIPTION
Parses a floating number (such as double or float) from an input string. Please remove all spaces from the input string before using this regex pattern.
MATCHING EXAMPLES
The following symbols are used:
'[]'  means optional parameter;
'|'   means OR;
'+'   is the positive sign;
'-'   is the negative sign;
'#'   means one or more decimal digits;
'.'   is decimal seperator."
1746,Floating Number With Exponent,"^([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)$","DESCRIPTION 
Parses a floating number with an optional exponent from an input string. Please remove all spaces from the input string before using this regex pattern. 
MATCHING EXAMPLES
The following symbols are used:
'[]'  means an optional parameter;
'|'   means OR;
'+'   means the positive sign;
'-'   means the negative sign;
'#'   means one or more numbers (0...9);
'.'   is the decimal seperator;
'E|e' are the valid exponent symbols;
'...' is the range of values for the exponent."
1748,ISBN-13,"ISBN(?:-13)?:?\x20*(?=.{17}$)97(?:8|9)([ -])\d{1,5}\1\d{1,7}\1\d{1,6}\1\d$","This regex matches the new 13 digit ISBN.  The ISBN number must be preceded by the text ""ISBN:"" or ""ISBN-13:"" , the colon is optional. The proper lengthes of the ISBN elements is checked.  The is no check for the validity of the check digit."
1749,Split SQL INSERT Statement,"(INSERT INTO\s+)(\w+)(\s+\()([\w+,?\s*]+)(\)\s+VALUES\s+\()(['?\w+'?,?\s*]+)(\))","Use with ""/i"" flag (case-insensitive) to match a fully qualified SQL INSERT statement, and to parse it into it's component parts.  Group $2 will contain the table name, $4 the field list, and $6 the value list."
1750,Split SQL INSERT Statement 2,"(INSERT INTO\s+)(\w+)(\s+\()([\w+,?\s*]+)(\)\s+VALUES\s+)((\(['?\w+'?,?\s*]+\)\,?;?\s*)+)","Use with ""/i"" flag (case-insensitive) to match a fully qualified SQL INSERT statement, and to parse it into it's component parts. Group $2 will contain the table name, $4 the field list, and $6 the all of the value lists."
1751,Phone numbers,"(((\d{0,2})\(\d{3}\))|(\d{3}-))\d{3}-\d{4}\s{0,}((([Ee][xX][Tt])|([Pp][Oo][Ss][Tt][Ee])):\d{1,5}){0,1}",Phone numbers validation with extension number
1752,,"^0?.[0]{1,2}[1-9]{1}$|^0?.[1-9]{1}?\d{0,2}$|^(1|1.{1}[0]{1,3})$|^0?.[0]{1}[1-9]{1}\d{1}$","Decimal values from 1 to .001 with precision of three, leading zero optional.  Can be 1 or 1.0 or 1.000 "
1753,Percentage,"^(^(100{1,1}$)|^(100{1,1}\.[0]+?$))|(^([0]*\d{0,2}$)|^([0]*\d{0,2}\.(([0][1-9]{1,1}[0]*)|([1-9]{1,1}[0]*)|([0]*)|([1-9]{1,2}[0]*)))$)$",This pattern is designed to allow user to enter percentage values. 
1754,Multisided dice,"([1-9]{1,2})?(d|D)([1-9]{1,3})((\+|-)([1-9]{1,3}))?","For the geeks out there, you can use this to break down die rolls of multisided dice for things like role playing games.  Includes support for a die multiplier and an end modifier value. Supports a multiplier up to 99, and sides and a modifier of up to 999."
1755,E-Mail Validator,"^([a-zA-Z0-9]+)([\._-]?[a-zA-Z0-9]+)*@([a-zA-Z0-9]+)([\._-]?[a-zA-Z0-9]+)*([\.]{1}[a-zA-Z0-9]{2,})+$","This can be used to test, the entered email address is valid or not"
1756,RFC2822 Compliant Email Check,"^(([-\w$%&'*+\/=?^_`{|}~.]+)@(([-a-zA-Z0-9_]+\.)*)([-a-zA-Z0-9]+\.)([a-zA-Z0-9]{2,7}))?$","RFC2822 compliant email matching regex that doesn't assume TLDs are set for all time. Clearly this means that someone could get a 2 letter country code wrong, but since no TLD is set in stone, I prefer to match future possibilities as well. This also conforms to what traditional DNS can do w/r/t hostnames and domain names."
1757,RegEx for email validation,"/^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$/",This expresssion will validate all possible formats except if web site URL contains hyphen characters like aa@a-b-c.com. I will include this feature also in next version.
1758,ISO Date with leap,^(((19|20)(([0][48])|([2468][048])|([13579][26]))|2000)[\-](([0][13578]|[1][02])[\-]([012][0-9]|[3][01])|([0][469]|11)[\-]([012][0-9]|30)|02[\-]([012][0-9]))|((19|20)(([02468][1235679])|([13579][01345789]))|1900)[\-](([0][13578]|[1][02])[\-]([012][0-9]|[3][01])|([0][469]|11)[\-]([012][0-9]|30)|02[\-]([012][0-8])))$,This regex match dates in the international standard date notation by ISO (IS0 8601). It can validate any dates between 1900-01-01 and 2099-12-31 ant take account of leap years. The format is mandatory and the hyphen is needed.  You could easily change it to accept other separators.  It has been tested with Regex Coach and PHP.
1759,validate arabic letters,^[\u0621-\u064A]+$,Matches strings that only contain Arabic letters (no spaces). if you want to include spaces it should be ^[\u0621-\u064A\040]+$ 
1760,HTML Image src,"<[iI][mM][gG][a-zA-Z0-9\s="".]*((src)=\s*(?:""([^""]*)""|'[^']*'))[a-zA-Z0-9\s="".]*/*>(?:</[iI][mM][gG]>)*",Great for extracting out all the image src attributes.
1762,Check number,"^(-?)(((\d{1,3})(,\d{3})*)|(\d+))(\.\d{1,2})?$","This RegEx checks whether the input is a number or not. Number may contain commas a seperators, can contain one or two decimal places and can be positive or negative."
1763,IMG tag,"<img[^>]*src=\""?([^\""]*)\""?([^>]*alt=\""?([^\""]*)\""?)?[^>]*>",Use this RegExp to grab SRC($1) and ALT($3) values from IMG tags in valid or invalid HTML (XHTML). SRC param must by before IMG. (thanks to mr. Mrva)
1764,Birthday regular expression Dutch,"^([0-9]{0,2})-([0-9]{0,2})-([0-9]{0,4})$",I needed to have a birthday regular expression in dutch format with full year (1900) so i wrote this one.
1765,TSQL identifier,(?:\[(?:[\u0000-\u005C]|[\u005E-\uFFFF]|\]\])+\])|(?:\u0022(?:[\u0000-\u0021]|[\u0023-\uFFFF]|\u0022\u0022)+\u0022)|(?:[a-zA-Z_][a-zA-Z0-9_]*),Pattern for T-SQL identifier
1766,email,[a-zA-Z]+[a-zA-Z0-9]*([\.|\-|_][a-zA-Z0-9]+)*@[a-zA-Z]+[a-zA-Z0-9]*([\.|\-|_][a-zA-Z0-9]+)+,"I tested all these dummie emails with a Java program. Unfortunately the html fields does not fetch all tested cases, sorry. Enjoy."
1767,International phone number,"^\+[0-9]{1,3}\.[0-9]+\.[0-9]+$",Matches international formated phonenumber. More info on http://maartendeblock.blogspot.com
1768,Get one and two numeric digits between 1 and 12 inclusive,^1?[1-2]$|^[1-9]$|^[1]0$,"Get one and two numeric digits between 1 and 12 inclusive, positive numbers only (Zeros are excluded and so is values higher than 12)."
1769,FL DL Number,^([a-z|A-Z]{1}[0-9]{3})[-]([0-9]{3})[-]([0-9]{2})[-]([0-9]{3})[-]([0-9]{1}),This will accept FL Drivers License numbers with dashes
1770,(X)HTML & char. replace,&(?![a-z]+;|#\d+;),"Single & character is not valid in HTML or XHTML code. In this case you can replace this character with its entity (if & character is not member of other entity [&amp;#353;]). example: preg_replace('/&(?!amp;)/', '&amp;amp;', $str).
(thanks to mr. Mrva)"
1771,URL,"^((http|https|ftp)\://|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}(/[a-zA-Z0-9\-\._\?=\,\'\+%\$#~]*[^\.\,\)\(\s])*$",Matches any valid URLs which can activate links in a text.
1772,All valid Guid(s),"[({]?(0x)?[0-9a-fA-F]{8}([-,]?(0x)?[0-9a-fA-F]{4}){2}((-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})|(,\{0x[0-9a-fA-F]{2}(,0x[0-9a-fA-F]{2}){7}\}))[)}]?","It matches all strings that the .NET Framework API ""new Guid(string guid)"" can recognize. A String that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored): "
1773,US or Canadian phone number,^(?:(?:\+?1[\s])|(?:\+?1(?=(?:\()|(?:\d{10})))|(?:\+?1[\-](?=\d)))?(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$,Don Johnston's pattern modified to optionally accept a leading 1 or +1. Non-capturing groups are used for efficiency 
1774,"US or Canadian phone number, allows 7 digit dialing",(?:^(?:(?:\+?1[\s])|(?:\+?1(?=(?:\()|(?:\d{10})))|(?:\+?1[\-](?=\d)))?(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$)|(?:^[2-9]\d{2}[- ]?\d{4}$),Don Johnston's pattern modified to optionally accept leading 1 or +1 and to allow 7 digit dialing (still legal in some states). Non-capturing groups are used for efficiency
1775,email validation,^.+\@.+\..+$,simple email validation
1776,url validation,"(((ht|f)tp(s?):\/\/)|(([\w]{1,})\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;""'<>\n\r\t]+)([^\. \[\]\(\),;""'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})",url validation with tiped errors
1777,email,"^(?:[0-9a-zA-Z](?:[-.\w]*[0-9a-zA-Z])*@(?:(?:[0-9a-zA-Z])+(?:[-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$",email validator
1779,detecting two or more adjacent capital letters,"([A-Z][A-Z]{1,})",detecting two or more adjacent capital letters
1780,Colon-delimited string of positive integers and/or decimal numbers,^(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+)|((([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+))\:)*(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+)))$,"Accepts a colon-delimited string of positive integers and/or decimal numbers in any combination. Spaces are not permitted. Decimal numbers of less than 1 must be prefixed with a zero (e.g. accepts 0.1, but not .1), and numbers with a trailing decimal point are not accepted (e.g. accepts 3.0, but not 3.). A lone zero is not accpeted (e.g. accepts 1.02:3:4.5, but not 1.02:0:4.5). Developed from a similar expression by Steven Smith on this site."
1783,C# Methods,(private|public|protected)\s\w(.)*\((.)*\)[^;],"Finds all public or private C# methods with a return type, with or without parameters. Excludes private and public members which may look like a method.  Private and public members that can be confused with methods typically have a semicolon after the closing parentheses.

NOTE: Visual Studio uses a non-standard regular expression syntax for Find and Replace. The eqivalent pattern is: (private|public|protected):b:w(.)*\((.)*\)$"
1785,Full Windows Folder Path,"^([A-Za-z]:|\\{2}([-\w]+|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\(([^""*/:?|<>\\,;[\]+=.\x00-\x20]|\.[.\x20]*[^""*/:?|<>\\,;[\]+=.\x00-\x20])([^""*/:?|<>\\,;[\]+=\x00-\x1F]*[^""*/:?|<>\\,;[\]+=\x00-\x20])?))\\([^""*/:?|<>\\.\x00-\x20]([^""*/:?|<>\\\x00-\x1F]*[^""*/:?|<>\\.\x00-\x20])?\\)*$","Validates the format of a Windows folder path ending with a backslash using the drive path or Universal Naming Convention (UNC)--without using lookaround.<br><br>Windows folder components: <br>(I) The drive can only be one letter. <br>(II) The server name (1) can only contain letters, numbers, and hyphens. However, Windows does allow underscores--which aren’t standard characters in the Request for Comments (RFC) 1035 standard--for networks using the Microsoft DNS Server. (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;222823) or (2) can be an IP address <br>(III) The share name (also called the service name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: "" * / : ? | < > \ , ; [ ] + = (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;236388) (2) Can begin or end with a period, but cannot contain all periods (3) Cannot begin or end with a space (4) There must be at least one character that is not a space or period if the rest of the share name contains periods and spaces or just periods. <br>(IV) The folder and subfolder names (without the drive, share, or server name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: "" * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period."
1786,Regular expression for validating currency input with &#163; sign,"^(( )*\&#163;{0,1}( )*)\d*(.\d{1,2})?$","This expression is for matching the currency input. The &#163; is optional. e.g. &#163;12.12, &#163; 12.12, 12.12, 12."
1787,Complex Australian Phone Number,"^\({0,1}((0|\+61)(2|4|3|7|8)){0,1}\){0,1}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{1}(\ |-){0,1}[0-9]{3}$","Australian phone number validator. Accepts all forms of Australian phone numbers in different formats (area code in brackets, no area code, spaces between 2-3 and 6-7th digits, +61 international dialing code). Checks that area codes are valid (when entered)."
1788,Smarter URL extractor from plain text,"(http(s?)://|[a-zA-Z0-9\-]+\.)[a-zA-Z0-9/~\-]+\.[a-zA-Z0-9/~\-_,&\?\.;]+[^\.,\s<]","This regex avoids matching typical mistakes where a sentence ends but there is no space after the full stop (period). Other regexes will think any two words with a dot in between is a URL! My regex does not require http:// and if there isn't http:// it will need to find AT LEAST two dots to guarantee its likely to be a URL and not a sentence that's missing a space like this.It will match www.test.com, http://test.com, test.com/index.htm but it will NOT match test.com. It will not match a dot or a comma at the very end which some people may type when including a URL in a sentence like this www.test.com, or this www.test.com."
1789,FAA Tail Number,"^N[1-9][0-9]{0,4}$|^N[1-9][0-9]{0,3}[A-Z]$|^N[1-9][0-9]{0,2}[A-Z]{2}$",FAA Tail Numbers as described here: http://www.faa.gov/licenses_certificates/aircraft_certification/aircraft_registry/special_nnumbers/
1790,Danish phone number,^((\(?\+45\)?)?)(\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2})$,"This should help in finding european style phone numbers (without hyphens), particularly danish numbers with consist of 8 digits, and can be separated by a whitespace."
1791,Match substrings of string seprated by spaces while keeping substring groups enclosed by certain character(s) together.,"\S*?[\[""].*?[\]""]|\S+","Given that you have a string that is comprised characters/words separated by spaces and you want to creates matches of those words/characters but you also have substring groups of words/characters/spaces enclosed in [] and """" that you want treated as a single match, this pattern is what worked for me.  Feel free to modify this regex to fit your needs if your string groups are not grouped by [] or """".  Please let me know if this doesn't test well for you. ********** Example Test String:
212.183.143.4 - - [03/May/2007:21:03:27 +0100]  ""GET mp4-amrnb.3gp RTSP/1.0"" 200 155527 [RealOnePlayer_s60.26.25.01_21-Jun-2005_13:02:43_epoc_av21_thumb] [3e546ed1-f9b1-11db-eb72-1d98b80ca9f5] [UNKNOWN] 454492 102 47 0 0 [0 0 0 0] [03/May/2007:21:02:38] 192.168.0.2 24245 55 ********** Matches:
Matches(0) = ""212.183.143.4""
Matches(1) = ""-""
Matches(2) = ""-""
Matches(3) = ""[03/May/2007:21:03:27 +0100]""
Matches(4) = """"GET mp4-amrnb.3gp RTSP/1.0""""
Matches(5) = ""200""
Matches(6) = ""155527""
Matches(7) = ""[RealOnePlayer_s60.26.25.01_21-Jun-2005_13:02:43_epoc_av21_thumb]""
Matches(8) = ""[3e546ed1-f9b1-11db-eb72-1d98b80ca9f5]""
Matches(9) = ""[UNKNOWN]""
Matches(10) = ""454492""
Matches(11) = ""102""
Matches(12) = ""47""
Matches(13) = ""0""
Matches(14) = ""0""
Matches(15) = ""[0 0 0 0]""
Matches(16) = ""[03/May/2007:21:02:38]""
Matches(17) = ""192.168.0.2""
Matches(18) = ""24245""
Matches(19) = ""55"" 
********** ASP Test Code:
Set regEx = New RegExp
regEx.Global = True
regEx.IgnoreCase = True
regEx.MultiLine = True
teststring = ""<<your string>>""
regEx.Pattern = ""\S*?[\[|\""""].*?[\]|\""""]|\S+""
Set Matches = regEx.Execute(teststring)"
1792,pattern Title,"^(?=.*\d{4}-\d{3})(?=.*[a-zA-Z]{1}).{9,9}$",It is use for specific pattern like 1234-568r. 
1793,Excel range name,"^(('[^\\/?*\[\]]{1,31}'!)|([^'\\/?*\[\]\ ][^\\/?\*\[\]\ ]{0,30}!))?\${0,1}([a-zA-Z]|[a-hA-H][a-zA-Z]|[Ii][a-vA-V])\${0,1}0*(6553[0-6]|655[0-2]\d{1}|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3})(:\${0,1}([a-zA-Z]|[a-hA-H][a-zA-Z]|[Ii][a-vA-V])\${0,1}0*(6553[0-6]|655[0-2]\d{1}|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}))?$",matches excel cell addresses including an optional worksheet name
1794,YAER - Yet Another Email Regex,"^[^\s]+@[^\.][^\s]{1,}\.[A-Za-z]{2,10}$","Simple email regex following some liberal email address validation. Requires non-whitespace name (but allows any other character), an @ symbol, then a non-period character, then some non-whitespace text (but allows just about everything else), and finishes with a tld that is 2 to 10 chars long. Two-characters is the universal minimum, 10 seemed like a good upper limit for now and allows room to grow. You can use this for a quick sanity check. Yes, the user can still enter invalid email addys, but then they won't get their emails, will they?"
1801,Match IP Address,\d\d?\d?\.\d\d?\d?\.\d\d?\d?\.\d\d?\d?,Quick and simple way of matching a well-formed IPV4 (dotted quad) ip address.
1802,Currency with two decimals,"^\$\d{1,3}(,?\d{3})*(\.\d{2})?$","Looks for a number which can be optionally comma separated at thousands and may or may not have two decimal places. Tweaking: 1. Replace the \$ symbol with your currency. 2. Toggle , and . as separators (Some European countries follow this convention) 3. Mandate comma separation by removing the ? after ,"
1803,Indian Zip Code,/^[1-9][0-9][0-9][0-9][0-9][0-9]$/,I know this is very simple but this is the indian zip code and will allow only 6 digits.
1804,Indian Phone Number,"/^[0-9]\d{2,4}-\d{6,8}$/","This is indian phone number. where it will take a format of std code 3 to 4 digits, hypen and rest of the 6 to 8 digits, "
1805,Number Range,^((0|[1-9]+[0-9]*)-(0|[1-9]+[0-9]*);|(0|[1-9]+[0-9]*);)*?((0|[1-9]+[0-9]*)-(0|[1-9]+[0-9]*)|(0|[1-9]+[0-9]*)){1}$,"Matches any range of numbers according to the format x;x-xx where ""x"" is a number between 0 and 9, however 0 may not be a the starting digit of a multi-digit number (i.e. 001). The format specifies that a range is denoted by x-x (numbers are seperated by a hyphen) and multiple range specification or single numbers may be seperated by a semi-colon "";""."
1807,Full Windows Folder UNC Path,"^\\{2}[-\w]+\\(([^""*/:?|<>\\,;[\]+=.\x00-\x20]|\.[.\x20]*[^""*/:?|<>\\,;[\]+=.\x00-\x20])([^""*/:?|<>\\,;[\]+=\x00-\x1F]*[^""*/:?|<>\\,;[\]+=\x00-\x20])?)\\([^""*/:?|<>\\.\x00-\x20]([^""*/:?|<>\\\x00-\x1F]*[^""*/:?|<>\\.\x00-\x20])?\\)*$","Validates the format of a Windows folder path ending with a backslash using the Universal Naming Convention (UNC)--without using lookaround.<br><br>Windows UNC folder components: <br>(I) The server name can only contain letters, numbers, and hyphens. However, Windows does allow underscores--which aren’t standard characters in the Request for Comments (RFC) 1035 standard--for networks using the Microsoft DNS Server. (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;222823) <br>(II) The share name (also called the service name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: "" * / : ? | < > \ , ; [ ] + = (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;236388) (2) Can begin or end with a period, but cannot contain all periods (3) Cannot begin or end with a space (4) There must be at least one character that is not a space or period if the rest of the share name contains periods and spaces or just periods. <br>(III) The folder and subfolder names (without the share and server names) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: "" * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period."
1808,Full Windows Folder Drive Path,"^[A-Za-z]:\\([^""*/:?|<>\\.\x00-\x20]([^""*/:?|<>\\\x00-\x1F]*[^""*/:?|<>\\.\x00-\x20])?\\)*$","Validates the format of a Windows folder path ending with a backslash using the drive path--without using lookaround.<br><br>Windows folder drive path components: <br>(I) The drive can only be one letter. <br>(II) The folder and subfolder names (without the drive) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: "" * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period."
1809,path/filename,"^[/]*([^/\\ \:\*\?""\<\>\|\.][^/\\\:\*\?\""\<\>\|]{0,63}/)*[^/\\ \:\*\?""\<\>\|\.][^/\\\:\*\?\""\<\>\|]{0,63}$","a simplistic path/filename for windows (more restrictive than for Mac OS or *nix). Updated escaping, end of string."
1810,US & Canadian Zip Code for Input,^(\d{5})$|^([a-zA-Z]\d[a-zA-Z]( )?\d[a-zA-Z]\d)$,Created for input validation of major part of zip code.  Normal Canadian entry has an optional space between the first group of three and the second group.  Original pattern taken from Steven Smith and modified for our entries.
1812,SQL datetime validation,(\d{4}-\d{2}-\d{2})\s?(\d{2}:\d{2}(:\d{2})?),"SQL accepts time without seconds. Space between date and time representation is not necessary.
$0 returns whole matched string. $1 returns date. $2 returns time."
1813,Names And Addresses Validator,^(\w(([.-])*)(\s)?)+$,Extension of Alsu Fifty's Simple String pattern: ^(\w(\s)?)+$ that allows inclusion of periods and dashes; useful for validating Name and Address fields
1814,Comma Delimited String with Limits,"^(([0-9]{3})+((,[0-9]{3}){0,5}))+$","I need a regular expression to allow entry of a 3 digit number, separated by commas and limited to only 6 occurences.  Based on a regex submitted by Ivan Rodriguez, I found my solution."
1815,Credit Card pattern Matching,"(4\d{12})|(((4|3)\d{3})|(5[1-5]\d{2})|(6011))(-?|\040?)(\d{4}(-?|\040?)){3}|((3[4,7]\d{2})((-?|\040?)\d{6}(-?|\040?)\d{5}))|(3[4,7]\d{2})((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{3})|(3[4,7]\d{1})(-?|\040?)(\d{4}(-?|\040?)){3}|(30[0-5]\d{1}|(36|38)\d(2))((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{2})|((2131|1800)|(2014|2149))((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{3})","This regular expression will match the all type of credit card patterns, like AMEX,VISA,MASTER, Dinnerclub, JCB, enRoute ,Discover "
1817,windows characters other than new line,[^\r\n]|(?:\r(?!\n))|(?:(?<!\r)\n),Matches any single characters that don't belong to a windows new line character sequence.
1818,Validate URL,^((http://)|(https://))((([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*))|(([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*)))/?([a-zA-Z0-9_/?%=&+#.-~]*)$,"A regex I came up with for validating urls, didn't test thoroughly but seems to do the trick."
1819,.Net Framework Type Name,"^(([A-Za-z][A-Za-z0-9.+]*?){1,}?)(,\s?([^/\\:*?""<>|]*((,\s?(Version=(\d\.?){1,4}|Culture=(neutral|\w{2}-\w{2})|PublicKeyToken=[a-f0-9]{16})(,\s?)?){3}|))){0,1}$","Matches a .Net Framework type name. This expression also matches non-strong named types such as:

Namespace.Class

and

Namespace.Class, Assembly"
1820,Decimal with scale,^\d*[0-9](\.\d?[0-9])?$,"Allow Decimal values as [decimal](*, 2),  scale length between 0 and 2"
1821,Percentage with scale,"^((\d{0,1}[0-9](\.\d{0,1}[0-9])?)|(100))$",Allow Percentage with optional scale (max length of 2) between (00.00 and 100)
1823,Multiples of 0.5,"(^\d{1,3}$)|(\d{1,3})\.?(\d{0,0}[0,5])",This is used to match the values that are multiples of 0.5 upto single digit decimal number.
1824,YYYY-MM-DD HH:MM:SS,^([0-9]{4})-([0-1][0-9])-([0-3][0-9])\s([0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$,SQL datetime format tester YYYY-MM-DD HH:MM:SS
1825,US Phone Loose,"^[ 1(]{0,3}?([02-9][0-9]{2})\D{0,2}([0-9]{3})\D?([0-9]{4})($|\D+.+$)","Matches US phone numbers in just about any format which doesn't try to break the 3-3-4 number set. Captures anything after the 4 digit set, such as an extension, for use later. 3 digit area code (ignoring a leading 1), 3 digit prefix, 4 digit line number and any additional extension info are all separated in to different groups for easy formatting. This expression is designed for a replacement, where the replacement string is ($1)$2-$3$4"
1829,Accept Positive Integers from 0 to 10,^\d$|^[1][0]$,This will match any positive integer less than or equals to 10
1830,Capture bgcolor attribute for replacing with style attribute,"<.*\b(bgcolor\s*=\s*[\""|\']*(\#\w{6})[\""|\']*).*>","Variable 1 = ""complete attribute and value"".
Variable 2 = ""attribute value only"".
For meeting compliance with W3C AA rules, I've been using this in a simple HTML parser to convert certain background tags from the deprecated 'bgcolor' attribute to now using a 'style=background:' and the passed colour. This had to be only on hexadecimal values for my current needs.

Later modifications : 
1. Only for certain tags (eg. td,tr,table).
2. If matching an opening apostrophe/quotation mark, only capture variable if there is a closing one.
"
1831,Alphanumeric with UnderScore,\w*,"Small w is used in expression. if you'll use capital W then it is for ""Not Alphanumeric"""
1832,Match Arabic Letters,\p{IsArabic},Matches only arabic characters
1833,Positive Number,"(^[0][.]{1}[0-9]{0,}[1-9]+[0-9]{0,}$)|(^[1-9]+[0-9]{0,}[.]?[0-9]{0,}$)",This pattern will match any positive number(Real or Integer).  It will not match ZERO or any variation of zero (ie 0.00)
1834,One syllable word,\b[^aeiou]+[aeiou][^aeiou]+\b,Finds all one syllable words. the letters in brackets are vowels and they can be changed depending on the language.
1835,Credit Card Simple Validator,^[3|4|5|6]([0-9]{15}$|[0-9]{12}$|[0-9]{13}$|[0-9]{14}$),"It is used for simple validation. This regular expression will match the all type of credit card patterns, like AMEX,VISA,MASTER, Dinnerclub, JCB, enRoute ,Discover "
1836,Tag InnerHTML Remover,(<(tag1|tag2)[^>]*\/?>)[\w\S\s]*?(<\/(?:\2)>),"This will remove the InnerHTML of a tag. For instance, if you wanted to clear all paragraphs and h1 tags on a page, you would simply put in ""p"" and ""h1"" into those tags, and they would end up looking like <h1></h1> <p></p> <p></p>. It's useful when you're doing work based off a template and you need to get back to the original template."
1837,US Phone Number,^(\{1}[2-9]{1}[0-9]{2}\){1}[ ]?[2-9]{1}[0-9]{2}(-| )?[0-9]{4}|[2-9]{1}[0-9]{2}[ ]{1}[2-9]{1}[0-9]{2}[ ]{1}[0-9]{4}|[2-9]{1}[0-9]{2}[2-9]{1}[0-9]{6}|[2-9]{1}[0-9]{2}-{1}[2-9]{1}[0-9]{2}-{1}[0-9]{4}){1}$,This should be pretty complete phone number pattern. I use [0-9] when most people seem to use \d because it is easier for me to read.
1838,First Given Name,"^((Sir|Dr.|Mr.|Mrs.|Ms.|Rev.){1}[ ]?)?([A-Z]{1}[.]{1}([A-Z]{1}[.]{1})?|[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{1,}[-]{1}[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{0,}[ ]{1}[A-Z]{1}[a-z]{0,}){1}$",This will allow to check to make sure the string is a First or Given Name and it can be initials and it can include a prefix.
1839,Email,"([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$",This pattern validates email address. it allows (1)numeric characters and underscore(_) in an address.(2)numeric characters in domain name. it doesn't match user names with a dot(.). doesn;t allow username starting or ending with @ underscore.
1840,Credit Card: Visa + MC,^(5[1-5]\d{2})\d{12}|(4\d{3})(\d{12}|\d{9})$,"A simple regex to check for only Visa and MasterCard with no dashes or spaces. Visa starts with a 4 and is 13 or 16 digits long, MasterCard starts with a 51 through 55 and is 16 digits long. I noticed that some of the other formulas don't account for Visa being valid with only 13 digits. I used this for a PayPal processor (which doesn't allow dashes or spaces) and modified it from others on this site. Enjoy."
1842,PO Box,^p(ost)?[ |\.]*o(ffice)?[ |\.]*[box|b\.o\.x|b\so\sx][\s0-9a-z]*,Finds PO Box in given string. to make it case incensitive please send test string in lower case. 
1843,Time,(\d\d?:?\d?\d?)[-pmato ]*(\d\d?:?\d?\d?)?,"matches times that typically come after dates, such as july 12 10-12. useful for finding event start and end time"
1844,Strings inside double quotations ,"""[^""]+"" ",Finds strings enclosed in double quotations  
1845,Leap Year,(15(8[48]|9[26]))|((1[6-9]|[2-9]\d)(0[48]|[13579][26]|[2468][048]))|(([2468][048]|16|3579[26])00),"Validates four-digit leap years after 1582 (when Pope Gregory XIII switched to the Gregorian calendar). The last recognized leap year is 9996, so no worries with the y3k bug."
1846,Chinese Date With /or -,^\d{4}(\/|-)([0][1-9]|[1][0-2])(\/|-)([0][1-9]|[1-2][0-9]|[3][0-1])$,"This regular expressions matches dates of the form YYYY/XX/ZZ ,where YYYY is always 4 digits long, XX can be 01 to 12 and ZZ can be 01 to 31"
1847,Runescape,www.runescape-money.eu,welcome to the professional runescape money shop to buy runescape gold.www.runescape-money.eu
1848,Date Validator ,^((31(?!(\-)((F|f)(E|e)(B|b)|(A|a)(P|p)(R|r)|(J|j)(U|u)(N|n)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v))))|((30|29)(?!(\-)((F|f)(E|e)(B|b))))|(29(?=(\-)(F|f)(E|e)(B|b)(\-)(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])(\-)((J|j)(A|a)(N|n)|(F|f)(E|e)(B|b)|(M|m)(A|a)(R|r)|((M|m)(A|a)(Y|y))|(A|a)(P|p)(R|r)|(J|j)(U|u)(L|l)|(J|j)(U|u)(N|n)|(A|a)(U|u)(G|g)|(O|o)(C|c)(T|t)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v)|(D|d)(E|e)(C|c))(\-)((1[6-9]|[2-9]\d)\d{2})$,This is the date validator for dates of the format DD-MMM-YYY 
1849,Postive/Negative Numbers with 2 digits,^[-+]?\d+(\.\d{2})?$,It accepts only two integer after a decimal point. The number may be in Positive or negative.
1850,check ISO date,^((((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[13578]|10|12)([-])(0[1-9]|[12][0-9]|3[01]))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[469]|11)([-])([0][1-9]|[12][0-9]|30))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(02)([-])(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)([-])(02)([-])(29))|(([13579][26]00)([-])(02)([-])(29))|(([0-9][0-9][0][48])([-])(02)([-])(29))|(([0-9][0-9][2468][048])([-])(02)([-])(29))|(([0-9][0-9][13579][26])([-])(02)([-])(29)))$,This regex checks if a date is in ISO-format (yyyy-mm-dd). Leap year should be checked too. Date has to be between 1900-01-01 and 2999-12-31.
1851,check german date,^(((0[1-9]|[12][0-9]|3[01])([\.])(0[13578]|10|12)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|(([0][1-9]|[12][0-9]|30)([\.])(0[469]|11)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((0[1-9]|1[0-9]|2[0-8])([\.])(02)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((29)([\.])(02)([\.])([02468][048]00))|((29)([\.])(02)([\.])([13579][26]00))|((29)([\.])(02)([\.])([0-9][0-9][0][48]))|((29)([\.])(02)([\.])([0-9][0-9][2468][048]))|((29)([\.])(02)([\.])([0-9][0-9][13579][26])))$,This regex checks if a date is in german date format (dd.mm.yyyy). Leap year should be checked too. Date has to be between 01.01.1900 and 31.12.2999.
1852,Strip Unquoted Whitespace,"(?:\s+)|((?:""(?:.+?)"")|(?:'(?:.+?)')) ","When removing any whitespace from something like an excel formula, you need to strip the whitespace from around cell references or other non-quoted strings, while leaving quoted (both single and double quotes) in tact.  It even works when another different quote, or double quote is embedded in the string.  You can execute this with a replacement group $1 to replace the spaces with another character (or empty string to remove the spaces).  Does not match if the quoted string spans multiple lines (if \r\n is inside the quoted string)"
1853,Filter HTML Comments,<!--[\d\D]*?-->,Removes HTML comments with ease. Based off of Chris Craft's /* ... */ comment removal.
1854,URL Validator,"^(http\:\/\/[a-zA-Z0-9_\-]+(?:\.[a-zA-Z0-9_\-]+)*\.[a-zA-Z]{2,4}(?:\/[a-zA-Z0-9_]+)*(?:\/[a-zA-Z0-9_]+\.[a-zA-Z]{2,4}(?:\?[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)?)?(?:\&[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)*)$",A simple but powerful URL validating regex. Will only accept hyper text transfer protocol (http) but can be easily changed to accept others. Accepts multiple subdomains and subdirectories. Even accept query strings.
1855,Email Validator,"^([a-zA-Z0-9]+[a-zA-Z0-9._%-]*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4})$","After reading RFC2822 (then taking two asprin) I've come to the conclusion that I will not allow all RFC compliant email addresses to be entered at the forms on my site and will never have an issue with it. I re-enabled this regex, with a little user suggested edit, because I demand a stricter tolerance for my website than RFC allows. If you're like me and only want to allow minimal characters, then use this regex. Also, I've never met anyone who would submit an email address taking full advantage of RFC2822's allowances nor would I care to accomodate one who would."
1856,Image URL,"^(http\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[a-zA-Z0-9_])+\.(?:jpg|jpeg|gif|png))$",A nice little regex to verify a URL pointing towards an image. Can be useful.
1857,NonStop ProcessName,"^\${1}[a-z]{1}[a-z\d]{0,6}$","NonStop or Guardian OS process or disk volume name. Must start with a ""$"" and have an initial letter character with up to six more alpha numberic characters"
1858,Tandem NonStop filename,"^[a-z]{1}[a-z\d]{0,7}$",Tandem NonStop or Guardian OS filename or subvolume name. It must start with a letter then can upto seven alphanumeric characters.
1859,Date & Time,[0-9][0-9][0-9][0-9]-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\s{1}(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]),"Validation of date (YYYY-MM-DD format) and time (HH:MM format) with one space between both blocks. I'm not able (with this) to validate the correct last day of each month. Anyway, it helps :-)"
1860,Part Numbers,"\b[A-Za-z]{2}(?=([0-9]*[1-9]){1,})\d{1,5}\b",I had a need to validate 7 digit part numbers consisting of 2 characters followed by 1 to 5 numbers. This expression tests for both the characters and at least on non-zero number. Spaces are not allowed. It should be easy to modify to different length numbers
1861,Email matcher,"([^_.]([a-zA-Z0-9_]*[.]?[a-zA-Z0-9_]+[^_]){2})@([a-z0-9]+[.]([a-z]{2,3}|[a-z]{2,3}[.][a-z]{2,3}))","This is a cleanup of Vijay Joshi's ""Email"" pattern.  It matches the same characters that his does, but matches them anywhere in the line.  It adds useful substitution groups -- [1] - username portion of email (before @), [3] domain portion of email - after the @.  It also was a bit overly-complex, so I reduced this as well..  Remember -- if you're planning to use this with something that uses 1003.2 BREs, you'll have to backquote + | ? ( ) { and }."
1862,Detects height=1 and width=1,"height\s*=\s*""?1""? width\s*=\s*""?1""?",Just checks to see if the height and width of a tag is 1. Useful when detecting web bugs.
1863,Invalid Roman Numeral Combinations,"(([IXCM])\2{3,})|[^IVXLCDM]|([IL][LCDM])|([XD][DM])|(V[VXLCDM])|(IX[VXLC])|(VI[VX])|(XC[LCDM])|(LX[LC])|((CM|DC)[DM])|(I[VX]I)|(X[CL]X)|(C[DM]C)|(I{2,}[VX])|(X{2,}[CL])|(C{2,}[DM])","All combinations of Roman numeral characters that are needed to invalidate a Roman numeral (to see if the combination isn't a valid Roman numeral).

NOTE: Not case-sensitive"
1864,Block pdf Spam,".*-[0-9]{1,10}.*",use pdf attachment block spam
1865,Phone matcher for NANP telephone number,(?:\([2-9][0-8]\d\)\ ?|[2-9][0-8]\d[\-\ \.\/]?)[2-9]\d{2}[- \.\/]?\d{4}\b,"Matches NANP requirements for valid telephone numbers in the USA, its territories, Canada, Bermuda, and 16 Caribbean nations.<br> 
Area code: [2-9][0-8][0-9]<br>
Exchange code: [2-9][0-9][0-9]<br>
Station code: [0-9][0-9][0-9][0-9]<br>
Accepts common phone number separators like parentheses, dash/hyphen, slash, period, and space. Stops matching at any word boundary, including end of line. Adapted from Don Johnston's pattern."
1866,Simple but affective,"[\s0-9a-zA-Z\;\""\,\<\>\\?\+\=\)\(\\*\&\%\\$\#\.]*","[\s0-9a-zA-Z\;\""\,]* match any text just add character or symbol to be matched  inside[ ] like [\<] for  (<) symbol. if u want find between two word then just use  Eg : <div>[\s0-9a-zA-Z\;\""\,]* </div> it will return the  content between <div> tags. Just add all  format  to match all .It is better than (.*) because (.*) is difficult to end at particular part  as we needed."
1867,Title Anchor Tags,"<a((?:(?! title=)[^"">]*""[^"">]*"")+)>([^<]+)<\/a>","Use the above pattern with this replacement pattern: ""<a\1 title=""\2"">\2</a>"" and it will put title tags in all of your anchors that don't have a title tag."
1871,password without using lookaheads,"^(.{0,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{4,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{3,})|(.{2,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{2,})|(.{3,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{4,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{0,})$","Passwords with at least 1 letter, at least 1 non-letter, and at least 6 characters in length.  It is lenthy with a repeating pattern so that I could validate all three conditions in one expression without using a lookahead, ""?="", which are not handled correctly in Internet Explorer."
1872,US Phone - No Toll Free or 900,^\((([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^(([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))-?[0-9]{3}-?[0-9]{4}$,"Based on PJ Bijoy's regex for a US phone number, I've added validation that the area code is a valid US Area code (first digit is greater than 2) and that the area code is not a reserved Toll Free Code (800, 822, 833, 844, 855, 866, 877, 888) and not a premium number (900).  It will accept phone patterns of ###-###-#### (3 digits dash 3 digits dash 4 digits), ########## (10 digits), (###)###-#### (3 digits in parens 3 digits dash 4 digits), (###)### #### (3 digits in parens 3 digits space 4 digits), (###) ###-#### (3 digits in parens space 3 digits dash 4 digits), (###) ### #### (3 digits in parens space 3 digits space 4 digits)"
1874,email regex,"[\w]+\@[\w]+\.?[\w]+?\.?[\w]+?\.?[\w+]{2,4}","any email form like any_name@mail.confidential.yahoo.com, any_name@mail.yahoo.com, any_name@yahoo.com, any.name@yahoo.com, anyname@domain.com. You can replace .com with .net | .edu | .uk | .in or anything. I will work."
1875,US Phone (10 digit),(\d+)?-?(\d+)-(\d+),Normaly US 10 digit numbers are writen as xxx.xxx.xxxx or xxx-xxx-xxxx or simply 7 digit numbers for local websites where area code is filled by default xxx.xxxx or xxx-xxxx
1876,Extra Spaces,(^\x20*)|(\x20*$)|(\x20(?=\x20)),"Removes leading, trailing and extra spaces between words.
In the examples '_' means ' '."
1877,extension,"\.?[a-zA-Z0-9]{1,}$",match extension
1879,"Number limiting x digits before decimal, and y digits after decimal point.","^([0-9]{0,5}|[0-9]{0,5}\.[0-9]{0,3})$","This regular expression is intended to limit numeric entries by allowed places before and after the decimal point.  It also recognizes whole numbers.  In this example the value cannot exceed 99999.999.  To change the range, simply edit the numbers in curly braces.  For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}.  This can be useful for numeric fields in SQL.  This example was made to accommodate a numeric(8,3) field definition."
1880,Swedish Personal Nr (Personnummer),^\d{2}([0][1-9]|[1][0-2])([0][1-9]|[1-2][0-9]|[3][0-1])-\d{4}$,Simple regex for the Swedish personal number. It's in the form: YYMMDD-xxxx where xxxx is an arbitrary number from 0000-9999.
1881,Block pdf Spams,how to block pdf spam," The Spam Blocker developed by ClearMyMail is capable to reveal and block the PDF spam before it reaches the mailbox, saving disk space, time and bandwidth. One of the biggest techniques spammers are using to try and get through spam blockers is the simple PDF method. This attached file will then incubate their sales message (E.g. ""These shares are going through the roof!"") making it impossible for traditional spam blockers to know what the message is about -- most spam blockers are unable to read the contents of a PDF file. "
1882,Query String Regex,^((?:\?[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)?(?:\&[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)*)$ ,"This is a very simple regex that check the query part of a string. That is to say anything after the ""?"" at the end of an URL."
1883,Indian Mobile Number,^([9]{1})([234789]{1})([0-9]{8})$,This regular expression will verify all the moblie numbers in india
1884,RegExp For EMail,mailto:+\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*,"This will help you to catch the Email address with ""mailto:"" string"
1885,Url validation,"(http|https)\:\/\/(([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})|([\w\-]+\.)+(((af|ax|al|dz|as|ad|ao|ai|aq|ag|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|nr|np|nl|an|nc|nz|ni|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|uk|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa|co|in|ne|bi|na|pr|ae|mu|ar))))(:[\d]{1,4})?($|(\/([a-zA-Z0-9\.\?=/#%&\+-])*)*|\/)","An URL validation pattern with respect for TLD domains. It also validates ip urls, but it doesn't check for ip single parts range (1-255). It supports port specification."
1886,Email validation,"([\w\-\.]*)@(([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})|([\w\-]+\.)+(((af|ax|al|dz|as|ad|ao|ai|aq|ag|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|nr|np|nl|an|nc|nz|ni|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|uk|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa|co|in|ne|bi|na|pr|ae|mu|ar)))?)",Email validation regular expression. It checks for TLD domain correctness and supports for IP addresses. It doesn't check for ip single parts range validity (1-255).
1887,Common Name,^[^\x00-\x1f\x21-\x26\x28-\x2d\x2f-\x40\x5b-\x60\x7b-\xff]+$,Matches common ASCII names without special characters.
1888,Linkify ,\b(ht|f)tp[s]?://[^\s\n\r\t\<\>]+(?=[\b\s\n\r\t\<]),"This regex attempts to ""linkify"" a url that isn't already part of an &lt;a&gt; tag."
1890,European Date Time,"^([2][01])\d{2}-([0]\d|[1][0-2])-([0-2]\d|[3][0-1])(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$",European date time yyyy-mm-dd hh:mm   dont acept seconds
1891,CVV2/CVC2/CID,"(?!000)\d{3,4}$","This is a bit shorter than the first CVV2/CVC2/CID regex found on the site. It matches any 3 or 4 character number.

Now featuring change per suggestion in comments. Thanks!"
1892,HTML HEX Characters codes,"&#x((?=.*[ABCDEF]))*((?=.*[0-9]))*.{2,5};",This pattern matches any HTML character code in hexadecimal format. Doesn't match numerical code such as &amp;#203; or any friendly code character such as &amp;nbsp;
1893,HTML Special Characters codes,"&[a-zA-Z]+\d{0,3};",This pattern matches any HTML special character code in the knowed friendly-code.
1894,HTML Characters numerical codes,"&#\d{2,5};",This pattern matches any HTML special character in numerical code.
1895,HTML Tags,</?[a-z][a-z0-9]*[^<>]*>,Mathes any HTML tag with any parameters. Very useful to clean HTML of a text.
1896,Password complexity,"(?=[-_a-zA-Z0-9]*?[A-Z])(?=[-_a-zA-Z0-9]*?[a-z])(?=[-_a-zA-Z0-9]*?[0-9])[-_a-zA-Z0-9]{6,}","Tests if the input consists of 6 or more letters, digits, underscores and hyphens. The input must contain at least one upper case ltter, one lower case letter and one digit."
1897,Split camelCase word,(?<!^)(?=[A-Z]),"Used with the Regex.Split() function in .NET, this will easily split a camelCase word on the upper case letters, while not dropping any characters.  (That makes it different from most split() functions -- it does not drop any characters.)  More details in my blog - http://blogs.lotterypost.com/speednet/2007/08/simple-function-to-split-camelcase-words.htm"
1898,HTML Tags and Comments,<!*[^<>]*>,Mathes any HTML tag with any parameters and HTML Comments. Very useful to clean HTML of a text.
1899,Extract Literal Text from HTML,"<[\w\""\ '\#\* \=\',\.\\\(\)\/\-\$\{\}\[\]\|\*\?\+\^\&\:\%\;\!]+>",This regular expression allows you to extract literal text from an HTML (SGML compliant?) document. i believe it will also work for XML. using code to replace the HTML element you can extract the literal text only.
1900,Find IP Address Block Range,^((192\.168\.0\.)(1[7-9]|2[0-9]|3[0-2]))$,This expression matches IP Addresses between 192.168.0.17 - 192.168.0.32 which is a block range of 16 addresses. I created this expression for Google Analytics to filter out hits from our companies office.
1901,Password Validation,"^.*(?=.{6,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W]).*$","Well, I don't remember where from I got this expression, but I modified it a bit to work with asp.net 2.0's Regular expression validator. This validates if the password has atleast 6 characters, of which, atleast 1 character has to be Upper case, atleast 1 lower case, atleast 1 number and atleast one non-word character(say special symbols). Hope this is helpful."
1902,Five digit comma separated  numeric value,"^(\$)?((\d{1,5})|(\d{1,3})(\,\d{3})*)(\.\d{1,2})?$","This regular expression is used for validating five digit numeric value which can be an amount $ separated with , sign."
1904,PGP text,(.*)-----(BEGIN|END)([^-]*)-----(.*),"This is very useful if you dont want your employees to send encrypted mail, or downloading public keys from HTTP. It also catches certficates, CSR and other useless stuff that is only used to hide data from antivirus programs and such things."
1905,Email Address,"""^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w][^_]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$""
",Checks for a valid E-mail Id
1906,UK Vehicle Registration Numbers (VRM),"Pattern that matches all DVLA Vehicle Registration Marks (VRM). Allows for an optional single space between segments.

Source:
http://www.carreg.co.uk/number_plates/registration_numbers","^(([A-Z]{1,2}[ ]?[0-9]{1,4})|([A-Z]{3}[ ]?[0-9]{1,3})|([0-9]{1,3}[ ]?[A-Z]{3})|([0-9]{1,4}[ ]?[A-Z]{1,2})|([A-Z]{3}[ ]?[0-9]{1,3}[ ]?[A-Z])|([A-Z][ ]?[0-9]{1,3}[ ]?[A-Z]{3})|([A-Z]{2}[ ]?[0-9]{2}[ ]?[A-Z]{3})|([A-Z]{3}[ ]?[0-9]{4}))$"
1907,Date Format,^(([0-9])|([0-2][0-9])|([3][0-1]))\/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\/\d{4}$,"This regular expressions matches dates of the form dd/MMM/yyyy where dd can be 1 or 2 digits long, MMM is a month abbreviation, and yyyy is always 4 digits long."
1908,"AMEX, Discover, MC, Visa",^((4(\d{12}|\d{15}))|(5\d{15})|(6011\d{12})|(3(4|7)\d{13}))$,"Matches Visa, American Express, Discover, and Mastercard only."
1909,32 Character Hex String,^\{?[a-fA-F\d]{32}\}?$,Matches only a 32 character hex string (Eg. MD5). Based off Chris Craft's expression:-)
1910,Domain restriction check,[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+(?:[A-Z]{2}|com|org|net|gov|biz|info|name|aero|biz|info|jobs|museum)\b,Just a try....
1911,Remove all attributes related to event handling from inside HTML tags,"(\s(\bon[a-zA-Z][a-z]+)\s?\=\s?[\'\""]?(javascript\:)?[\w\(\),\' ]*;?[\'\""]?)+","No idea whether anyone would ever need this, but I had to work half a day on this pattern, so I decided to share it. :) It was never meant for productive use at all; it was rather to filter out all that annoying event handling stuff to find a bug in my DHTML table-generating script. Give it a try with this string (see details): 

<div id=""TSelect_TD_value_911"" class=""TSel"" onpaste="""" onblur=""TSelectClose(this);"" onClick=""TSelectOpen(this);"" style=""width:250px; padding:2px;"">"
1912,Find special ascii characters,[\x80-\xFF],Finds those pesky ascii characters that can be entered with the alt-numeric pad 
1913,Croatian Phone Number (old style),"^((\d{2,4})/)?((\d{6,8})|(\d{2})-(\d{2})-(\d{2,4})|(\d{3,4})-(\d{3,4}))$","Croatian phone numbers (old style). Area code and phone number, area code optional. Area code in $2 (if specified) phone number is in $4 or $5+$6+$7 or $8+$9."
1914,EU Date,^(([1..9])|(0[1..9])|(1\d)|(2\d)|(3[0..1])).((\d)|(0\d)|(1[0..2])).(\d{4})$,This pattern can be used to match EU style dates of formad d.m.yyyy where d and m can be two digits d <= 31 and m <= 12
1915,Reg Ex for Date with Leap Year,"/^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/","Enter the date in MM/DD/YYYY format. This regular expression validates the day, month and year including the leap year validations."
1916,Croatian geographic phone number,^(385)(((1)(\d{2})(\d{1})(\d{1})(\d{3}))|((20|21|22|23|31|32|33|34|35|40|42|43|44|47|48|49|51|52|53)(\d{1})(\d{1})(\d{1})(\d{3})))$,"Croatian geographic number is preceeded with country code 385 and then has area code (1 or 2 digits) and subscriber number (6,7 digits). Total length of area code and subscriber number can be 8 digits. This regular expression supports only valid area codes."
1917,Email Address with TLD support,Removed,Removed to placate Randy. Please patronize his site if you are lazy.
1918,URL Validation,"^((http|https|ftp|ftps)+(:\/\/))?(www\.)?
(([a-z0-9\.-]{2,})\.(ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|fx|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|aero|asia|cat|coop|edu|gov|jobs|mil|mobi|museum|tel|travel|pro|post|biz|com|info|int|name|net|org|pro|arpa)
|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))
(:([1-9][0-9]?[0-9]?[0-9]?|[1-5][0-9][0-9][0-9][0-9]|6[0-4][0-9][0-9][0-9]|65[0-4][0-9][0-9]|655[0-2][0-9]|6553[0-5]|))?
(((\/(([a-zA-Z0-9_\-\%\~\+\&\;]{1,})+)*)*)|\/$)?
(\.(php|html|htm|zip$|arj$|rar$|sit$|pdf$|gif$|jpg$|jpeg$|jpe$|tif$|tiff$))?
(\?([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?(\&([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+))*)?
(\=\?([a-zA-Z0-9_\-])*)?(((\+([a-zA-Z0-9_])*)?(\-([a-zA-Z0-9_])*)?)*)?
(\#([a-z-A-Z0-9_\-\%\~\+\&\;]*$))?$","A regular expression which allows to find most of valid URL's and it is including some picture or packing-format prefixes at the end of an URL.
sorry but www.test.com.php is working too, maybe someone could give me a tip for a workaround."
1919,Individual Taxpayer Identification Number (ITIN),^(9\d{2})([ \-]?)([7]\d|8[0-8])([ \-]?)(\d{4})$,"U.S. Individual Taxpayer Identification Number (ITIN) as defined in December 2006. The valid range is 900-70-0000 through 999-88-9999, all numeric values. This regular expression will accept anything in this range with space, dash or no separators."
1920,DD/MMM/YYYY,^(?:((31\/(Jan|Mar|May|Jul|Aug|Oct|Dec))|((([0-2]\d)|30)\/(Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))|(([01]\d|2[0-8])\/Feb))|(29\/Feb(?=\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))\/((1[6-9]|[2-9]\d)\d{2})$,Matches dates in the form of DD/MMM/YYYY.  It also handles leap years.  Days are 2 digits; months are case sensitive with first character upper-case and next 2 characters lower-case; year is 4 digits.
1921,Valid Email Address,^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*,This is world's best solution
1922,Validate Multiple Email Addresses,"^((\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)\s*[,]{0,1}\s*)+$","This will validate multiple email addresses that are comma delimited.  You can change it to use commas or semilcolons.  If you have to worry about a lot of special characters, you may have to edit it a little bit.  It allows white space before and after the comma."
1923,Strong Password,"(?=^.{8,}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s)[0-9a-zA-Z!@#$%^&*()]*$","This regular expression can be used for validating a strong password. It expects at least 1 lowercase letter, 1 uppercase letter, and 1 digit. It will also allow for some special characters. The length should be greater than 8 characters. The sequence of the characters is not important."
1924,XML to English,<!--[\s\S]*?-->|<.*?>|.*?(.jpg|.gif|.png|.swf),"I needed to get all the text from a Flash-based sales CD to a translator. Since all of the CD's data was in XML, I needed something that first removed all commented code, then removed all XML tags, and finally removed all references to image names. This left only the plain english, neatly formatted for legibility."
1925,Open Body Tag Good for analytic implementaiton,<body[\d\sa-z\W\S\s]*>,This will find the open body tag regardless of any properties or Event Handlers associated with it. This is great for global implementations  of analytics or anything that needs to be placed after the body tag.
1926,Email (with Tags),([A-Z][\w\d\.\-]+)(?:(?:\+)([\w\d\.\-]+))?@([A-Z0-9][\w\.-]*[A-Z0-9]\.[A-Z][A-Z\.]*[A-Z]),"I got tired of sites not recognising my Gmail account when I used tags, so I created this regexp which allows them to be included. Outputted variables are #1 - Username, #2 - Tag (or blank), #3 - Domain"
1927,Allows letters numbers hyphens periods and underscore,^((\.)?([a-zA-Z0-9_-]?)(\.)?([a-zA-Z0-9_-]?)(\.)?)+$,"Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa, .Aa.Aa. , -Aa-Aa- , _Aa_Aa_ , Aa_Aa_Aa , Aa-Aa-Aa , . , - , _ 


I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application."
1929,Password Matcher,"^.*(?=.{6,10})(?=.*[a-zA-Z].*[a-zA-Z].*[a-zA-Z].*[a-zA-Z])(?=.*\d.*\d).*$","6-10 characters, at least 4 characters and at least 2 numbers"
1930,Continuous Spaces,"(\s{1,})",Matches all chars that are made up of one or more spaces. I found this useful when people were trying to make string length bypasses using consecutive spaces.
1931,FITS header line,"^([-\w]+)\s*=\s*(([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)|\'([- \w]+)\s*\'|\'([-\(\)\/ :\w]+)\s*\')\s*\/\s*(.*)","FITS file headers have lines with a variable name, an =, and a value that may be in single quotes, followed by a comment demarcated with a forward slash, like this: VAFACTOR=   1.000030437184E+00 / velocity aberration plate scale factor.  Pattern matches FITS header lines and picks out whether the value is a number, string, or datetime."
1932,match php in html ,(<\?php(.(?!\?>))*.\?>),Matches any php scriptlets in html text. Used to remove php from webpages for security reason.
1933,Don't allow zero,"[-]?[1-9]\d{0,16}\.?\d{0,2}|[-]?[0]?\.[1-9]{1,2}|[-]?[0]?\.[0-9][1-9]","Needed to be able to validate positive and numeric values that equate to SQL Server data type decimal(18, 2) but the value could not be 0.  This regex does that.  If you need to change the precision or scale have at it."
1934,Simple Windows filename finder,"([0-9a-z_-]+[\.][0-9a-z_-]{1,3})$","Will match a Windows filename containing alphanumerics, hyphens (-) and underscores (_). There is no length limit on the first part of the filename, but the extension must be between 1 and 3 characters."
1935,Real Number,"^[-]?(([.]?[0-9]+)|([0-9]{1,3}((([ ,]?[0-9]{3})*)|(([ ,]?[0-9]{2})*))[.]?[0-9]*))$","Matches a string reprsenting a real number. ie one that may have decimal places. It caters for hundred or thousand separators of either a space or a comma, negative numbers and numbers that either start or end with a decimal point"
1936,German License Plate,"^[A-Z&#196;&#214;&#220;]{1,3}\-[ ]{0,1}[A-Z]{0,2}[0-9]{1,4}[H]{0,1}",This one checks if the value is a possible german License Plate. The trailing H stands for Historical cars.
1937,MM/DD/YYYY,"^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\/|-)(?:0?[1-9]|1\d|2[0-8]))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(0?2(\/|-)29)(\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\d\d)?(?:0[48]|[2468][048]|[13579][26]))$",This expression validates dates in the mm/dd/yyyy format and ya..expression will take care of the leap year dates 
1938,phonenumber@email.com,"\d{10,12}@[a-zA-Z].[a-zA-Z].*",This is a basic/simple  expression i have come out to check 10digit mobile number and then any valid email ....
1939,Big or small A letter,(a|A),Big or small A letter
1940,"PA, OH, new MI License Plates",^[A-Z]{3}(\s)?[0-9]{4}$,"Pattern for Pennsylvania, Ohio, and Michigan (new) regular license plates"
1941,Medicare ID#,^((\d){3})(-)?(\d){2}(-)?(\d){4}(A|B[1-7]?|M|T|C[1-4]|D)$,"An individual's (soon to be) Medicare number in the USA is a social security number (whether it be the individual's, spouse's, or parent) plus a series of 1 or 2 digit characters at the end."
1942,"French Last Names, Part I",^[A-Z][a-z]+((i)?e(a)?(u)?[r(re)?|x]?)$,You can tell whether a last name is French or not. How do you teach your programs to recognize French last names? Here's an attempt. We haven't really covered other French names like LaMarre or Fran&#231;ois yet. Those will be in future French-regonition regular expressions.
1943,Blue Cross Blue Shield Member ID,"^[A-Z]{3}(\d|[A-Z]){8,12}$","For all of you who have Blue Cross Blue Shield insurance coverage (not Federal, though)- check out your insurance cards! It ALWAYS begins with 3 letters (called the alpha prefix) and a series of alpha-numeric characters ranging from 8 to 12 digits."
1944,Blue Cross Blue Shield Federal ID#,^R(\d){8},"For those who work in the government somewhere who have BCBS coverage, this is your regular expression."
1945,"French Last Names, Part II",^[A-Z][a-z]+(o(i|u)(n|(v)?r(t)?|s|t|x)(e(s)?)?)$,"Part II of French last names. Like part 1, it doesn't cover all French names."
1946,Musical Chords,^[A-G](b|#)?((m(aj)?|M|aug|dim|sus)([2-7]|9|13)?)?(\/[A-G](b|#)?)?$,Play guitar or read sheet music for piano/keyboard? You've got to be familiar with chord notations. They've got to have some format that regular expressions can test.
1947,Armenian Last Name,~[A-Z][a-z]+(b|ch|d|g|j|k|l|m|n|p|r|s|t|v|z)(ian)$,"From experience and what I've been told, last names ending in -ian are most likely of Armenian origin. There could be some other foreign names that pass this pattern. Also, not every Armenian has a last name that ends in -ian. -ian is just common enough to stereotype."
1948,Currency,"^((\d{1,3}((,\d{3})*|\d*)(\.{0,1})\d+)|\d+)$",match US currency
1949,Validating the Date,"^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])\d{4}|([1-2][0,9][0-4][0-9]))$",It validates the dates in U.S format
1950,Dutch Last Names,^[A-Z][a-z]+((e(m|ng)|str)a)$,"How do you tell whether a last name is of Dutch origin? This pattern captures the -enga's, -stra's, and -ema's. There are also other Dutch names that don't end with these three ""suffixes"" but you know it's Dutch if it ends with either of those three."
1951,College Course Numbers (USA),^[A-Z]{4}[1-8](\d){2}$,"College course numbers are usually in the format LLLLNNN where L is a letter and N is a numeric digit, where the first digit ranges from 1-8 inclusive. 1-4 is undergrad, and 5-8 is masters and above."
1953,Portuguese Last Names,^[A-Z][a-z]+((eir|(n|l)h)(a|o))$,"I noticed that a last name is Portuguese if it ends in -eira, -eiro, -nha, or -nho. I know there are other Portuguese names that don't end with these, but I haven't yet come across any other foreign last names (besides Portuguese/Brazilian) that end in those 4."
1954,Email Domain,"(([A-Za-z0-9_\\-]+\\.?)*)[A-Za-z0-9_\\-]+\\.[A-Za-z0-9_\\-]{2,6}",It checks for the domain name validity. A domain name can't start with a dot(.). It can't have consecutive dots. If there are moe than one dot then there can be only 2 to 6 characters after the final dot. e.g. nitin.athena.com is valid.
1955,a,a,a
1956,Capitalized First Name or Last Name or Full Name,^([A-Z]+[a-zA-Z]*)(\s|\-)?([A-Z]+[a-zA-Z]*)?(\s|\-)?([A-Z]+[a-zA-Z]*)?$,That is just an improved expression for handling capitalized names. Improvement #1 - Allowed using names consisting of 3 parts. Improvement #2 - Introduced restriction that the name must start from capital character.
1957,Scientific Notation,^(\d)(\.)(\d)+\s(x)\s(10)(e|E|\^)(-)?(\d)+$,Scientific notation from school as best as we can put it on textboxes/textareas.
1958,Flight Number,"^([A-Z]{2}|[A-Z]\d|\d[A-Z])[1-9](\d{1,3})?$","Flight numbers have two parts: The first 2 characters denote the airline's two-letter code. This airline code MUST be either letter-letter, number-letter, or letter-number, NEVER number-number. The 3rd digit has to be a numeric digit from 1 to 9 inclusive. After this 3rd digit, we may append any integer from 0 to 999."
1959,Jewish Last Names,^[A-Z][a-z]+(tz)?(man|berg)$,"Legend has it that if a last name ends in -man or -berg, the person who has that last name is Jewish. Of course there are Jewish people whose names don't follow the pattern, and there could be those whose last names end in -man or -berg who are not Jewish (or are they and they don't just know it?)."
1960,Classical Music Work Cataloguing System,"^(Op(.|us))(\s)[1-9](\d)*((,)?(\s)N(o.|um(.|ber))\s[1-9](\d)*)?$","This is how a composer catalogued his or her musical works in classical music, except for Bach (who used BWV) and Mozart (who used K.). There may have been others. However, most other composers used the format Opus x, Number y. Sometimes, it's just Opus x if it's a big work like a concerto or a symphony."
1961,Brazilian ID - RG,(^(\d{2}\x2E\d{3}\x2E\d{3}[-]\d{1})$|^(\d{2}\x2E\d{3}\x2E\d{3})$),"Brazilian ID document, known in Brazil as RG (Registro Geral)."
1962,Last name check with possible hyphen,[a-zA-Z]+\-?[a-zA-Z]+,This will test a last name field and allow hyphen is someone uses it.
1963,xml and soap correct Time string,^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$,This is a pattern that matches the time format as recomended by the w3c for XML formats
1965,YYYY-MM-DD validation for dates from 1600 to 9999 with leap year check,^((1[6789]|[2-9][0-9])[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))$|^((1[6789]|[2-9][0-9])[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))$|^((16|[248][048]|[3579][26])00)|(1[6789]|[2-9][0-9])(0[48]|[13579][26]|[2468][048])-02-(0[1-9]|1[0-9]|2[0-9])$|^(1[6789]|[2-9][0-9])[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])$,"This regular expression checks dates from 1600 to 9999 in the form of YYYY-MM-DD also takes into account leap years

tested in PHP with PCRE"
1966,w3c correct datetime pattern with leapyear support,^[-]?((1[6789]|[2-9][0-9])[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?((1[6789]|[2-9][0-9])[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?((16|[248][048]|[3579][26])00)|(1[6789]|[2-9][0-9])(0[48]|[13579][26]|[2468][048])-02-(0[1-9]|1[0-9]|2[0-9])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?(1[6789]|[2-9][0-9])[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$,This pattern matches valid w3c compatible datetime values  from 1600 to 9999 in the form of [-]YYYY-MM-DDTHH:MM:SS[.ssss|[[+|-][HH:MM]][Z] also takes into account leap years.
1969,Phone Number,(1 )?\d{3} \d{3}-\d{4},This expression matches a US phone number with or without the leading 1.
1970,0.00 to 25.00,^(([0-9]|1[0-9]|2[0-4])(\.[0-9][0-9]?)?)$|([2][5](\.[0][0]?)?)$,this is reg expression for 0.00 to 25.00
1971,Trimmed AlphaNumeric plus single spaces,^[\w0-9]+( [\w0-9]+)*$,"Allows ""words"" with alphanumeric characters, including the underscore _ character.  Disallows leading or trailing spaces, also doubled-up spaces within the text.  If you want to disallow the underscore character, you can replace the two occurrences of \w with a-zA-Z"
1972,Phone number,"^((([\(]?[2-9]{1}[0-9]{2}[\)]?)|([2-9]{1}[0-9]{2}\.?)){1}[ ]?[2-9]{1}[0-9]{2}[\-\.]{1}[0-9]{4})([ ]?[xX]{1}[ ]?[0-9]{3,4})?$","This regex matches US and CAN phone numbers with area code and optional 3 or 4 digit PBX extention.  It does not check for validity of area code or exchange number, other than for starting with a 0 or 1."
1973,Latitude,([0-8][0-9]|[9][0])&#176;' '[0-9][0-9]\.[0-9]&#180;' '[NS],Marine Latitude
1974,Longitude,(([01][0-7]|[00][0-9])[0-9]|[1][8][0])&#176;' '[0-9][0-9]\.[0-9]&#180;' '[EW],Marine Longitude
1975,Bra Size,^[2-5](2|4|6|8|0)(A(A)?|B|C|D(D(D)?)?|E|F|G|H)$,"Yes, bra sizes can also be tested by regular expressions. The numeric digits represent the rib cage circumference, measured under the breast excluding the breast. It MUST be an even number. The letters determine the cup size - AA is the smallest, H (and beyond, which this regular expression does not represent) is the largest. In summary, the cup sizes are determined by the ""full chest circumference"" (which includes the breast) MINUS the rib cage circumference. Smaller differences are closer to A and larger differences are closest to DDD or F"
1979,Integer with 1000s Separator,"^[1-9]{1}[0-9]{0,2}([\.\,]?[0-9]{3})*$",Matches whole numbers with the two most common thousands-separators (comma and period). Will not handle decimals.
1980,MAIL-ID Validation,/^([a-zA-Z0-9\.\_\-\&]+)@[a-zA-Z0-9]+\.[a-zA-Z]{3}|(.[a-zA-Z]{2}(\.[a-zA-Z]{2}))$/,"It allows only alphanumeric characters and some special symbols like ""&"",""."",""-""and""_""before'@'.After'@' symbolagain only alphanumeric character set are allowed.Then there should be a "".""and after that it may have either three letter's word or two letter's word with a "".""and one more two letter word attached with it. for example: noni@yahoo.com OR noni@yahoo.co.in."
1981,UK Vehicle Registration Plate / Number Plate,([A-HJ-PR-Y]{2}([0][1-9]|[1-9][0-9])|[A-HJ-PR-Y]{1}([1-9]|[1-2][0-9]|30|31|33|40|44|55|50|60|66|70|77|80|88|90|99|111|121|123|222|321|333|444|555|666|777|888|999|100|200|300|400|500|600|700|800|900))[ ][A-HJ-PR-Z]{3}$,"UK Vehicle Registration Plate / Number Plate format as specified by the DVLA. Accepts both ""Prefix"" and ""New"" style. Allows only valid DVLA number combinations as not all are supported. Registration number must be exactly as is displayed on car, hence all letters must be in uppercase and a space seperating the two sets of characters."
1982,US Currency (Dollar),"^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$",It should be universal regular expression for US currency.
1983,Pager Number Syntax,"[\d+]{10}\@[\w]+\.?[\w]+?\.?[\w]+?\.?[\w+]{2,4}/i",Requires 10 digit number. Rest is same as email
1984,Date Notation,^\$YYYY\$\$MM\$\$DD\$$,Date Format notations. Mostly used in DB applications where rigorous pattern matching for DATE is required.
1985,URL,^(\w+)s?\:\/\/(\w+)?(\.)?(\w+)?\.(\w+)$,http://www.url.com || http://url.com || http://first.url.com || https://www.url.com || https://url.com
1986,URL v2,^(\w+)s?[:]\/\/(\w+)?[.]?(\w+)[.](\w+)$,http://www.url.com || http://url.com || http://first.url.com || https://www.url.com || https://url.com
1987,Match if any Doctors or PHD. or MBA,/Dr[.]?|Phd[.]?|MBA/i,Good way to quickly search for highly educated people in a list or file
1988,SSN,(^(?!000)\d{3}) ([- ]?) ((?!00)\d{2}) ([- ]?) ((?!0000)\d{4}),This RegularExpression is used to validate the US - SSN. This regular expression wont allow characters as well as all zeros
1989,EIN,(^(?!00)\d{2}) ([- ]?) ((?!0000000)\d{7}),This Regular Expression is used to validate the EIN of Employer in US.
1990,Employer Identification Number (EIN),^[1-9]\d?-\d{7}$,"Accepts valid EIN numbers. It could use a bit of tweaking because these are the current valid prefixes allowed. 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99"
1991,Pattern Tittle,"^[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3})$",validates after dot operator. matches atleast 2 char and max 3 char.www dot is rejected.
1992,Pattern Tittle,"^([a-zA-Z0-9-\,\s]{2,64})$",Validates for string to be atleast 2 char and max 64 char
1993,MySQL Date Format,^(\d{4})-((0[1-9])|(1[0-2]))-(0[1-9]|[12][0-9]|3[01])$,For MySQL Date Time Format
1994,German Phone number,"^((00|\+)49)?(0?[2-9][0-9]{1,})$", Validates an German area dial code and telephone number.
1995,German Cellphone (Mobile) number,"^((00|\+)49)?(0?1[5-7][0-9]{1,})$",Validates all German area dial code and telephone numbers.
1996,"Pseudo-HTML, Gets a Tag based on [] nomeclature. ""b"" Tag in this case",(\[b\])([^\[\]]+)(\[/b\]),Checks only for valid ones. Always in lowercase. Separated Tags and contents in three groups for useful handling.
1997,"Pseudo-HTML, Gets Tags based on [] nomeclature. Allowed: [a], [b], [i], [u] Tag in this case",(\[[abiu][^\[\]]*\])([^\[\]]+)(\[/?[abiu]\]),Only matches well-constructed tags.
1998,"Pseudo-HTML, Gets [a] Tag based on [] nomeclature with url parameter","(\[a url=\""[^\[\]\""]*\""\])([^\[\]]+)(\[/a\])",Matches well-formed tags.
1999,Gets an HTML parameter value of a given Tag. url in this case.,"url=\""([^\[\]\""]*)\""","Very useful to get a value, Value is in a capture group for best handling."
2000,Counts the number of words in a text,\b\w+\b,This small regex is useful to count the number of words of a text.
2001,Matches a simple HTML Tag in capturing groups,(<b>)([^<>]+)(</b>),Gets simple tags without parameters
2002,Matches any HMTL tag open or close,(</?\w*[^<>]*>),Very useful to detect if there are pieces of HMTL in a text
2003,My First RegEx,^[a-zA-Z]+$,Matches any single upper- or lower-case letter.
2004,German Bank Code (Bankleitzahl),[1-8][0-9]{2}[0-9]{5},"Validates the German Bank Code named ""Bankleitzahl"""
2005,Html Tag finder,"<\s*/?\s*\w+(\s*\w+\s*=\s*(['""][^'""]*['""]|[\w#]+))*\s*/?\s*>",This pattern can find any HTML tag. It supports attributes whose values may be enclosed between single or double quotes. It aslo support spaces between delimeters.
2006,Permutations of a character series,(?!.*([abcde]).*\1)^[abcde]{5}$,"Let's say that you have a series of characters ""abcde"" and you want to match all strings that could be comprised of those characters with each character used exactly once.  This could loosely be termed an anagram matcher, although if the string contains duplicate letters it would require modification of this pattern.  In the example case we have a string ""abcde"" and we want to match any permutation of ""abcde"".  Note that the ""5"" used in the pattern indicates the number of characters specified in the character set ""abcde"", ""5"" would still be used if ""abcde"" would be replaced with ""a-e"" since there would still be 5 characters in the series.  If you are curious about how to require duplicates in the pattern (to match all permutations of ""apple"" for example) I would use (?=^.*p.*p$)(?!.*([ale]).*\1)^[aple]{5}$"
2007,UK postcode (any Case allowed),"(^[Bb][Ff][Pp][Oo]\s*[0-9]{1,4})|(^[Gg][Ii][Rr]\s*0[Aa][Aa]$)|([Aa][Ss][Cc][Nn]|[Bb][Bb][Nn][Dd]|[Bb][Ii][Qq][Qq]|[Ff][Ii][Qq][Qq]|[Pp][Cc][Rr][Nn]|[Ss][Ii][Qq][Qq]|[Ss][Tt][Hh][Ll]|[Tt][Dd][Cc][Uu]\s*1[Zz][Zz])|(^([Aa][BLbl]|[Bb][ABDHLNRSTabdhlnrst]?|[Cc][ABFHMORTVWabfhmortvw]|[Dd][ADEGHLNTYadeghlnty]|[Ee][CHNXchnx]?|[Ff][KYky]|[Gg][LUYluy]?|[Hh][ADGPRSUXadgprsux]|[Ii][GMPVgmpv]|[JE]|[je]|[Kk][ATWYatwy]|[Ll][ADELNSUadelnsu]?|[Mm][EKLekl]?|[Nn][EGNPRWegnprw]?|[Oo][LXlx]|[Pp][AEHLORaehlor]|[Rr][GHMghm]|[Ss][AEGK-PRSTWYaegk-prstwy]?|[Tt][ADFNQRSWadfnqrsw]|[UB]|[ub]|[Ww][A-DFGHJKMNR-Wa-dfghjkmnr-w]?|[YO]|[yo]|[ZE]|[ze])[1-9][0-9]?[ABEHMNPRVWXYabehmnprvwxy]?\s*[0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}$)","This is my combination of other UK postcode examples to date in this library. This is similar to Howard Richards’s solution in that it only permits valid combinations of letters, e.g. BN works, BM does not. The space(s) are optional, and the string to match does not have to be in an upper or lower case. On top of that this allows BFPO (http://www.bfpo.mod.uk/bfponumbers_ships.htm) and Overseas Territories Postcodes (http://en.wikipedia.org/wiki/UK_postcodes) Please let me know if you have any suggetion to improve this!"
2008,UK postcode (matching caps only),"(^BFPO\s*[0-9]{1,4})|(^GIR\s*0AA$)|(ASCN|BBND|BIQQ|FIQQ|PCRN|SIQQ|STHL|TDCU\s*1ZZ)|(^(A[BL]|B[ABDHLNRST]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[CHNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM|S[AEGK-PRSTWY]?|Y[ADFNQRSW|UB|W[A-DFGHJKMNR-W]?|[YO]|[ZE])[1-9][0-9]?[ABEHMNPRVWXY]?\s*[0-9][ABD-HJLNP-UW-Z]{2}$)","This is my combination of other UK postcode examples to date in this library. This is similar to Howard Richards’s solution in that it only permits valid combinations of letters, e.g. BN works, BM does not. The space(s) are optional, the string to match should be in upper case. On top of that, this solution allows BFPO (http://www.bfpo.mod.uk/bfponumbers_ships.htm) and Overseas Territories Postcodes (http://en.wikipedia.org/wiki/UK_postcodes) Please let me know if you have any suggetion to improve this!"
2009,(Replacing) Multiple Spaces,"[ ]{1,}/gi","Ever tried to use replace function in javascipt? Javascipt only replaces one instance of the match(!), unless you use a regular expression and /g or /gi as parameters. Take this example - create a new html document and paste this between your script tags: v=""__test___this___string___"";alert(v.replace(/[_]{1,}/gi,"" ""));     - this should replace all the '_' characters. Another paradigm solved!!"
2010,Name And Email ID,([a-z\s.\-_'])*<\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\>,This will work with name in UPPER case and  LOWER case with or without spaces may include single quotes and email ID within fish marks.Email Id may include numbers too
2012,Alpha Numeric Data,"^[a-zA-Z0-9\s.\s,\-]+$","Match any alpha numeric string containing a-z, A-Z, 0-9, space, period, and hyphen"
2013,name optional to email ID,([a-z\s.\-_'])*<\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\>|^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*,this pattern has the option of entering email ID with or without name .The name will allow '  and spaces as Alex D'souza
2014,E-Mail Date and Time,"(?:[a-z]{3},\s+)?(\d{1,2})\s+([a-z]{3})\s+(\d{4})\s+([01][0-9]|2[0-3])\:([0-5][0-9])","Extracts Day, Monthname, Year, Hour and Minute into 5 Groups. This Regex is useful for E-Mail Apps."
2015,isNumeric,"^[-+]?([0-9]{1,3}[,]?)?([0-9]{3}[,]?)*[.]?[0-9]*$","matches numeric value with optional +/- , optional decimal point, and optional commas"
2017,,"(?<!\\)\""(?:[^\""]*(?<!\\)\\\"")*[^\""]*\""",Matches quoted strings. Do not use anchors or it will not work as expected
2018,Single-line code-comment groups,([\r\n ]*//[^\r\n]*)+,Matches groups of single-line code comments.  Comment sections will be returned as a single match.
2019,C# code string literal,"(@\s*"".*?"")|(""([^""\\]|\\.)*?"")",Matches C# string literals; verbatin and or normal.
2021, One upper-case US ASCII Letter,^[A-Z]$,Matches one Upper-case US ASCII Letter.
2023,Software Version Number,^\d+\.\d\.\d[01]\d[0-3]\d\.[1-9]\d*$,4 part version numbers
2024,Simple Currency,^\d+(\.\d{2})?$,A Simple Currency Expression. It will validate the number portion only. 
2025,SQL Batch parser (isql-like),(?:^.*\r*\n*)*?(?:(?=^\s*GO\s*$)|$),"simulates sql batch parsing behavior of isql.exe given an inputfile.

The regex matches correspond to sql batches (arbitrary text) which are separated by the GO keyword on a line by itself, but not including this GO keyword. Make sure multiline switches are enabled. (One could use this regex to loop over the matches, executing one sql batch at a time, esp in situations where a Split() function is unavailable).
"
2026,Postal code - Latvia,^(LV-)[0-9]{4}$,Latvia's post code
2027,Letter Grade,^A-?|[BCD][+-]?|[SN]?F|W$,"This matches a standard set of plus minus letter grades.
A A- B+ B B- C+ C C- D+ D D- F SF NF W 
(SF - Stopped Attending F)
(NF - Never Attended F)
(W - Withdraw)"
2028,Page Range,"(\d+(-\d+)*)+(,\d+(-\d+)*)*",Format when entering page ranges in Print dialogs.
2029,Time Format,"(\d{1,2}(\:|\s)\d{1,2}(\:|\s)\d{1,2}\s*(AM|PM|A|P))","This match time format
"
2030,Mulitple Emails (Semilcolon delimited),"^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+\s*\;?\s*$|^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+(\s*\;\s*([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+)+\s*\;?\s*$","Check if string is a list of valid email addresses, separated by a semicolon (ie: ';'). Every email in the list is obviously matched for validity."
2031,Loose DateTime Validation,^(((0[1-9]{1})|(1[0-2]{1}))\/?(([0-2]{1}[1-9]{1})|(3[0-1]{1}))\/?(([12]{1}[0-9]{1})?[0-9]{2}) ?(([01]{1}[0-9]{1})|(2[0-4]{1}))\:?([0-5]{1}[0-9]{1}))$,"This will validate any date (does not check for number of days in month, just 31 days or less) in almost any format as long as the order follows month, day, year, hour, minute, and each part has at least 2 digits."
2032,Decimal number with 2 digits after comma,"^[+-]?\d+(\,\d{2})? *?$",This regex accepts decimal number with exactly 2 numbers after comma and  without point.
2033,Which accepts First Two as uppercase letters and remaining as digits,^([A-Z]{2}?(\d{7}))$,To maintain both uppercase letters and the digits in the expression.
2034,IPv6 (and IPv4) Address match with optional Port Number,"(^|\s|(\[))(::)?([a-f\d]{1,4}::?){0,7}(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?=(?(2)\]|($|\s|(?(3)($|\s)|(?(4)($|\s)|:\d)))))|((?(3)[a-f\d]{1,4})|(?(4)[a-f\d]{1,4}))(?=(?(2)\]|($|\s))))(?(2)\])(:\d{1,5})?","Too complex for a short explanation. It doesn't check for valid IP ranges and it also doesn't obey the rule, that a double colon in IPv6 only can exist once in the address notation. The optional port match at the end can be omitted. The RegEx has been constructed the way, that if an explicit identification fails, the complete match fails. For example someone write ""My adress:2001::1234"" the match will fail 'cos of the leading colon, even though it's an valid IPv6 address. A ""My adress: 2001::1234"" or ""My adress:[2001::1234]"" will work. Beware, that the RegEx is build for case-insensitive usage and no whitespaces are allowed inside the address.
If you want to embed it into a larger RegEx, take into account to adjust the conditional matches wich refers to (?(2) -> (\[) inside (^|\s|(\[)) and (?(3) -> (::)? and (?(4) -> ([a-f\d]{1,4}::?) Works not perfectly, but I'm currently out of time."
2035,IPv4 Address match,"(?:^|\s)([a-z]{3,6}(?=://))?(://)?((?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?))(?::(\d{2,5}))?(?:\s|$)","Address match with optional match of protocol and port. Use case-insensitive. The matching brackets are:
bracket 1 = optional protocol without :// -- bracket 3 = IPv4 address, with a more likely correct number range -- bracket 4 = optional port without : as an separator. Should work fine."
2036,Server and port validation,^(([A-Z])([a-zA-Z0-9]+)?)(\:)(\d+)$,Validate if server and port is valid.
2037,Zero excluding money amount,((0)+(\.[1-9](\d)?))|((0)+(\.(\d)[1-9]+))|(([1-9]+(0)?)+(\.\d+)?)|(([1-9]+(0)?)+(\.\d+)?),Zero excluding money amount
2038,Get the empty tags, (<(?!\btd|tr\b)(\w*)[^>/]*>)(\s*)(</\2>),"Match all empty (that has no text) tags excluding some (TD, TR). The excluded tags list can be changed by adding / removing tags. See: (?!\btd|tr\b)"
2040,Test Israel Regular and Cell Phone Numbers,^[0][5][0]-\d{7}|[0][5][2]-\d{7}|[0][5][4]-\d{7}|[0][5][7]-\d{7}|[0][7][7]-\d{7}|[0][2]-\d{7}|[0][3]-\d{7}|[0][4]-\d{7}|[0][8]-\d{7}|[0][9]-\d{7}|[0][5][0]\d{7}|[0][5][2]\d{7}|[0][5][4]\d{7}|[0][5][7]\d{7}|[0][7][7]\d{7}|[0][2]\d{7}|[0][3]\d{7}|[0][4]\d{7}|[0][8]\d{7}|[0][9]\d{7}$,"This is a pattern for Regular and Cell Phone Numbers of israel,
allow using with or without dash (-)."
2041,SIP,"^(sip|sips):.*\@((\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})|([a-zA-Z\-\.]+\.[a-zA-Z]{2,5}))(:[\d]{1,5})?([\w\-?\@?\;?\,?\=\%\&]+)?",A SIP regex.
2042,Indian Landline,\d{3}-\d{6}, this is about land line number in AP .
2043,PO Box,\b[P|p]*(OST|ost)*\.*\s*[O|o|0]*(ffice|FFICE)*\.*\s*[B|b][O|o|0][X|x]\b,This expression will match almost all variations of PO Box.
2044,Positive non-zero decimal or integer,(^([0-9]*[.][0-9]*[1-9]+[0-9]*)$)|(^([0-9]*[1-9]+[0-9]*[.][0-9]+)$)|(^([1-9]+[0-9]*)$),If you want to check for positive and nonzero real numbers (both integer and decimal are supported).
2045,Numbers,^[1-9]\d*\.?[0]*$,It just omit 0 as the single number when it accepts all other Numbers
2048,a,/^[0-9]+\.d{3}? *$/,To check that maximum 3 digits it should be after decimal
2049,Israel generic phone number,"^\b\d{2,3}-*\d{7}\b$","Matches almost all Israel phone numbers (without 1800). Generic means it doesn't have a list of allowed prefix (i.e 050,03) because it changes frequently. Instead it accepts any 2-3 digits prefix, with or without hyphen.
"
2051,Capitalize Title,s/\b(\w+)\b/ucfirst($1)/ge,"I had some mailing contacts in a text file in mailing lable layout, and needed to extract them to database I used this regex to fix capitalization for name and address. THE JIM thomas FAMILY becomes The Jim Thomas Family"
2052,Extract Mailing Lables to Database,"\s*([a-z\. ]+)\s*\n\s*([a-z0-9\. #]+)\s*\n\s*([a-z \.]+)\s*,\s*([a-z \.]+)\s*\n?(?:\s*(\d{1,15}(?:-\d{1,4})?)\s*\n)?(?:\s*(\+?(?:1\s*[-\/\.]?)?(?:\((?:\d{3})\)|(?:\d{3}))\s*[-\/\.]?\s*(?:\d{3})\s*[-\/\.]?\s*(?:\d{4})(?:(?:[ \t]*[xX]|[eE][xX][tT])\.?[ \t]*(?:\d+))*))?","View the description correctly formatted here: 
http://www.perlmonks.org/?viewmode=public;node_id=471216"
2054,Phone Numbers: Australian,"^(\+\d{2}[ \-]{0,1}){0,1}(((\({0,1}[ \-]{0,1})0{0,1}\){0,1}[2|3|7|8]{1}\){0,1}[ \-]*(\d{4}[ \-]{0,1}\d{4}))|(1[ \-]{0,1}(300|800|900|902)[ \-]{0,1}((\d{6})|(\d{3}[ \-]{0,1}\d{3})))|(13[ \-]{0,1}([\d \-]{5})|((\({0,1}[ \-]{0,1})0{0,1}\){0,1}4{1}[\d \-]{8,10})))$","Intended to validate Australian Phone Numbers.
Very loosely based on Bill Hely's regex, but allows for further options for Country code, (un)bracketed Area code, spaced/hyphenated 8-digit/ Mobile/1X00*/13*."
2056,Remove non valid words,([^\w]+)|([^A-Za-z])|(\b[^aeiouy]+\b)|(\b(\w{2})\b),"I needed a clean string of keywords submitted in a form. This expression will select every word that doesn't have a vowel, every word that is shorter than 2 characters. It will select all non alphabetical characters."
2057,Bank Routing Transit Number (RTN),^((0[0-9])|(1[0-2])|(2[1-9])|(3[0-2])|(6[1-9])|(7[0-2])|80)([0-9]{7})$,"Ensures a given string matches the basic pattern of a bank routing transit number (RTN), used to identify financial institutions on instruments such as checks. Ensures number is nine digits long and has first two digits that comply with American Bankers Association rules."
2058,ciao:,(),fj
2059,Date dd-mm-yyyy with leap year,^(((0[1-9]|[12]\d|3[01])[\s\.\-\/](0[13578]|1[02])[\s\.\-\/]((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)[\s\.\-\/](0[13456789]|1[012])[\s\.\-\/]((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])[\s\.\-\/]02[\s\.\-\/]((19|[2-9]\d)\d{2}))|(29[\s\.\-\/]02[\s\.\-\/]((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$,"Checks date in format dd-mm-yyyy. Seperation characters can be -/. and space.
dd and mm HAVE to be two characters. Year has to be four characters and minimum 1900.
Expression handles leap year as well"
2060,Date Pattern of the form: DD-MM-YYYY,^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|11|12|10)-(19[0-9]{2})$,"This is regular expression that check for a particular date match in the following format respectively: DD-MM-YYYY and is only valid for the years between 1900 - 1999
Hint: good for validating age above 9-years old"
2061,String and dot,"^[a-zA-Z0-9\.\s]{3,}$","This expression check the input of simple text string from a-z,A-Z and number from 0 to 9 and the dot(.).
But the minimum insert is of 3 character."
2063,US Phone Number Excluding 800 & 900 Numbers,^(((?!\(800\))(?!\(888\))(?!\(877\))(?!\(866\))(?!\(900\))\(\d{3}\) ?)|(?!800)(?!888)(?!877)(?!866)(?!900)(\d{3}-))?\d{3}-\d{4},"This pattern matches US phone numbers but excludes numbers that are 800 or 900 numbers.  It excludes the following area codes 800, 888,877,866, and 900."
2064,Dutch Licenceplate,^[A-Z]{2}-[0-9]{2}-[0-9]{2}|[0-9]{2}-[0-9]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{2}-[0-9]{2}|[A-Z]{2}-[0-9]{2}-[A-Z]{2}|[A-Z]{2}-[A-Z]{2}-[0-9]{2}|}|[0-9]{2}-[A-Z]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{3}-[0-9]{1}|[0-9]{1}-[A-Z]{3}-[0-9]{2}$,Test a valid dutch licenceplate. Uppercase and with hyphens
2066,Dutch Phonenumber,^((((0031)|(\+31))(\-)?6(\-)?[0-9]{8})|(06(\-)?[0-9]{8})|(((0031)|(\+31))(\-)?[1-9]{1}(([0-9](\-)?[0-9]{7})|([0-9]{2}(\-)?[0-9]{6})))|([0]{1}[1-9]{1}(([0-9](\-)?[0-9]{7})|([0-9]{2}(\-)?[0-9]{6}))))$,"Check Dutch phonenumber including 0031 or +31 and optional - characters.
I know it can be shortened, but for readability (and shortage of time ;-)) I kept it like it is..."
2068,Absolute Path,^((?:\/[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\-[a-zA-Z0-9]+)*)+)$,An overly simple UNIX based path regex. The path must begin with a forward slash. The path segments may not lead or end with an underscore or dash which is a good thing. They also can not be doubled (__ or --). Another good thing. I've omitted all the punctuation that RFC allows until further notice.
2069,Basic Name or Title,^([a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*)$,This is a very basic regex for a simple name or title. It must begin and end with a word character and may contain spaces. No punctuation :(
2070,Date & Time Format dd-MMM-yyyy HH:mm:ss (24 hour),^((31(?!([-])(Feb|Apr|June?|Sep|Nov)))|((30|29)(?!([-])Feb))|(29(?=([-])Feb([-])(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])([-])(Jan|Feb|Ma(r|y)|Apr|Ju(l|n)|Aug|Oct|(Sep|Nov|Dec))([-])((1[6-9]|[2-9]\d)\d{2}\s(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?)$,"This expression matches date and time (24 hour) both in format dd-MMM-yyyy HH:mm:ss. Only the short form of month is allowed i.e. Jan not January. The month names are also case sensitive. The second part of the time is optional. Also the leading zeros for day, hour, minute and seconds are optional."
2071,Number,[0-9][.][0-9]{3}$,It is used to specify a precision
2072,Decimal Number,^([1-9]([0-9])?)(\.(([0])?|([1-9])?|[1]([0-1])?)?)?$,Expression to match decimal number with 2 digits.
2073,,[0-9][.][0-9]{3}$,It is useful to specofy the Precision.For this the precision is 3.
2074,azz,[0-9],azz
2075,asp.net password createuserwizard default,"(?=^.{7,51}$)([A-Za-z]{1})([A-Za-z0-9!@#$%_\^\&\*\-\.\?]{5,49})$","7 alphanumeric
1 non-alphanumeric
"
2078,Zipcode for Great Britain,"^[a-zA-Z]{1}[a-zA-Z0-9]{1}\s?[a-zA-Z0-9]{0,2}\s?\d{1}[a-zA-Z]{2}$","An expression that checks if a zipcode is build according the format for Great Britain. This expression is build on the rules as described on http://www.zipcodeworld.com/addressing/greatbritain.htm
"
2079,Log number,^([A-Z]{2})\/(\d{5})\/(\d{2})$,Validates a log number to the format AA/00000/00.letters must be capital and delititers forward slashes
2080,reference number,^([A-Z]{2}\d{5})\/(\d{2})$,valudates refrence number begining AA00000/00. capital letters must be used and forward slash
2081,.Net Framework TimeSpan validation,"^\s*-?(\d{0,7}|10[0-5]\d{0,5}|106[0-6]\d{0,4}|1067[0-4]\d{0,3}|10675[0-1]\d{0,2}|((\d{0,7}|10[0-5]\d{0,5}|106[0-6]\d{0,4}|1067[0-4]\d{0,3}|10675[0-1]\d{0,2})\.)?([0-1]?[0-9]|2[0-3]):[0-5]?[0-9](:[0-5]?[0-9](\.\d{1,7})?)?)\s*$","Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the .Net framework, to ensure that the string can be parsed without throwing an exception.  The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.

This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help.  It even checks the upper/lower boundaries on day values (10675199 days.)"
2082,Time Validator,^(([0]?[1-9]|[1-2][0-3])(:)([0-5][0-9]))$,This validator check for the Time from 00:00 to 23:59
2083,eMail ,"^[0-9a-zA-Z\\\.\%\&\^\#\!\^\|\(\)\[\]\{\{\.\>\,\<\$]*\@[0-9a-zA-Z\\\.\%\&\^\#\!\^\|\(\)\[\]\{\{\.\>\,\<\$]*\.[a-z]{2,3}$",Recognize an eMail adress
2085,Phone Number Validator,/^(1(\/|-|\s|.|))?(\(?\d{3}\)?)?(\/|-|\s|.|)?\d{3}(\/|-|\s|.|)?\d{4}(\/|-|\s|.|)?((x|ext)(.*)\d+)?$/i,"The most complete phone number validation I could come up with.

Allows for nearly every variation of entering phone numbers.

This expression is for US (10 digit) numbers only, international numbers will not work."
2086,Time Validator in hours format from 00:00 to 23:59, ^(([0-1]?[1-9]|2[0-3])(:)([0-5][0-9]))$,"This format accepts only the values between 00:00 to 23:59 
"
2087,Capture HTML Tags,"<font[a-zA-Z0-9_\^\$\.\|\{\[\}\]\(\)\*\+\?\\~`!@#%&-=;:'"",/\n\s]*>","This expression will capture font tags(or any other HTML tag if you change the word font in the expression) with parameters and stop at the closing font tag bracket.  The only keyboard characters it will not find between the starting and ending bracket are additional brackets.  So for example if you are looking for image tags it will not find <img src=""..."" alt="">My Picture<""> due to the nested brackets.  When I allowed nested brackets like this the expression did not always return only the tag I was looking for.  Sometimes it returned additional tags at the end so I suggest staying away from brackets in alt text and anywhere else you may be allowed to do it."
2088,RFC Compliant Path,"^(/(?:(?:(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*)(?:/(?:(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*))*))$","After reading RFC2396 and researching it a little more I put together this regex rather than update my non-compliant, overly simple one. More specificaly an absolute path."
2089,US Phone Number,^(1?(?: |\-|\.)?(?:\(\d{3}\)|\d{3})(?: |\-|\.)?\d{3}(?: |\-|\.)?\d{4})$,"This is my simple phone number regex. There are many like it but this is mine. It accepts the most common United States phone number formats that normal people use. The number 1 at the beginning is optional and so is the separators. The separators can be a dash (-), a period (.) or a space. Putting the area code in parenthesis is also an option. That's about it."
2090,US Zip Code,^(\d{5}(?:\-\d{4})?)$,Just for UZ zip codes. The post office number is optional.
2091,Social Security Number,^(00[1-9]|0[1-9][0-9]|[1-6][0-9][0-9]|7[0-6][0-9]|77[0-2]\-\d{2}\-\d{4})$,A properly formatted US social security number. first three digits must be 001 - 772.
2092,Date,^(\d{4}(?:(?:(?:\-)?(?:00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]))?|(?:(?:\-)?(?:1[0-2]|0[1-9]))?|(?:(?:\-)?(?:1[0-2]|0[1-9])(?:\-)?(?:0[1-9]|[12][0-9]|3[01]))?|(?:(?:\-)?W(?:0[1-9]|[1-4][0-9]5[0-3]))?|(?:(?:\-)?W(?:0[1-9]|[1-4][0-9]5[0-3])(?:\-)?[1-7])?)?)$,This is a regular expression to check for a properly formatted date according to the international date and time notation ISO 8601. See ISO 8601 specification for more information.
2093,Time,^([0-2][0-4](?:(?:(?::)?[0-5][0-9])?|(?:(?::)?[0-5][0-9](?::)?[0-5][0-9](?:\.[0-9]+)?)?)?)$,This is a regular expression to check for a properly formatted time according to the international date and time notation ISO 8601. See ISO 8601 specification for more information.
2094,Select File Accept Arabic and Englesh File name or Folder name ,^[a-zA-Z]:\\(([\w]|[\u0621-\u064A\s])+\\)+([\w]|[\u0621-\u064A\s])+(.jpg|.JPG|.gif|.GIF|.BNG|.bng)$,Select File Accept Arabic and Englesh File name or Folder name 
2095,Class A Network Number,^(10\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$,The IANA resrved 24-bit block of IP address space for private internets. It's just a single class A network number. This is also RFC 1918 compliant.
2096,Class B Network Numbers,^(172\.1[6-9]|2[0-9]|3[0-1|\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$,This is a set of 16 contiguous class B network numbers or a 16-bit block of ip address space as reserved by the IANA. RFC 1918 compliant.
2097,Class C Network Numbers,^(192\.168\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$,This is the 16-bit block of the IP address space for private internets reserved by the IANA. A set of 256 contiguous class C network numbers per RFC 1918.
2098,Numbers 0 - 100,^0?[0-9]?[0-9]$|^(100)$,Accepts all integers between 0-100
2099,Email,"^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$",Check email format
2100,Number,"^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$",This regular expression will match on a real / decimal / floating point / numeric string with no more than 2 digits past the decimal. The negative sign (-) is allowed. No leading zeroes or commas. It is based on a currency regular expression by Tom Persing.
2101,Telephone,"(\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}",Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
2103,Punctuation,"^((\'|\"")?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\'|\'[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2)?)|(?:(?:\2)?(?:\,|\.|\!|\?)?))(?: (\'|\"")?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\'|\'[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2|\3)?)|(?:(?:\2|\3)?(?:\,|\.|\!|\?)?)))*)$",This is a little goofy regex to allow punctuation. I was reluctant to post it but what the heck. If it puts a smile on somebody's face then it was worth it. It sort of works. :)
2104,EMail filter,"^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)?@[a-zA-Z0-9-]+(((\.[0-9]{1,3}){0,3})|((\.(co|com|net|org|edu|gov|mil|aero|coop|info|museum|name|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|fx|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw)){1,2}))$",This filter is able to filter a full of address. It uses extension definition
2105,"List of digits, CSV","^(\d{4},?)+$",Accepts a list of 4 digits separated by commas. Used to validate a list of years. Can be easily customized to change the number of digits.
2106,Windows filename,"(?i)^(((\\\\(\?\\(UNC\\)?)?)([A-Z]:\\|([^\\\/\:\*\?\""\<\>\|\.\s][^\\\/\:\*\?\""\<\>\|]+[^\\\/\:\*\?\""\<\>\|\.\s]\\){2}))|[A-Z]:\\)([^\\\/\:\*\?\""\<\>\|\s][^\\\/\:\*\?\""\<\>\|]+[^\\\/\:\*\?\""\<\>\|\s]\\)*([^\\\/\:\*\?\""\<\>\|\.\s][^\\\/\:\*\?\""\<\>\|\.]+[^\\\/\:\*\?\""\<\>\|\.\s])(\.[^\\\/\:\*\?\""\<\>\|\.\s]+)*?$","Matches valid Windows filenames using local, network and UNC formats."
2107,Embedded YouTube Video,"(\""http:\/\/www\.youtube\.com\/v\/\w{11}\&rel\=1\"")",A simple regex to validate an embedded YouTube video.
2108,Embedded Google Video,"(\""http:\/\/video\.google\.com\/googleplayer\.swf\?docId=\d{19}\&hl=[a-z]{2}\"")",A simple regex for validating an embedded Google video.
2109,Date Format,\b(0?[1-9]|1[0-2])(\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\/)(200[0-8])\b,"Matches the valid date format MM/DD/CCYY
Year from 2000 to 2008 and the month will accept till 12 and the day will accept till 31
"
2110,Date Format,\b(0?[1-9]|1[0-2])(\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\-)(200[0-8])\b,"Matches the valid date format MM-DD-CCYY
Year from 2000 to 2008 and the month will accept till 12 and the day will accept till 31
"
2111,Date Match,^(d{0}|(31(?!(FEB|APR|JUN|SEP|NOV)))|((30|29)(?!FEB))|(29(?=FEB(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(29(?=FEB(((0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)((1[6-9]|[2-9]\d)\d{2}|\d{2}|d{0})$,"This pattern mathces the following date formats: DDMMMYY,DDMMMYYYY,DDMMMYY. The Pattern matches on leap year dates as well"
2112,Password,"^([a-zA-Z0-9]{4,18}?)$","My simple but effective password regex. The password can only contain letters and/or digits and must be at least 6 characters long and no more than 20. I know it says {4,18} but it just works out that way. The question mark was added for optimization. Also, the password can not begin or end with a space or underscore."
2113,Valid UK Post Codes Upper and Lower Case,^ ?(([BEGLMNSWbeglmnsw][0-9][0-9]?)|(([A-PR-UWYZa-pr-uwyz][A-HK-Ya-hk-y][0-9][0-9]?)|(([ENWenw][0-9][A-HJKSTUWa-hjkstuw])|([ENWenw][A-HK-Ya-hk-y][0-9][ABEHMNPRVWXYabehmnprvwxy])))) ?[0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}$,"Matches valid UK post codes in both upper and lower case, allowing for one or zero spaces between outcode and incodes."
2114,Person's Name,^([a-zA-Z]+(?:\.)?(?: [a-zA-Z]+(?:\.)?)*)$,Here's a regex for a person's name. Simple but effective.
2115,Title,"^([^_][\w\d\@\-]+(?:s\'|\'[a-zA-Z]{1,2})?(?:\,)?(?: [\w\d\@\-]+(?:s\'|\'[a-zA-Z]{1,2})?(?:\,)?)*(?:\.|\!|\?){0,3}[^\s_])$",Here's a regex for a title. The title may contain basic punctuation and may not have leading or trailing spaces or underscores but that's about it.
2116,Numbers,"^((?:\+|\-|\$)?(?:\d+|\d{1,3}(?:\,\d{3})*)(?:\.\d+)?(?:[a-zA-Z]{2}|\%)?)$","Here's another one for numbers. Any kind of number. Money, percentage, ect. Commas are optional and must be properly formatted."
2117,Domain URL,"^(http\:\/\/(?:www\.)?[a-zA-Z0-9]+(?:(?:\-|_)[a-zA-Z0-9]+)*(?:\.[a-zA-Z0-9]+(?:(?:\-|_)[a-zA-Z0-9]+)*)*\.[a-zA-Z]{2,4}(?:\/)?)$",A URL to a domain name. Only for http but that can be changed easily to accept more. the dashes and undescores can only be used between text and/or digits. The slash on the end is optional
2118,IP validation,"^(?:(?:1\d{0,2}|[3-9]\d?|2(?:[0-5]{1,2}|\d)?|0)\.){3}(?:1\d{0,2}|[3-9]\d?|2(?:[0-5]{1,2}|\d)?|0)$",Valiadation IP RegExp.
2119,Email Validation,"^([a-zA-Z0-9]+([\.+_-][a-zA-Z0-9]+)*)@(([a-zA-Z0-9]+((\.|[-]{1,2})[a-zA-Z0-9]+)*)\.[a-zA-Z]{2,6})$","This pattern was based on this reference: http://www.remote.org/jochen/mail/info/chars.html

This expression allows only these symbols (+, -, _, or .) in the local part of the address, but no two consecutive symbols are allowed. The symbols behave like separators for alphanumeric atoms. The local part must begin and end with an atom. Therefore, local part cannot begin or end with a symbol.

For the domain name, I tested what was allowed at various domain registrars. While hyphens are allowed, domain names must abide by the following rules:
-can't begin or end with hyphen
-no more than two hyphens can appear consecutively"
2120,US Social Security Numbers,^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ .-]?)(?!00)\d\d\3(?!0000)\d{4}$,"Detects 9 digit numbers with the pattern DDD-DD-DDDD separated with dashes, spaces, or periods. Must be in valid assigned number ranges. Eliminates common test numbers, such as 123456789 or all the same digit."
2121,Yet another URI checker,"^([a-zA-Z]+)://([a-zA-Z0-9_\-]+)((\.[a-zA-Z0-9_\-]+|[0-9]{1,3})+)\.([a-zA-Z]{2,6}|[0-9]{1,3})((:[0-9]+)?)((/[a-zA-Z0-9_\-,.;=%]*)*)((\?[a-zA-Z0-9_\-,.;=&%]*)?)$","Checks whether the entered string looks like a URI, with a specified protocol. Optionally, you can add the port number, and some GET variables.

The control is quite loose, but it's a choice of mine.

Comments and corrections are welcome."
2123,American Dollar Amount Format,"(\$\s*[\d,]+\.\d{2})\b",Validate American Dollar Amount Format
2124,Validate Numbers,\b[1-9]\b,Validate the numbers 1 to 9
2125,Validate Numbers,\b4[0-9]\b,Validate the numbers in between 39 to 50 (i.e 40 to 49)
2126,Special Character Blocker,[^<>/?&{};#]+,This expression stops the characters <>/?&{};# from a string of any length passing the regular expression validator in Visual Studio thereby stopping the HttpRequestValidationException (if client side validation and javascript is on)
2128,Integer with comma and dot,"^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*(\.\d{1,2})?$",Integer with comma and dot
2129,Street Number only,"((\d{1,6}\-\d{1,6})|(\d{1,6}\\\d{1,6})|(\d{1,6})(\/)(\d{1,6})|(\w{1}\-?\d{1,6})|(\w{1}\s\d{1,6})|((P\.?O\.?\s)((BOX)|(Box))(\s\d{1,6}))|((([R]{2})|([H][C]))(\s\d{1,6}\s)((BOX)|(Box))(\s\d{1,6}))?)$","This is my first attempt at creating a regex.  For a street number only field, allows 7 digit number, 6 digit number with one preceding letter (the letter can have a hyphen, space, or nothing between it and the numbers), two 7 digit numbers divided by a ""/"",""\"", or ""-"", variations of P.O. Box we allow, Rural Route, and Highway Contract acoording to U.S. Postal rules."
2130,US Phone Number Validation,1?[ \.\-\+]?[(]?([0-9]{3})?[)]?[ \.\-\+]?[0-9]{3}[ \.\-\+]?[0-9]{4},Us phone number validation
2131,Email,"""/^[-_.[:alnum:]]+@((([[:alnum:]]|[[:alnum:]][[:alnum:]-]*[[:alnum:]])\.)+(ad|ae|aero|af|ag|ai|al|am|an|ao|aq|ar|arpa|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|biz|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|com|coop|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|in|info|int|io|iq|ir|is|it|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mil|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|museum|mv|mw|mx|my|mz|na|name|nc|ne|net|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|org|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pro|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)$|(([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5])\.){3}([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5]))$/i""",here its accepts valied email only
2132,US Dallor,"^\$((\d{1})\,\d{1,3}(\,\d{3}))|(\d{1,3}(\,\d{3}))|(\d{1,3})?$","accepts US dallor upto 9,999,999"
2133,Percentage,"^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$",generate percentage with 2 values after point
2136,link,"<link href=""../Common/Styles/iLienStyle.css"" type=""text/css"" rel=""stylesheet"" />","hi i want to evaluate the following expression with regular expression.

<link href=""Lien.css""  id=""lbl"" />

cond1: compulsary start with <link
cond2: <link (one space)
cond3: next string should be ""href""; if u give any other it will return error.
cond4: ""lien.css"" in this .css should be same and before string may vary.
eg:     dotnet.css (right)
           dotnet.conn (wrong)

next: same thing for id also.

one more important cond: 

<link href=""lien.css"" id=""lbl"" /> (should be correct)
<link id=""lbl"" href=""lien.css""  /> (should be correct) (if u change the places of href and id also it will give correct)"
2137,Accepts numeric numbers except zero,^(([1-9]{1}(\d+)?)(\.\d+)?)|([0]\.(\d+)?([1-9]{1})(\d+)?)$,"Regular expression that accepts positive numbers with or with decimal places, but will not allow zero or 0.000"
2138,phone,"/*d(9,15)",phone number
2139,URL Validation,"^(ftp|https?):\/\/([^:]+:[^@]*@)?([a-zA-Z0-9][-_a-zA-Z0-9]*\.)*([a-zA-Z0-9][-_a-zA-Z0-9]*){1}(:[0-9]+)?\/?(((\/|\[|\]|-|~|_|\.|:|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*)\?((\/|\[|\]|-|~|_|\.|,|:|=||\{|\}|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*\&?)*)?(#([-_.a-zA-Z0-9]|%[a-fA-F0-9]{2})*)?$","This pattern can be used to validate URLs starting with ftp, http or https"
2141,Austria VAT Number,"^(AT){0,1}[U]{0,1}[0-9]{8}$","Vat number for Austria.
Format is
ATU12345678"
2142,Bulgaria Vat Number,"^(BG){0,1}([0-9]{9}|[0-9]{10})$","Vat number for Bulgaria. Formats are 
BG123456789
BG1234567890
"
2144,BV_SessionID=@@@@0106700396.1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg.0,BV_SessionID=@@@@0106700396.1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg.0,www.irctc.co.in
2145,French postal address,((^[0-9]*).?((BIS)|(TER)|(QUATER))?)?((\W+)|(^))(([a-z]+.)*)([0-9]{5})?.(([a-z\'']+.)*)$,"Find differents parts of a french mail's address.

0       : Complete address
1       : Number + BIS, TER or QUATER
2       : Number
3 et 4  : BIS, TER or QUATER
5 &#224; 9   : Nothing
10      : Street
11      : Nothing
12      : Postal code
13      : City"
2146,Date and Time Validation,(^0?[1-9]|^1[0-2])\/(0?[1-9]|[1-2][0-9]|3[0-1])\/(19|20)?[0-9][0-9](\s(((0?[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)|((0?[0-9]|1[0-2]):[0-5][0-9](:[0-5][0-9])?\s(AM|PM))))?$,Expression to validate a date with or without time in standard or 24 hour format with optional milliseconds (01/12/08 23:31:05 or 5/12/1974 11:59 PM).
2147,domain\user,^([a-zA-Z0-9])+\\{1}([a-zA-Z0-9])+$,Checks for the format alphanumeric\alphanumeric
2148,Date Dashes Two Digit Year,^((((0?[13578])|(1[02]))[\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\-]?(0?[1-9]|[0-2][0-9])))[\-]?\d{2}$,"I was looking for a date format that allowed 1 or 2 digit Month and Days and 2 digit years. I found and tweak this one 
based off Cliff Schneide Date example. "
2150,Indian Landline number,"^(\d{3,4}-\d{7,8})*$",This validates all the indian landline no. i.e (code)-(phone_no).the code can be 3 or 4 digits andthe hone no can be 7 or 8 digits.
2151,Australian Postcodes,^[2-7]{1}[0-9]{3}$,Matches all valid Australian postcodes
2154,,^[*a-zA-Z].$,The reqular expression matches those are starts with single character after that any character
2155,Toll Free phone numbers(800) Not allowed,(8[^0]\d|8\d[^0]|[0-79]\d{2})-\d{3}-\d{4},this expression not allowed to enter toll free no.
2156,UK Mobile Phone Numbers,^(0|\+44\s?)7(0|5|7|8|9)\s?\d{2}\s?\d{6}$,"Validates UK Mobile numbers, expressed as Local (077...) or as international (+447).
Note: 71,72,73,74 are reserved for mobiles in the future (therefore may be added later). 76 is for pagers."
2157,Name and Number,"^\s*[a-zA-Z0-9,\s]+\s*$","Will take space, number, no special characters"
2158,Validates the most of the email formats,"/^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}([a-z0-9]|([a-z0-9][\-]))+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$/",This expression will validates most of the email formats.
2159,rijec1,(a+b)*,Nka
2161,Is Valid XML Node Or Attribute Name,^[a-zA-Z_:]+[a-zA-Z_:\-\.\d]*$,"Valid XML Node or Attribute Names start with a letter <document>, an underscore <_record> or a colon (generally avoid using a colon) 

The next characters may be letters, digits, underscore, hyphens, periods and colons (but no whitespaces)"
2164,Swiss Zip Code validation,^[1-9][0-9][0-9][0-9]$,"Zip code validation for Switzerland.
Forces 4-digits only zipcode starting at 1000"
2165,Canadian Phone number validation with Extension,"^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}(([ ]{0,1})|([ ]{1}[0-9]{3,4}|))$",Validate a Canadian phone number and optional 3 to 4 digits extension
2166,schema test,TESTINGRXLIBSCHEMA2012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456,TESTINGRXLIBSCHEMA2012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
2167,oipopob,jhkjhk,"hbhj jkjnlk
klnlk "
2168,Check date format YYYYMMDD,((^((1[8-9]\d{2})|([2-9]\d{3}))(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(11|0?[469])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(0?2)(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)(0?2)(29)$)|(^([3579][26]00)(0?2)(29)$)|(^([1][89][0][48])(0?2)(29)$)|(^([2-9][0-9][0][48])(0?2)(29)$)|(^([1][89][2468][048])(0?2)(29)$)|(^([2-9][0-9][2468][048])(0?2)(29)$)|(^([1][89][13579][26])(0?2)(29)$)|(^([2-9][0-9][13579][26])(0?2)(29)$)),Check date format YYYYMMDD
2169,Password validation,"(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$","Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters"
2170,css style attribute content,"style=""[^""]*""|'[^']*'","Get the style attribute inner text contained inside "" or ' caracters with the ""style="" prefix."
2171,Simple SELECT statements,"(SELECT\s(?:DISTINCT)?[A-Za-z0-9_\*\)\(,\s\.'\+\|\:=]+?)\s(?:FROM\s[\w\.]+)",This finds the SELECT part of a SQL select statement.  It does not find the entire FROM statement.  That is a different RegEx I will post later.
2172,Developing for Drupal,Write modules for Drupal,"Expression about module, How module action, hook, theme, more and more."
2174,MM/DD/YY Expression ,((0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))/\d{2},Validates dates in the following format: MM/DD/YY
2176,US States and Territories,^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$,matches US states and territories in 2 character UPPER case. Reduced from Jason Gaylord's http://regexlib.com/REDetails.aspx?regexp_id=396
2177,US States and DC,^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$,The 50 US states and DC (Disctrict of Columbia).
2178,URl Domain names,"^http[s]?://([a-zA-Z0-9\-]+\.)*([a-zA-Z]{3,61}|[a-zA-Z]{1,}\.[a-zA-Z]{2})/.*$","Used for matching a URL and can be used for extracting the domain name from a given URL ending with '/'.

Concat $2 and $3 to get the domain name.

"
2179,Javascript Tokenizer,"(\/\*[\s\S.]+?\*\/|[/]{2,}.*|\/((\\\/)|.??)*\/[gim]{0,3}|'((\\\')|.??)*'|""((\\\"")|.??)*""|-?\d+\.\d+e?-?e?\d*|-?\.\d+e-?\d+|\w+|[\[\]\(\)\{\}:=;""'\-&!|+,.\/*])","Tokenize a Javascript document for parsing

each token is a language-token : string, int, float, comment, multiline comment, operator, expression etc. etc."
2180,Invalid IF STATEMENT finder,if\s[(][A-Za-z]*\s[=]\s,finds if statements with only one = sign.
2181,Specific Top-Level Domain (TLD),^.*(yourdomain.com).*$,"Matches the TLD of a given domain (replace yourdomain.com with whatever domain you're trying to enforce).

I was writing an web application in which I wanted to to display a special message to visitors if and only if they were referred to my site by one specific site.  However, because the specific site in question was highly dynamic, referring URLs were all over the place in terms of consistency and the only thing I knew I could count on 100% was the TLD (subdomains and file paths acceptable, so long as the TLD matches exactly)."
2183,Decimal Pattern,"^(\d{1,8}|(\d{0,8}\.{1}\d{1,2}){1})$",Validates a decimal with up to 8 whole places and up to two decimal places
2184,Simple URL,"^(http(s?):\/\/)(www.)?(\w|-)+(\.(\w|-)+)*((\.[a-zA-Z]{2,3})|\.(aero|coop|info|museum|name))+(\/)?$","Matches simple root website URLs.
Https and some new domains supported."
2185,Validation of Mexican RFC for tax payers (individuals),Validation of Mexican RFC for tax payers (individuals),This is the expression to validate the personal key for tax payers in Mexico (called RFC) as individuals (not for enterprises).
2186,Name or Text,"^[\w\s]+$
^[[A-Z]\s]$",First word and second word should be a single space
2188,New Zealand Phones,"^(((\+?64\s*[-\.]?[3-9]|\(?0[3-9]\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{4})|((\+?64\s*[-\.\(]?2\d{1}[-\.\)]?|\(?02\d{1}\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{3,5})|((\+?64\s*[-\.]?[-\.\(]?800[-\.\)]?|[-\.\(]?0800[-\.\)]?)\s*[-\.]?\d{3}\s*[-\.]?(\d{2}|\d{5})))$","This phone pattern matches all New Zealand phone numbers with formatting and returns a single formatted string as the first return in the array. Does not take into account all specific exclusions, though, in case of changes (like 025 to 027 in 2007). Based off of  CGRdevelopment's New Zealand regex."
2190,Positive number greater than,((?!^[0-4])^(\d+))$,Allows only a positive whole number greater than 4.  Obviously it can be easily changed to be greater than any number desired.
2191,Validate Date Format,\b(0?[1-9]|1[0-2])(\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\/)(0[0-8])\b ,Matches the valid date format MM/DD/YY Year from 2000 (00) to 2008 (08) and the month will accept till 12 and the day will accept till 31
2192,Validate Date Format,\b(0?[1-9]|1[0-2])(\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\-)(0[0-8])\b ,Matches the valid date format MM-DD-YY Year from 2000 (00) to 2008 (08) and the month will accept till 12 and the day will accept till 31
2193,Validate Time Format (Railway Time 24 hrs),\b(0[0-9]|1[0-9]|2[0-3])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\b,It will matches the railway time format that 00:00:00 to 23:59:59
2194,Validate Time format (Standard time 12 hrs),\b(0[0-9]|1[0-1])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\b,It will matches the Standard time format that 00:00:00 to 11:59:59
2195,"Validate Time format with AM,PM (Standard time 12 hrs) ",\b(0[0-9]|1[0-1])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\s*(AM|PM|A|P)\b,It will matches the Standard time format that 00:00:00 AM to 11:59:59 PM
2196,"Validate Date format Month Day, CCYY","\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(200[0-9])\b","VALIDATE THE DATE FORMAT FULL MONTH DAY, CCYY i.e August 30, 2006"
2197,"Validate Date format Month Day, YY","\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(0[0-9])\b","VALIDATE THE DATE FORMAT FULL MONTH DAY, YY i.e August 30, 06 (2006)"
2198,"Validate Date format Month Day, CCYY","\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(200[0-9])\b","VALIDATE THE DATE FORMAT SHORT MONTH DAY, CCYY i.e Aug 30, 2006
"
2199,"Validate Date format Month Day, YY","\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(0[0-9])\b","VALIDATE THE DATE FORMAT SHORT MONTH DAY, YY i.e Aug 30, 06 (2006)"
2200,US Phone with spaces only,(\+1 )?\d{3} \d{3} \d{4} ,This simple expression validates a USA phone number format where the +1 is required and that the phone number must only consist of numbers and spaces.
2201,"Integers with/without positive/negative sign, miles separator (,) and exponential notation","/^[-+]?[1-9](\d*|((\d{1,2})?,(\d{3},)*(\d{3})))?([eE][-+]\d+)?$/","Integers with optional positive/negative sign, miles separator (,) and exponential notation

Valids integer numbers with optional support for:
1.- positive/negative sign (123 -123 +123 are valid)
2.- miles separator (,) (12345 12,345 +12,345 are valid)
2.- exponential notation (+123E+4 -12,345E-4 are valid)"
2202,"Decimals with optional positive/negative sign, miles separator (,) and exponential notation","/^[-+]?((\d*|((\d{1,3})?,(\d{3},)*(\d{3})))?)(\.\d*)?([eE][-+]\d+)?$/","Valids decimal numbers with optional support for:
1.- Use a positive/negative sign (123.78 -123.09 +0.123 are valid)
2.- Use a miles separator (12345.789 12,345.099 +12,345  are valid)
2.- Use a exponential notation (+0.123E+4 -12.345e-4 are valid)"
2203,Split string by spaces except when within quotes,"\s(?=([^""]*""[^""]*""[^""]*)*$|[^""]*$)","Splits a string by spaces, except when the space is within a quote delimited set of characters. Usefull for splitting search field inputs.
Props to killahbeez"
2205,Combination OF Alpha Characters And Period,^[a-zA-Z]+(\.[a-zA-Z]+)+$,"Regular expression :Finite automata rule
Values should preceed with characters of set [A-Za-z] and followed with period and character set [A-Za-z]"
2206,Remove icon data from Firefox bookmark files,"ICON=[a-zA-Z0-9/\+-;:/-/\""=]*","Remove favicon base64 data from Firefox bookmark HTML files, thereby reducing file size (useful for bookmark backup and transfer)."
2207,Date used for credit cards,^(|(0?[1-9])|(1[0-2]))\/((0[8-9])|(1[0-9]))$,"mm/yy date format for years between '08 and '19. For Credit Cards, date can't be in the past and only out 10 years."
2210,Longitude  regex,(^\+?1[0-7]\d(\.\d+)?$)|(^\+?([1-9])?\d(\.\d+)?$)|(^-180$)|(^-1[1-7]\d(\.\d+)?$)|(^-[1-9]\d(\.\d+)?$)|(^\-\d(\.\d+)?$),"first regex put on site.
longitude must>=-180 & <180."
2211,Latitude ,(^\+?([1-8])?\d(\.\d+)?$)|(^-90$)|(^-(([1-8])?\d(\.\d+)?$)),Latitude must<90 >=-90
2212,time,^((1[01])|(\d)):[0-5]\d(:[0-5]\d)?\s?([apAP][Mm])?$,"validate time
in hh:mm:ss
hh:mm 
hh:mm:ss pm(am,PM,AM)
<12h"
2213,html <td>,^<\s*(td|TD)\s*(\w|\W)*\s*>(\w|\W)*</(td|TD)>$,"match <td ***>***</td> in html,so any other html mark with<sth></sth> is just do a little change to this"
2214,Ip address,^((([1]\d{2})|(22[0-3])|([1-9]\d)|(2[01]\d)|[1-9]).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d))$,"match ip 
address from 1.0.0.0 to 223.255.255.255"
2217,USA Date Format. MM/DD/YYYY,"(((0[13578]|10|12)([/])(0[1-9]|[12][0-9]|3[01])([/])([1-2][0,9][0-9][0-9]))|((0[469]|11)([/])([0][1-9]|[12][0-9]|30)([/])([1-2][0,9][0-9][0-9]))|((02)([/])(0[1-9]|1[0-9]|2[0-8])([/])([1-2][0,9][0-9][0-9]))|((02)([/])(29)(\.|-|\/)([02468][048]00))|((02)([/])(29)([/])([13579][26]00))|((02)([/])(29)([/])([0-9][0-9][0][48]))|((02)([/])(29)([/])([0-9][0-9][2468][048]))|((02)([/])(29)([/])([0-9][0-9][13579][26])))",This is the USA Date Format. MM/DD/YYYY with checking leaf year
2218,,"^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@(?!co.uk)[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$",This regex enable the user to enter all valid email addresses apart from when the user input 'co.uk' immediately after the '@' without stating a domain before it (e.g. 'freeserve.co.uk')
2219,ISO 8601 (W3 subset),^(\d{4}((-)?(0[1-9]|1[0-2])((-)?(0[1-9]|[1-2][0-9]|3[0-1])(T(24:00(:00(\.[0]+)?)?|(([0-1][0-9]|2[0-3])(:)[0-5][0-9])((:)[0-5][0-9](\.[\d]+)?)?)((\+|-)(14:00|(0[0-9]|1[0-3])(:)[0-5][0-9])|Z))?)?)?)$,"Matches all valid date/datetime strings according to the W3's implementation of ISO 8601, outlined here:
http://www.w3.org/TR/NOTE-datetime"
2220,Validate PATH,"/^([0-9a-zA-Z]+|[a-zA-Z]:(\\(\w[\w ]*.*))+|\\(\\(\w[\w ]*.*))+)\.[0-9a-zA-Z]{1,3}$/",Match a path location. This regular expression check the file location and validate a file from one to three character extension description.
2221,Simple Excel Cell Address Parse,"^\$?([A-Za-z]{0,2})\$?([0-9]{0,5}):?\$?([A-Za-z]{0,2})\$?([0-9]{0,5})$","Since MS Excel will be giving you the cell range addresses, this simple regex provides nice match captures.  It may not validate the only possibles that Excel takes, but it is ""good enough"" for a majority of circumstances."
2222,Full Name,"^([a-zA-Z]+[\'\,\.\-]?[a-zA-Z ]*)+[ ]([a-zA-Z]+[\'\,\.\-]?[a-zA-Z ]+)+$","Requires a person's name including at least 2 parts. (first and last) Allows optional extra names. It allows plenty of initials as well as symbols in names. Restricts symbol usage quite a bit, but allows even names with 2 symbols. Requires last name to have at least 2 characters and cannot be an initial. Works well for filtering names on validation."
2223,Email,[a-zA-Z0-9_\\-]+@([a-zA-Z0-9_\\-]+\\.)+(com),Checks Email
2224,HH:MM:SS AM|PM,^(|(0\d)|(1[0-2])):(([0-5]\d)):(([0-5]\d))\s([AP]M)$,This will validate only time.
2225,日期验证,((19|20)[0-9]{2})-(([1-9])|(0[1-9])|(1[0-2]))-((3[0-1])|([0-2][0-9])|([0-9])),Validate the year month and day.
2226,String contains only Asterisk / begins with Asterisk,^[:*:],"This checks whether the string is equals to ""*"" i.e., contains only ""*(Asterisk)"" or begins with Asterisk."
2228,Duration time,"^[0-9]+\.?[0-9]?[0-9]?[0,5]?$",The time should be fractional number and divisible by 0.005
2229,CSS commentary,/\*[^\/]+/,With this regex you can find or replace any CSS commentary in your stylesheets in once. Build for use with dreamweaver. Probably works also fine in any other circumstances.
2231,Match unanchored urls in unstructured text,"\b((?<![""'>])(?:https?://)?(?<![-@>])(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])\.)+(?:com|org|net|gov|mil|biz|info|name|aero|mobi|jobs|museum|[A-Z]{2})(?:/[-A-Z0-9\/_.]+)?(?:\?[-A-Z0-9&\._%=,]+)?(?!['""<]))\b","Use this regex to match urls (including folder, file and querystring) in unstructured text that are not in anchor tags. Replace with <a href=""$1"">$1</a> to create anchor tags."
2232,Fractions / Fractional Odds,^\d+\/?\d*$,"This simple expression is used to validate fractions or UK odds.
It will match integers, allowing 10/1 to be entered as 10, and fractions.
It will not match negative numbers or fractions, spaces or any alphabetical characters."
2233,0-99,^[0-9]$|[1-9]+[0-9]$,>=0 & <100????
2234,Number with Decimal,"^(\d{1,4}?[.]{0,1}?\d{0,3}?)$",This expression validate the add of numbers with or without decimal
2235,Rapidshare.com Urls,"/rapidshare\.com\/files\/(\d+)\/([^\'^\""^\s^>^<^\\^\/]+)/",matches all rapidshare.com links /files / 8 numbers / filename
2236,Belgium Phone Number,"^0[1-9]\d{7,8}$",matches fixed and mobile phones in ACD format
2238,PHP tags,^([\s]*<\?php[\s]+)(.*?)([\s]+\?>[\s]*)$,"edit: this does not seem to work on php's regex testing, but works on asp and javascript as far as i can tell.
Checks if a string is enclosed in <?php and ?> tags, allows white spacing around the sides. It's not perfect but it suited my tutorial CMS fine because only I edit it and I know how it works, I am working on a fully functional version of this regular expression."
2239,Local file path,^((\.\./|[a-zA-Z0-9_/\-\\])*\.[a-zA-Z0-9]+)$,"A basic regex that matches a file path, windows or linux slash directions both match, apart from ..\"
2240,Defining Rule,3,3
2241,Randal L. Schwartz,^(Randal (?:L\.)? Schwartz|merlyn)$,This regex looks for Randal.
2242,ukrainian phone numbers,^((8|\+38)-?)?(\(?044\)?)?-?\d{3}-?\d{2}-?\d{2}$,ukrainian phone numbers in Kiev
2243,Dutch Currency,"^([\u20AC]?[1-9]\d*\.\d{3}(?:,\d{2})?|[\u20AC]?[1-9]\d*(?:,\d{2})?|[\u20AC]?[1-9]\d*)$","Optional Amount, with optional thousands seperator (using the point) and optional decimal comma. If decimal comma is in string, then 2 trailing digits are required. Also checks for the optional euro sign"
2244,uploaded.to Downloadlink,http://(?:www\.|)uploaded\.to/\?id=[a-z0-9]{6},Downloadlinks of the 1-Click-Hoster uploaded.to
2245,PO Box,\b[P|p]?(OST|ost)?\.?\s*[O|o|0]?(ffice|FFICE)?\.?\s*[B|b][O|o|0]?[X|x]?\.?\s+[#]?(\d+)\b,"Modified version of Chris Myers' regexp for po boxes.  This one won't match the word ""box"" in the address. Only matches if there is a number following the po box. Also accepts a # in front of the number and other spelling variations."
2246,AlphaNumeric,(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9\s]*)$,This is a good alpha numeric expression.
2247,Starts with http[s],http[s]?://[a-zA-Z0-9.-/]+,Checks to make sure that entry starts with http:// or https://  and that contents are limited to alphas . - /
2248,String ,"^(\w(\s)?(\-(\s)?)?(|,(\s)?)?)+$","This string allows words seperated by single space, no space allowed in beging and allow - and comma(,)"
2250,date validation,^((0[13578]|[13578]|1[02])\/(0[1-9]|[12]\d|3[01])\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[13456789]|[13456789]|1[012])\/(0[1-9]|[12]\d|30)\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[2]|[2])\/([1-9]|0[1-9]|[12][0-8])\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[2]|[2])\/(29)\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))$,"complate date validation 
in mm/dd/yyyy format 

and also it check leap year
"
2251,ciao,www.ilmiosito.it,qqqq
2252,ciao,www.ilmiosito.it,qqqq
2253,ciao,www.ilmiosito.it,qqqq
2254,ciao,www.ilmiosito.it,qqqq
2255,ciao,www.ilmiosito.it,qqqq
2256,ciao,www.ilmiosito.it,qqqq
2257,ciao,www.ilmiosito.it,qqqq
2258,ciao,www.ilmiosito.it,qqqq
2259,GPA Validator,^[0]|[0-3]\.(\d?\d?)|[4].[0]$,Validates student Grade Point Average (GPA) value (based on U.S. Standard 0 thru 4.0 values)
2260,Number input validation,"[+-]*[0-9]+[,]*[0-9]*|[+-]*[0-9]*[,]+[0-9]*","This Regex is usefull to validate if the text typed will still lead to a valid number for a international input.
Replace , with \. to get an american notation"
2264,Sql Server Tips - Removing or Replacing non-alphanumeric characters in strings ,joggee,"Create a table with all bad codes
DECLARE @mycode INT
CREATE TABLE #badcodes(badcode INT)
SET @mycode=33
WHILE @mycode<=255
..................http://blog.joggee.com/?p=52 
"
2265,Integer with commas,"^[-|\+]?[0-9]{1,3}(\,[0-9]{3})*$|^[-|\+]?[0-9]+$",Integer with or without commas.  Signed or unsigned.
2266,32 bit unsigned integer,^(429496729[0-6]|42949672[0-8]\d|4294967[01]\d{2}|429496[0-6]\d{3}|42949[0-5]\d{4}|4294[0-8]\d{5}|429[0-3]\d{6}|42[0-8]\d{7}|4[01]\d{8}|[1-3]\d{9}|[1-9]\d{8}|[1-9]\d{7}|[1-9]\d{6}|[1-9]\d{5}|[1-9]\d{4}|[1-9]\d{3}|[1-9]\d{2}|[1-9]\d|\d)$,Validates a 32bit integer from 0 through 4294967296 without leading zeros. An expansion of the 16 bit version http://regexlib.com/REDetails.aspx?regexp_id=1427
2267,Numbers,"^([0-9]{1}[\d]{0,2}(\,[\d]{3})*(\,[\d]{0,2})?|[0-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$","Match any number , no characters, no empty sets, and accept zero. "
2268,UK Postcode Validation,^(GIR ?0AA|(?:[A-PR-UWYZ](?:\d|\d{2}|[A-HK-Y]\d|[A-HK-Y]\d\d|\d[A-HJKSTUW]|[A-HK-Y]\d[ABEHMNPRV-Y])) ?\d[ABD-HJLNP-UW-Z]{2})$,"This regex will validate any UK Postcode, including the Girobank postcode and irrespective of whether it contains a space.

It is based on the BS7666 standard detailed in the UK Government Data Standards Catalogue from the Cabinet Office (http://www.govtalk.gov.uk/gdsc/html/frames/Postcode.htm)."
2269,Version information,^(0\.|([1-9]([0-9]+)?)\.){3}(0|([1-9]([0-9]+)?)){1}$,A simple regex to check a version information string of the style 1.0.0.0
2270,sms,^(NAME)(\s?)<?(\w*)(\s*)([0-9]*)>?$,asas
2271,"Numeric including commas, decimal, negative, and currency","^((\$?\-?)|(\-?\$?))([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)?(\.[0-9]*)?$","Matches any number which includes the US currency symbol ($), a negative sign (-), comma separators, and a decimal.  It matches an unlimited number of decimal places.  It does NOT reject an empty string passed to it.  Credit goes to Al Kahler for posting the original expression from http://regxlib.com/REDetails.aspx?regexp_id=70 along with a fix for the decimal place."
2272,gfhgfh,gfhgffgh,gfhgfhfgh
2273,Validate MS DOS 8.3 Directory or File name (without extension),[^ _0-9a-zA-Z\$\%\'\-\@\{\}\~\!\#\(\)\&\^],"Use this regular expression to find any invalid characters within a DOS 8.3 Directory or Folder name.

Reference: http://support.microsoft.com/?id=120138"
2274,Phone,"Extn 7859 , 24767859(D)",Phone
2275,Match a software version major.minor.maintenance.build ,^(\d+?)\.(\d+?)\.(\d+?)\.(\d+?)$,"Matches a program version with major, minor, maintenance and build number in digits. "
2276,ICD-10 Code (World Health Organization),"^[A-Z]\d{2}(\.\d){0,1}$",This expression matches ICD-10 code
2278,Indian Date Validator,(((0*[1-9]|[12][0-9]|3[01])([-./])(0*[13578]|10|12)([-./])(\d{4}))|((0*[1-9]|[12][0-9]|30)([-./])(0*[469]|11)([-./])(\d{4}))|((0*[1-9]|1[0-9]|2[0-8])([-./])(02|2)([-./])(\d{4}))|((29)(\.|-|\/)(02|2)([-./])([02468][048]00))|((29)([-./])(02|2)([-./])([13579][26]00))|((29)([-./])(02|2)([-./])([0-9][0-9][0][48]))|((29)([-./])(02|2)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02|2)([-./])([0-9][0-9][13579][26]))),Date in DD/MM/YYYY or D/M/YYYY format.
2279,Name,[-'a-zA-Z],"Best For First Name or Middle Name or Last Name

This Expression Allows only alphabets with apostrophe (').
"
2280,Any word but xx and yy,(?!\b(xx|yy)\b)\b[\w]+\b,Matches any word except these from alternation (xx|yy|...). Works in JavaScript
2281,C++/C# identifier,^[a-zA-Z_]{1}[a-zA-Z0-9_]*$,This expression validates for valid C# or C++ identifier
2282,Folder Path Validation (local + netowork) for windows,"^(((\\\\([^\\/:\*\?""\|<>\. ]+))|([a-zA-Z]:\\))(([^\\/:\*\?""\|<>\. ]*)([\\]*))*)$","I'm very new to reg exp
I've given a try ...

for C#
@""^(((\\\\([^\\/:\*\?""""\|<>\. ]+))|([a-zA-Z]:\\))(([^\\/:\*\?""""\|<>\. ]*)([\\]*))*)$""

It worked for me ...
Make neccessary changes as required"
2283,Percent 0.00-100.00,"^100$|^100.00$|^\d{0,2}(\.\d{1,2})? *%?$",Allows percent values from 0 to 100 without the % sign.  Can be used with up to 2 decimal places or without any.  Also works in ASP.NET regular expression validator control.
2285,Windows Drive Letter & UNC Path,"^((\\\\[a-zA-Z0-9-]+\\[a-zA-Z0-9`~!@#$%^&(){}'._-]+([ ]+[a-zA-Z0-9`~!@#$%^&(){}'._-]+)*)|([a-zA-Z]:))(\\[^ \\/:*?""""<>|]+([ ]+[^ \\/:*?""""<>|]+)*)*\\?$","This expression was written for C#, and as such you should just be able to drop it in.
It matches Windows paths, be they the drive letter version or the UNC version. It was not written to specifically match filenames, but it will in most cases anyway.
Be aware that Windows has a maximum path+filename length (260 chars on XP) and this regular expression does not check for this. 
This has been tested against large datasets."
2286,Windows Filename,"^[^ \\/:*?""""<>|]+([ ]+[^ \\/:*?""""<>|]+)*$","This was written for C# and so you should just be able to drop it into your C# program.
Although you can create files with leading and trailing spaces through non-GUI means, the Windows GUI itself eats those spaces if you try to rename the file. For this reason I made the decision to consider file names with leading and trailing spaces invalid.
This has been tested against large data sets."
2287,Mysql Date Validator - Brazilian format,^([1-9]|0[1-9]|[12][0-9]|3[01])(-|/)(([1-9]|0[1-9])|(1[0-2]))(-|/)(([0-9][0-9])|([0-9][0-9][0-9][0-9]))$,"Brazilian format for date validating in MySql UDF.

Formato brasileiro para valida&#231;&#227;o de data em MySql UDF.

*** Formatos aceit&#225;veis:
dd/mm/yyyy
dd-mm-yyyy
dd-mm-yy
d-m-yy
"
2288,Bible Verse Search/Validator,"(?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon).?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*(?:;\s*(?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon)?.?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*)*",This RE locates and/or validates standard Bible verse notation.
2289,Strip HTML tags with exceptions,<\/*?(?![^>]*?\b(?:a|img)\b)[^>]*?>,This regex will match all HTML tags except 'a' tags or 'img' tags. You can edit the list of exclusions as you see fit. I use this regex to strip all HTML tags from source data except anchor tags and image tags.
2290,Strip HTML tags and content between,<(script|style)[^>]*?>(?:.|\n)*?</\s*\1\s*>,This regular expression will match only <script> and <style> tags and all content between them. Use this with regex.replace to strip script blocks and style blocks from HTML source.
2291,Days of the Year,^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-3]{1}[0-6]{1}[0-5]{1}$|^365$,This expression allows you to select 1-365 as a numeric value for the days of the year.  Must be between 1 and 365 and must be numeric
2292,c++ function finder,"^.*[_A-Za-z0-9]+[\t ]+[\*&]?[\t ]*[_A-Za-z0-9](::)?[_A-Za-z0-9:]+[\t ]*\(( *[ \[\]\*&A-Za-z0-9_]+ *,? *)*\).*$",This (while not perfect) locates c++ function declarations.  Useful for working with large source files
2293,Social Security Number,^(\d{3}-\d{2}-\d{4})|(\d{3}\d{2}\d{4})$,This will accept SSN in the form of 123-45-6789 OR 123456789.
2296,Non localised currency format,^(\d?)*(\.\d{1}|\.\d{2})?$,Expression to validate currency formatted numbers without the currency symbol
2297,U.S. social security number,(\d{3}\-\d{2}\-\d{4}),pattern match for U.S. social security number
2298,Valid Usernames,^([a-zA-Z])[a-zA-Z_-]*[\w_-]*[\S]$|^([a-zA-Z])[0-9_-]*[\S]$|^[a-zA-Z]*[\S]$,"Will verify if the text is is in a valid user name format like: is alphanumeric, starts with an alphabet and contains no special characters other than underscore or dash."
2299,Single or Multiple Phone Numbers,"^([0-9]{12},)+[0-9]{12}$|^([0-9]{12})$",Verifies if it is a 12 digit phone number or a list of comma separated 12 digit phone numbers.
2300,Address/Phone,"^(\+{1}|00)\s{0,1}([0-9]{3}|[0-9]{2})\s{0,1}\-{0,1}\s{0,1}([0-9]{2}|[1-9]{1})\s{0,1}\-{0,1}\s{0,1}([0-9]{8}|[0-9]{7})","Gulf Area and Middle East Phone Number, must include the country code which consists of 2 or 3 digits and prefixed with '+' or '00', Area code consists of 1 or 2 digits and finally phone number consists of 7 or 8 digits, you can separate between different section using space or '-'"
2302,Parentheses Quote ,"(\("")([0-9]*)(\"")","Very basic, but couldn't find it, so from one Regex noob to another... 
Needed to replace quotes around giant SQL INSERT unique numeric field; that was in quotes... In DW, FYI, I replaced with: ($2  $2 being the second sub exp."
2303,End Parentheses Price Quote Stripper,"("")([0-9]*)("","")([0-9]*)(""\))","This was made to change non-decimal prices at the end of a huge SQL Insert... To use to replace in DW (without quotes) use sub expression like: $2,$4)"
2304,BAPLIE to COPARN segment,"(LOC[^']*')(GID[^']*')?(GDS[^']*')?(FTX[^']*'){0,9}(MEA[^']*'){1,9}(DIM[^']*'){0,9}(TMP[^']*')?(RNG[^']*')?(LOC[^']*'){0,9}(RFF[^']*')((EQD[^']*')(EQA[^']*'){0,9}(NAD[^']*')?){0,3}",Match Segments 2 and 3 of BAPLIE file.  May be repeating.
2305,Validate string prefix,"^([a-zA-Z]{5})([a-zA-Z0-9-]{3,12})","Validate: First five characters are letters; characters six-17 are letters, numbers, or hyphen; string length is eight characters minimum, 17 characters maximum"
2306,Credit Card Expiration Date Validator,^((0[1-9])|(1[0-2]))[\/\.\-]*((0[8-9])|(1[1-9]))$,"Validates major credit card expiration dates in MM/YY, MM.YY, MM-YY, or MMYY. Year range is 08-19."
2307,date expression,"^(((((0?[1-9]|[12]\d|3[01])[-/]([0]?[13578]|1[02]))|((0?[1-9]|[12]\d|30)[-/]([0]?[469]|11))|(([01]?\d|2[0-8])[-/]0?2))[-/]((20|19)?\d{2}|\d{1,2}))|(29[-/]0?2[-/]((19)|(20))?([13579][26]|[24680][048])))$","matches dates in the format day/month/year.
supports / and - charachters.
easily modified to suit your needs.
handles leap years."
2309,Date with Leap year verification,^(((0?[1-9]|1[012])/(0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\d)\d{2}|0?2/29/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$,This Expression verifies all the valid date in the US Date Format.It also checks the leap year.we can use this expression with or with out the prefix of zero in the date column and month column Eg[01/02/2008 or 1/2/2008].It accepts date which are greater than the year 1900.I can assure that this will be useful for all the developers who are searching for Date entry
2310,Chilean home phone number,^((\(\d{3}\) ?)|(\d{3}-)|(\(\d{2}\) ?)|(\d{2}-)|(\(\d{1}\) ?)|(\d{1}-))?\d{3}-(\d{3}|\d{4}),"Esta es la expresion regular adaptada por mi para validar telefonos fijos chilenos de cualquier compa&#241;ia, espero sirva a alguien"
2311,Date With / and Month Name,^(3[0-1]|2[0-9]|1[0-9]|0[1-9])[\/](Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)[\/]\d{4}$,"This regular expressions matches dates of the form XX/XXX/YYYY where XX can be 1 or 2 digits long, XXX can be JAN/Jan/jan(Month name in 3 char) and YYYY is always 4 digits long."
2312,Multiple e-Mail Validator,"^(\w+([_.]{1}\w+)*@\w+([_.]{1}\w+)*\.[A-Za-z]{2,3}[;]?)*$","This Expression will help you in Validating Multiple e-Mail IDs in a single line seperated by "";"""
2313,Validate numbers with commas,"^(\d{1,3},)?(\d{3},)+\d{3}(\.\d*)?$|^(\d*)(\.\d*)?$",Validates numbers with commas.
2315,Matches System.Math Functions for the .NET framework,(Sqrt|Acos|Asin|Atan|Atan2|Ceiling|Cos|Cosh|Floor|Sin|Tan|Sinh|Tanh|Round|Log|Log10|Exp|Pow|Abs|Truncate|IEEERemainder|Max|Min|Sign|BigMul)(?:\(),Matches the function name (case-sensitive) followed by the opening parenthesis. Does not capture the opening parenthesis.
2316,Finds literals (values) in a math expression,(^[\d\.]+)|(?:\W)([\d\.]+),Matches digits (including decimals) starting at beginning of expression or after the beginning but not directly following a letter.
2318,Email Validations,"^([a-zA-Z0-9][a-zA-Z0-9_]*(\.{0,1})?[a-zA-Z0-9\-_]+)*(\.{0,1})@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|([a-zA-Z0-9\-]+(\.([a-zA-Z]{2,10}))(\.([a-zA-Z]{2,10}))?(\.([a-zA-Z]{2,10}))?))[\s]*$",Validates almost all email addresses. Tested and running fine on a major web portal
2319,Only Characters,/^[a-zA-Z\s]+$/,Accepts only characters in small and caps.
2320,farsi lang ,/([^\x00-\xFF]\s*)/u,Matches persian(farsi) charctes from latin
2321,html to uppercase,/(<\/?)(\w+)([^>]*>)/e,"Returns string with all alphabetic characters converted to uppercase. 
in php programing you can use 
preg_replace(""/(<\/?)(\w+)([^>]*>)/e"", 
             ""'$1'.strtoupper('$2').'$3'"", 
             $html_body) "
2322,html to lowercase,/(<\/?)(\w+)([^>]*>)/e,"Returns string with all alphabetic characters converted to lowercase.
in php programing you can use 
preg_replace(""/(<\/?)(\w+)([^>]*>)/e"", 
             ""'$1'.strtolower('$2').'$3'"", 
             $html_body) "
2323,UK Telephone,^(\+44\s?|0)(7?|1?|2?)\d{3}\s?\d{3}\s?\d{3}$,Matches UK landline and mobile telephone numbers with the optional '+44' country code
2324,0 - 100 Percentage ,"^100(\.0{0,2})? *%?$|^\d{1,2}(\.\d{1,2})? *%?$","Match any percentage entered between 0.00 and 100.00%, includes up to 2 decimal places. Percent sign is optional"
2325,Percentages between -100 and +100 %,"^[+-]? *100(\.0{0,2})? *%?$|^[+-]? *\d{1,2}(\.\d{1,2})? *%?$",Match any percent from -100.00% to +100.00% up to 2 decimla places. Percent sign is optional
2326,Currency,"^[+-]? *(\$)? *((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{0,2})?$","Full currency testing, allows up to 2 decimal places.  Checks for corect formatting with commas etc, and allows negative amounts"
2330,Venezuelan Cedula de Identidad,"^[[V|E|J|G]\d\d\d\d\d\d\d\d]{0,9}$","Regexp to validate Venezuelan Id number Or Cedula de identidad.
"
2331,wwwwww,wwwwwwww,wwwwww
2332,Exclude a string,^([^S]|S[^E]|SE[^P]).*,"Matches everything except lines that begin with SEP.

Now I just need to figure out how to exclude a string that appears in the middle of a line."
2333,24 hour time,^([0-1]?[0-9]|[2][0-3])[:|.]([0-5][0-9])$,"Based on Morten Henriksen's expression, I just added the check for a . as well as a :"
2334,To validate the File Type for a FileUploader,^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+(.pdf)$,"You can use this to check the valid file type you have given to the last in the expression
like
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+(.pdf)$
This will accept .pdf only
OR
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+((.pdf)|(.doc))$
This will accept .pdf and .doc
OR
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+((.pdf)|(.doc)|(.txt))$
This will accept .pdf , .doc and .txt"
2335,24 hour time,^([0-1]?[0-9]{1}|2[0-3]{1}):([0-5]{1}[0-9]{1})$,"This expression will validate if a string represents a time in 24 hour format. 
The expression will evaluate the string from start to finish. It will not accept 24:00, use 00:00 instead."
2336,COPRAR to COPARN mapping,"((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?",EDI mapping from COPRAR to COPARN
2337,2 literal spaces followed by a digit,"""^  \d.*$""",2 literal spaces followed by a digit followed by anything to the end of the line
2338,TLD from URL,"([.])([a-z,1-9]{3,4})(\/)",Returns the TLD from a URL.
2339,Currency amount with or without $ and with commas,"^\$?\d{1,2}\,\d{3}?\,\d{3}?(\.(\d{2}))$|^\$?\d{1,3}?\,\d{3}?(\.(\d{2}))$|^\$?\d{1,3}?(\.(\d{2}))$","Needed to verify a currency amount entered has commas and two decimal spaces to the right. This has a range between 1.99 to the tens of millions. If you want to make the decimal side optional, add a question mark before the final $ in each expression."
2340,Dates of the form YYYY/MM/DD,"^((19\d{1}\d{1})|(2\d{3}))\/((1[0-2]{1})|(0[1-9]{1}))\/((0[1-9]{1})|([1-2]\d{1})|(3[0,1]{1}))",This regular expression matches dates of the form YYYY/MM/DD from 1900/01/01 to 2999/12/31
2341,check,"""^[\\s\\<\\>]*$""",string 
2342,DECIMAL CHECK (Max 2 digit after Decimal ),"^\d+(?:\.\d{0,2})?$","This will validatet the Number for Max Tow decimal place after a number.. it will validate like 12, 12.1, 12.23; but it will invalidate 12.326"
2343,US State Abbreviation,[A-Z][A-Z],Matches capitalized US state abbreviations.
2344,Url pattern matching,"(http):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+(\\.[\\w\\-_]+)(\\/)([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#]+)(\\/)((\\d{8}-)|(\\d{9}-)|(\\d{10}-)|(\\d{11}-))+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?+html^])?","match http urls in format
http://kamitsinha.com/regex/191929393-latestnews.htm"
2345,Pattern matching for next page,(\d)+\<\/a\>,While screen scraping to validate if Next page exists
2347,Ultimate PO BOX finder,[p|P][\s]*[o|O][\s]*[b|B][\s]*[o|O][\s]*[x|X][\s]*[a-zA-Z0-9]*|\b[P|p]+(OST|ost|o|O)?\.?\s*[O|o|0]+(ffice|FFICE)?\.?\s*[B|b][O|o|0]?[X|x]+\.?\s+[#]?(\d+)*(\D+)*\b,"Modified version- to capture the PO BOX based on user input on the website - It will not include any Rural Route
or any University Box"
2348,test,"\d{1,3}.\d{1,4}\d{1,8}",test
2349,Href matching,"href\s*=\s*\""((\/)([i])(\/)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#]+)*)\""","pattern matching for ""href=\ddd\ss080978"""
2350,US Zipcode Validation,^[0-9]{5}$,Zipcode should be of 5 numerics
2351,alphanumeric with blank spaces,"""^\\w*$""",dakjlas
2352,Simple US Phone Numbers,(1)?-?\(?\s*([0-9]{3})\s*\)?\s*-?([0-9]{3})\s*-?\s*([0-9]{4})\s*,"A very simple regex to parse 10-digit US phone numbers.  Captures the leading 1 in $1, the area code in $2, the 3-digit prefix in $3, and the four-digit postfix in $4.

This expression DOES allow for reserved area codes (001,etc) which are not typically in use."
2353,Valid Email,"^[a-z0-9_.-]*@[a-z0-9-]+(.[a-z]{2,4})+$","Validates your average email, it will not allow two periods to be placed adjacent to one another.

Do note that there is no perfect expression."
2354,Polish mobile phone numbers,^(\+48\s+)?\d{3}(\s*|\-)\d{3}(\s*|\-)\d{3}$,Supported: +48 prefix (optional); separating elements with hyphen or spaces
2356,UK Postcode District,"([A-PR-UWYZa-pr-uwyz]([0-9]{1,2}|([A-HK-Ya-hk-y][0-9]|[A-HK-Ya-hk-y][0-9]([0-9]|[ABEHMNPRV-Yabehmnprv-y]))|[0-9][A-HJKS-UWa-hjks-uw]))","Matches the first part of a UK Postcode (known as a postcode district).

Case insensitive.

Doesnt match:
GIR # the postcode for the formerly Post Office-owned Girobank is GIR 0AA.
SAN # the postcode for correctly addressed letters to Father Christmas is SAN TA1"
2357,HTML tag,<(.*?)[\s>].*?<\/\1>,match the content and tag of HTML
2358,Define Maximum length to a TextBox,"^(.|\r|\n){1,10}$","This expression can be use to define the maximum length to a textBox.

U can change the maximum character by replacing the last numeric value that is 10 in my example.
Just change this number to your desired number like
^(.|\r|\n){1,10}$   : for max 10 character 
^(.|\r|\n){1,20}$   : for max 20 character 


"
2359,date validations,date,"
        if (RadDatePicker1.SelectedDate == System.DateTime.Now.Date)
        {
            string strconnection;
            strconnection = ConfigurationSettings.AppSettings[""ConnectionString""].ToString();
            SqlConnection cn = new SqlConnection(strconnection);
            SqlCommand cmd = new SqlCommand(""empattendancedetails"", cn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(""@empid"", SqlDbType.Int).Direction = ParameterDirection.Input;
            cmd.Parameters.Add(""@date"", SqlDbType.DateTime).Direction = ParameterDirection.Input;
            cmd.Parameters.Add(""@intime"", SqlDbType.DateTime).Direction = ParameterDirection.Input;
            cmd.Parameters.Add(""@outtime"", SqlDbType.DateTime).Direction = ParameterDirection.Input;
            cmd.Parameters[""@empid""].Value = Session[""loginid""];
            cmd.Parameters[""@date""].Value = RadDatePicker1.SelectedDate.ToString();
            cmd.Parameters[""@intime""].Value = RadTimePicker1.SelectedDate.ToString();
            cmd.Parameters[""@outtime""].Value = RadTimePicker2.SelectedDate.ToString();
            cn.Open();
            cmd.ExecuteNonQuery();
            cn.Close(); Response.Write(""Record Added."");

        }
        else
            Response.Write(""enter todays date"");
    }"
2360,examples on storedprocedures,getting username from empid,"LTER PROCEDURE [dbo].[usernamecheck]
  @username varchar(50),
  @loginID int = 0 OUTPUT
AS
  SELECT @loginID = empid from emp
  WHERE username=@username 

if @@ROWCOUNT < 1
  SELECT @loginID = 0 


select @loginID
"
2361,Dutch postal codes,\b[1-9]\d{3}\ +[A-Z]{2}\b,"Dutch postal codes are ranged from ""1000 AA"" to ""9999 ZZ""."
2362,User name,(^([\w]+[^\W])([^\W]\.?)([\w]+[^\W]$)),"My first REGEX pattern. Matches all alphanumerics + underscore (_) + dot (.)
"
2363,European Format Currencies,"^(-?)(,?)(\d{1,3}(\.\d{3})*|(\d+))(\,\d{2})?$","Allow Currencies of European origin in the format of 
xx.xxx.xxx,xx"
2365,,"^(19|20)[\d]{2,2}$",There may be requirements where we need to validate year ranges from certain period. Above mentioned pattern will validate years between 1900 - 2099
2366,Numeric Match,[0-9]{7}[1-9]|[1-9]{8},"Validates the entered value in the following scenario. 
1) Should have atleast eight digits.
2) Value should not have only zeor's.



Note: You have to limit the number of characters in the Front end part."
2367,Simple E-mail Regex,"^[a-zA-Z0-9._\-]+@[a-z0-9\-]+(\.[a-z]+){1,}$","Matches simple e-mail addresses such as me@domain.com, me@domain.co.uk, but does not place any restrictions on TLDs other than they must be lower case and alphabetic.  a-z, A-Z, 0-9, ., _, and - are all allowed on the left side of @."
2368,Pattern Title ,^([a-zA-Z].*|[1-9].*|[:./].*)\.(((a|A)(s|S)(p|P)(x|X)))$,"Regular expression to limit types of files accepted. This example matches .aspx files only. 
This is the extended virsion of Ramon Hildreth  for asp.net files. "
2369,Min Three Letters Address,"^[a-zA-Z0-9]+[\s]*[a-zA-Z0-9.\-\,\#]+[\s]*[a-zA-Z0-9.\-\,\#]+[a-zA-Z0-9\s.\-\,\#]*$","US Addresses validation having atleast 3 characters ignoring any spaces. Can have hash ""#"" comma "","" dash ""-"" dot ""."" but cannot start with these."
2370,U.S. Phone Number,"1?(?:[.\s-]?[2-9]\d{2}[.\s-]?|\s?\([2-9]\d{2}\)\s?)(?:[1-9]\d{2}[.\s-]?\d{4}\s?(?:\s?([xX]|[eE][xX]|[eE][xX]\.|[eE][xX][tT]|[eE][xX][tT]\.)\s?\d{3,4})?|[a-zA-Z]{7})","More complete than other patterns I could find here. Matches U.S. Phone numbers with various formats.  Invalid area codes (that start with a 0 or 1) are excluded, as well as invalid exchanges (that start with 0).  Allows, alphabetical exchange+local parts, and many extension notations. Dash and dot delimiters allowed except adjacent to a parenthetical area code. Letters may be used in place of any numbers except the country code and area code."
2371,Check Iranian's Mobile Numbers,(^(09|9)[1][1-9]\\d{7}$)|(^(09|9)[3][12456]\\d{7}$),"This Regular Expression Chack Matching Persian Mobile Numbers
It is Checking MCI,MTN Irancell and Talya Operators
For Example In C#.NET:
Regex.IsMatch(MobileNumber, ""(^(09|9)[1][1-9]\\d{7}$)|(^(09|9)[3][12456]\\d{7}$)"");
"
2372,Get Plain Text From Html (Remove Html Tags),<[^>]*>,"This Regex Will Remove All Html Tags And Return Simple Plain Text .
For Example In C#.NET :
Regex.Replace(Html, ""<[^>]*>"", string.Empty);"
2373,Check Farsi Unicode Character,[\u0600-\u06FF],"This Regex chceck an input string for persian unicode character
Note that it not work in javascript
For Example In C#.NET:
 Regex.IsMatch(Text, ""[\u0600-\u06FF]"");"
2374, WOW Gold, WOW Gold,"

www.powerleveling2000.com is the professional website for <a 
href=""http://www.powerleveling2000.com""><strong>Wow power leveling</strong></a>. We have been in 
wow power leveling service for over 3 years and made so many customers be our friends. 
Professional wow powerleveling, fast, cheap and secure service. We power level your character 
according to your special requirements with no extra charges or hidden fees. Help you get your 
favor is our goal. And we are so happy that customers trust us because we upgrade your toons by 
experience levelers only. Enjoy World of Warcraft, Enjoy our service of World of Warcraft power 
leveling.
Easy 
If you want to be the most powerful in game, you should have the enough <a 
href=""http://www.powerleveling2000.com/WowGold.aspx""><strong>WOW Gold </strong></a>then you can 
buy the best weapons, equipment, etc. But Farming WOW Gold is very boring and waste a lot of time. 
Now, you can Buy WOW Gold from us, just one minute, you will be rich in WOW. 
Fast 
If you have bought gold from others before, you may know that the deliver time of WOW Gold is too 
long. But now you are visiting Euwowgold.com, we have own farmers, and we are not middleman, we 
can give you the gold as soon as possible, face to face or mail, choose you like. 
Reliable 
We farm the WOW Gold by manual, no bots, no cheats, no hacks. We have the 24*7*365 Online Support. 
You can contact us anytime via Live Chat, E-mail, IM and Telephone. 
When ordering for a wow power leveling service, please bear in mind that...
- Your account will be safe with us.
- Your account is fully secure. 
- We will not take any of your equipment or expend any of your gold. 
- While leveling your character, our master players will not talk to anyone else.
- Our goal is to start all customer orders within 1 hour. In fact, most customer orders was 
started within 1-2 hours. "
2375,wow gold ,wow gold ,"www.powerleveling2000.com is the professional website for <a 
href=""http://www.powerleveling2000.com""><strong>Wow power leveling</strong></a>. We have been in 
wow power leveling service for over 3 years and made so many customers be our friends. 
Professional wow powerleveling, fast, cheap and secure service. We power level your character 
according to your special requirements with no extra charges or hidden fees. Help you get your 
favor is our goal. And we are so happy that customers trust us because we upgrade your toons by 
experience levelers only. Enjoy World of Warcraft, Enjoy our service of World of Warcraft power 
leveling.
Easy 
If you want to be the most powerful in game, you should have the enough <a 
href=""http://www.powerleveling2000.com/WowGold.aspx""><strong>WOW Gold </strong></a>then you can 
buy the best weapons, equipment, etc. But Farming WOW Gold is very boring and waste a lot of time. 
Now, you can Buy WOW Gold from us, just one minute, you will be rich in WOW. 
Fast 
If you have bought gold from others before, you may know that the deliver time of WOW Gold is too 
long. But now you are visiting Euwowgold.com, we have own farmers, and we are not middleman, we 
can give you the gold as soon as possible, face to face or mail, choose you like. 
Reliable 
We farm the WOW Gold by manual, no bots, no cheats, no hacks. We have the 24*7*365 Online Support. 
You can contact us anytime via Live Chat, E-mail, IM and Telephone. 
When ordering for a wow power leveling service, please bear in mind that...
- Your account will be safe with us.
- Your account is fully secure. 
- We will not take any of your equipment or expend any of your gold. 
- While leveling your character, our master players will not talk to anyone else.
- Our goal is to start all customer orders within 1 hour. In fact, most customer orders was 
started within 1-2 hours. "
2376,Indian PAN,^[A-Z]{5}[0-9]{4}[A-Z]{1}$,Allow entering Indian Permenant Account Number allocated by Income Tax Authority
2377,Canadian Provinces,\b(?:AB|ALB|Alta|alberta|BC|CB|British Columbia|LB|Labrador|MB|Man|Manitoba|N[BLTSU]|Nfld|NF|Newfoundland|NWT|Northwest Territories|Nova Scotia|New Brunswick|Nunavut|ON|ONT|Ontario|PE|PEI|IPE|Prince Edward Island|QC|PC|QUE|QU|Quebec|SK|Sask|Saskatchewan|YT|Yukon|Yukon Territories)\b,"Returns ungrouped match on Canadian Province Code, new and old or full province name"
2378,delete,delete,delete
2379,Awesome US phone number matching,"(?:\+?1[ .*-]?)?(?:\(? ?)?\d{3}(?: ?\)?)? ?(?:\*|(?:\.|-){1,2})? ?\d{3} ?(?:\*|(?:\.|-){1,2})? ?\d{4} ","This regex matches US phone number formats that I found to be commonly used.
This regex is best used on scanning text. If html is present, strip out the html first."
2380,Buy WoW Gold,Buy WoW Gold,"www.powerleveling2000.com is the professional website for <a 
href=""http://www.powerleveling2000.com""><strong>Wow power leveling</strong></a>. We have been in 
wow power leveling service for over 3 years and made so many customers be our friends. 
Professional wow powerleveling, fast, cheap and secure service. We power level your character 
according to your special requirements with no extra charges or hidden fees. Help you get your 
favor is our goal. And we are so happy that customers trust us because we upgrade your toons by 
experience levelers only. Enjoy World of Warcraft, Enjoy our service of World of Warcraft power 
leveling.
Easy 
If you want to be the most powerful in game, you should have the enough <a 
href=""http://www.powerleveling2000.com/WowGold.aspx""><strong>WOW Gold </strong></a>then you can 
buy the best weapons, equipment, etc. But Farming WOW Gold is very boring and waste a lot of time. 
Now, you can Buy WOW Gold from us, just one minute, you will be rich in WOW. 
Fast 
If you have bought gold from others before, you may know that the deliver time of WOW Gold is too 
long. But now you are visiting Euwowgold.com, we have own farmers, and we are not middleman, we 
can give you the gold as soon as possible, face to face or mail, choose you like. 
Reliable 
We farm the WOW Gold by manual, no bots, no cheats, no hacks. We have the 24*7*365 Online Support. 
You can contact us anytime via Live Chat, E-mail, IM and Telephone. 
When ordering for a wow power leveling service, please bear in mind that...
- Your account will be safe with us.
- Your account is fully secure. 
- We will not take any of your equipment or expend any of your gold. 
- While leveling your character, our master players will not talk to anyone else.
- Our goal is to start all customer orders within 1 hour. In fact, most customer orders was 
started within 1-2 hours. 
"
2381,MIME Media Type,/^(application|audio|example|image|message|model|multipart|text|video)\/[a-zA-Z0-9]+([+.-][a-zA-z0-9]+)*$/,"Checks for properly formatted Mime-Types. Checks that the Content-Type (before the '/') is one registered with IANA. No spaces allowed.
"
2382,Patern Title,"^(?=.*\d)(?=.*[a-z])([a-z0-9]{8,25})$","Password matching expression. Password must be at least 8 characters,no more then 25 characters, must include at least 1 lower case letter and 1 numeric digit. Upper case, space and punctuation marks are not allowed. "
2383,Comma Separated String,"^\s*[a-zA-Z\s]+\,[0-9\s]+\s*$",its validating the string as shown in example(matches).
2384,,^(((\d|([a-f]|[A-F])){2}:){5}(\d|([a-f]|[A-F])){2})$|^(((\d|([a-f]|[A-F])){2}-){5}(\d|([a-f]|[A-F])){2})$|^$,"Designed to verify a MAC address with no spaces allowed, hex values separated by linux style separator "":"" or by windows style separator ""-"". Also empty string entry is allowed."
2386,allow small character alphabets,"name.matches(""a-z"")",to allow the only small letters.
2387,phone number,^((\(?\d{3}\)?(\s|-)?\d{3}(\s|-)?\d{4})|(N/A)|(n/a))$,"This will allow any format of a 10 digit phone number
It does not check to make sure the number is valid in any way!
It also allows for n/a and N/A."
2388,Czech telephone number,[^0-9]((\(?(\+420|00420)\)?( |-)?)?([0-9]{3} ?(([0-9]{3} ?[0-9]{3})|([0-9]{2} ?[0-9]{2} ?[0-9]{2})))|([0-9]{3}-(([0-9]{3}-[0-9]{3})|([0-9]{2}-[0-9]{2}-[0-9]{2}))))[^0-9|/],Regexp for czech telephone number format. Fix to bank account number
2389,zip code,^\d{5}(-\d{4})?$,This allows for a 5 digit or 9 digit zip code that uses a -
2390,UK Passport number,"^[0-9]{10}GBR[0-9]{7}[U,M,F]{1}[0-9]{9}$","The first field consist of 10 numbers, then 3 characters (GBP as its for UK passports), 7 numbers, 1 character and 7 numbers. The final field is for the 2 numbers at the right-hand end of the <<<<< symbols."
2391,UK Driving Licence,"^([A-Z]{2}[9]{3}|[A-Z]{3}[9]{2}|[A-Z]{4}[9]{1}|[A-Z]{5})[0-9]{6}([A-Z]{1}[9]{1}|[A-Z]{2})[A-Z0,9]{3}$","These are identified from the driving license as follows:
• 5 characters (made up of letters and 9's padded on right)
• 6 numbers
• 3 characters (made up of letters and 9's padded on right)
• 2 characters (either 9's or 0's)"
2392,International Passport,^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$,"• 9 characters made up of a combination of numbers and/or letters. Where less than 9 characters it will be padded out to the right with chevrons (<).
• 1 number
• 3 letters
• 7 numbers
• 1 letter
• 7 numbers
• An international passport will have up to 14 characters in this field (numbers and/or letters). If none exist or where less than 14 characters exist, the field will be padded out, but only to the right, with chevrons (<). You should input the data exactly as it is shown on the actual passport field, i.e. input all chevrons to the left of the characters and do not ignore or leave these as blank spaces. Where less than 14 characters, the field will be padded out to the right with chevrons (<), i.e. Z1234567<<<<<
• 1 number
• 1 number"
2393,Email,"^([0-9a-zA-Z]+(?:[_\.\-]?[0-9a-zA-Z]+)*[@](?:[0-9a-zA-Z]+(?:[_\.\-]?[0-9a-zA-Z]+)*\.[a-zA-Z]{2,}|(?:\d{1,}\.){3}\d{1,}))$","|| Only alphanum characters accepted at the beginning of the user name and domain name

|| Does not allow 2+ adjacent non-alphanum characters

|| IP address accepted as domain

|| 1+ chars accepted as user name or domain

"
2394,Dark Age of Camelot Friday Grab Bag,Dark Age of Camelot Friday Grab Bag,"As the name implies, the Friday Grab Bag is a collection of community questions taken from the official Dark Age of Camelot forums. Add some announcements into the mix and you have a good read.

Q. Is Quillan Muire in Muire's tomb supposed to drop any loot? It seems like he is the ""boss"" of the dungeon but she drops nothing different from his surrounding guards. I know he has a quest associated with her, but the other named Muires along that quest can drop items. Thanks!

A. With a quick check to the bags o'loot the Lady of the Jewels has good news for you: Quillan Muire does have a chance to drop a small amount of unique loot, but it is very rare.

Q. I have noticed that the blunt weapon given to druids by the trainer is called an ""Arch Mace"". But it is actually a hammer. Is it supposed to be a hammer and is mislabeled or is it a mace with the wrong graphic?

A. After a quick glance at the mace looking like a hammer, the Lady of the Jewels says you are absolutely correct: The names of these items do not seem to fit with their appearance in game. Keep an eye on future patch notes about a correction to the names of these Druid weapons. Thank you for the report!

Q. How do I add the guild ranks to the house friends list so I can set the different permission levels?

A. In one quick motion The Bearded Wonder found your answer: If you look at the feedback for /housefriend it is as follows:

Invalid Friend type.
Correct format is /housefriend player/guild/rank/account/all/class/race

If your guild rank is named ""test"" for example, you would type.

/housefriend rank test

Q. My question involves the Alchemy drop items. Why does the Ancient Crushed Focus Stone only drop one at a time, while the Ancient Troll Blood, Ancient Giant Blood, Ancient Mirror, Ancient Pure Mercury, and the Enriched Quicksilver drops off the same mobs in stacks of 5? The Ancient Necrotic Brain Fluid and the Ancient Lich Tooth will drop in stacks of 3. There doesn't appear to be a level variation between the drops, and they are all used with Alchemy of 1000+. Shouldn't they all be dropped in the same quantity?

A. The Lady of the Jewels thought about this a moment: The player brings up an excellent point. I will look into what can be done about normalizing the alchemy drops across the board in a future patch.

Q. I've been looking for a trophy mob - a pig called Jari. I've tried for many game-days to get it to spawn, either in the Abbey Farm or the Bandit Camp, by killing Wild Sows nearby. No luck so far. Is there any way you can confirm that it still exists or any advice you can offer?

A. The Lady of the Jewels smiled and exclaimed: Jari is quite the elusive pig! She can be found at either the field next to Vetusta Abbey, or to the northwest wandering among the red dwarves. Her chance to spawn is very rare, however, and she shares a chance with the other pigs in both areas. Try hunting the pigs in both locations to give Jari a chance to show herself.

Q. Upon deploying certain rams we've come across rams that you have to invite people on. I've asked many times in advice but to no avail. How do you invite people on a ram when it calls for an invitation? 

A. I interrupted a very serious conversation between The Bearded Wonder and the Blonde Gremlin about ninjas and pirates, the Blonde Gremlin in the middle of demonstrating a ninja move said: The command you need is /vinvite.

Q. I'm looking for some clarification on the rest xp you implemented in 1.94. The patch notes are not clear about whether any unused rest xp is lost when a character logs out. For example, I log in a character to craft a few items but do not do any hunting. Would the rest xp that character has already accumulated carry over to the next time he logs in? Or would it be reset?

A. As I read the question to The Bearded Wonder, he kept on nodding confidently at me, which kept me wondering if someone was standing behind me making funny faces. He said: The rest XP is kept so that it should be there the next time that character logs in.

ANNOUNCEMENTS

The May Focus Question Responses are now in! Our Team Leads submitted their responses and in turn we responded to them. Now all the responses have been responded to and you can see them here. Answers await you.

Oh Camelot Herald how I love thee! If you've noticed any changes to the Herald recently, that's because we've been doing some behind the scenes improvements. If you see any quirky things happen, please check back in a little while. If the problem persists, please send in Feedback under Herald Issues and describe the problem, please include the URL!

Are you ready San Diego? The Camelot Road Trip is heading to the west coast on Saturday, July 26th. Come join us as we answer your questions, hand out prizes and of course there will be some snacks to eat, just in case you're hungry. These events are so much fun, if you are in the area, come out and join us. Don't forget to RSVP so we can order enough snacks! The fun starts at 7:00pm PDT.

Have a great weekend everyone, I'll see you out in the frontiers.

"
2395,World of Warcraft Powerleveling,World of Warcraft Powerleveling,"World of Warcraft Powerleveling is our primary service! You can purchase our service at a much lower price than any of our competitors. <A href=""http://www.powerleveling2000.com/"">wow power leveling </A>We don't use any Bots or Macros to powerlevel your character. All of our employees are skilled World of Warcraft players, who personally powerlevel your character, to provide even more safety to your account. As we know, when you first start a game of World of Warcraft, you will be taken to your race's starting area. All the races except trolls and gnomes begin in a unique location. So it takes a long time to powerlevel a powerful character for many players, for the player's energy and time are limited. <A href=""http://www.powerleveling2000.com/"">wow power leveling </A>We will never involve your character in PKing, KSing or any other behavior that is frowned upon.In our forum,we report the orders' status each day,so you can check your order's status when you want.wow powerleveling, We present our processing time around 9:00am PST([Pacific Standard Time] is GMT-8) everyday,you can check your Condition during this time in our forum.If you want to know your status in another time ,please contract with our live help service.wow powerleveling.

Please let us do this task for you, <A href=""http://www.powerleveling2000.com/"">wow power leveling </A>  wow gold   one of our World of Warcraft powerlevelers work for you as a full- time job other than part-time. We will complete the wow power leveling in a very short time, and you can play the character at your desired level. During the progress of World of Warcraft powerleveling, you can get all information about your World of Warcraft powerleveling status anytime. wow power leveling "
2396,Local/UNC Path Discriminator,^[a-zA-Z]\:\\.*|^\\\\.*,Useful for determining whether a string constitutes a valid local or UNC path.  
2397,one Expression,^if\((\!\()*(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*(\>|\<|\>=|\<=|\=){1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*\)*((and|or){1}(\!\()*(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*(\>|\<|\>=|\<=|\=){1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*\)*)*\)then(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*else(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*end$,very long
2398,Block common public domains & validate email,\w+([-+.]\w+)*@(?!(hotmail|gmail|yahoo|msn|excite|lycos|aol|live)\.com$)\w+([-.]\w+)*\.\w+([-.]\w+)*,"Should you need to validate that an email address is correctly formmatted and need to block hotmail and gmail, this expression will do it for you.  Thanks to Sergei Z from regexadvice.com"
2399,Time HHMMSS,^((0[1-9]|1[0-9]|2[0-4])([0-5]\d){2})$,"Time, which reg express is very simple to use :)"
2400,CURP (Mexican Code),^[a-zA-Z]{4}\d{6}[a-zA-Z]{6}\d{2}$,Simple Expression to evaluate a Mexican CURP Code
2401,RFC (Mexican Code),"^[A-Za-z]{3,4}[0-9]{6}$",Mexican RFC code without Homonimia or separators
2402,RFC Homonimia (Mexican Code),^[0-9a-zA-z]{3}$,Mexican RFC Homonimia Code
2403,Oracle Like TimeStamp validator,^((((((0[1-9])|(1\d)|(2[0-8]))\.((0[123456789])|(1[0-2])))|(((29)|(30))\.((0[13456789])|(1[0-2])))|((31)\.((0[13578])|(1[02]))))\.\d{4})|((29)\.(02)\.\d{2}(([02468][048])|([13579][26]))))(\s((0\d)|(1\d)|(2[0-3]))\:([0-5]\d)\:([0-5]\d)\.\d{7})$,"Oracle like time stamp with format:
dd.MM.yyyy HH.mm.SS.xxxxxxx
Based on European full proved date format with easy changeable dot separator.
Optimized regular expresion."
2404,Match a string containing at least 2 numbers and at least 6 alphabetic,"(?=(.*\d.*){2,})(?=(.*[a-zA-Z].*){6,})",Check password containing at least x numbers and y alphabetic. Use look back expression (?= )
2405,US zip & Canadian postal codes,^ *([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[a-zA-Z]) *-* *(\d[a-zA-Z]\d) *$|^ *(\d{5}) *$|^ *(\d{5}) *-* *(\d{4}) *$,"Matches all valid US standard, US +4, and Canadian postal codes. Returns results for only either one of them, in groups, regardless of case or whitespace (even dashes)."
2406,INI-File section,\[\w+\]\s+((.*=.*\s+)*|[^\[]),"Matches a complete ini-file section
like: 

[dgd]
ghgh=123
[test]
jhygvc=agdjf"
2407,Regedit From  Name value,"([a-zA-Z0-9\u4e00-\u9fa5@_%]){3,20}$","mix3,max20,chinese ok,a-z ok A-Z 0k 0-9 ok,
custom ""@,_,%"" ok?"
2408,custom  the length of email,"^[\w-]{1,20}(\.[\w-]{1,20})*@[\w-]{1,20}(\.[\w-]{1,6}){1,4}$","very good check email exp.
can custom like this:
g@g.cn
^[\w-]{1,1}(\.[\w-]{1,1})*@[\w-]{1,1}(\.[\w-]{1,2}){1,1}$
Restrictions on the length of email"
2409,Ordnance Survey Grid Reference,^((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?$,Matches standard 0- to 10-figure (non-tetrad) Ordnance Survey of Great Britain (OSGB) Grid References
2410,Strict Phone,^\([0-9]{3}\)[0-9]{3}(-)[0-9]{4},"Only matches a single format

"
2411,mm/dd/yyyy hh:mm:ss Date Time,"^(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/][0-9]{4}(\s((0[1-9]|1[012])\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|]{2,2})))?$","I got a regex for date time from here, which had some bugs. so i referred a few regex from this site and created a regex which i tested and didnt find any errors. I will check again and update if required."
2412,Cheap WoW Power Leveling,Cheap WoW Power Leveling,"This is one of the best online leveling guides which provides a player with both destruction and order guide covering every race and stage. These two guides are very efficient as it gives a player the secrets to locating items for quests. Thus, you need not bother looking around for items, for all the cloak and dagger power leveling guides are covered in <a href="" http://www.wowlevelingus.com ""><strong>Wow power leveling</strong></a>. There are a lot of leveling guides sold on the net these days with the popularity of WoW continuing to wow its gamers and avid followers. If you want to power level in your own will and power without having someone to play your game, purchasing wow <a href=""http://www.iwowleveling.com""><strong> power leveling cheap </strong></a>
 guide 
"
2413,Positive Integers (Data type),"^(\d|\d{1,9}|1\d{1,9}|20\d{8}|213\d{7}|2146\d{6}|21473\d{5}|214747\d{4}|2147482\d{3}|21474835\d{2}|214748364[0-7])$","Matches any integer from 0 to 2147483647 (max Integer size for C#, Java, others)"
2414,Url without Querystring,((https?|ftp|gopher|telnet|file|notes|ms-help):((//)|(\\\\))+[\w\d:#@%/;$()~_\+-=\\\.&]*),"Modified URL RegExp that requires (http, https, ftp,gopher,telnet,file|notes,ms-help)://, A nice domain, and a decent file/folder string."
2416,Mobile number of India,(\+91(-)?|91(-)?|0(-)?)?(9)[0-9]{9},"This expression will be useful to check mobile 
number of India. This expression will check 
various types of number like number in local 
format or international number separated by 
hyphen(-) or not.
"
2417,Postal code or Pin code of India,([0-9]{6}|[0-9]{3}\s[0-9]{3}),This expression will be useful to check postal code or pin code of India. This expression will check postal code or pin code in two format. One is code is separated by space after 3 digit and another is code is written in 6 digit.
2418,"Anchor Tag, href, title and innerHTML (PHP)","#<a\s*(?:href=[\'""]([^\'""]+)[\'""])?\s*(?:title=[\'""]([^\'""]+)[\'""])?.*?>((?:(?!</a>).)*)</a>#i","Returns array of full A tag [0], href [1], title [2] and innerHTML [3]. href, title and innerHTML are optional in tag; will return empty if missing.
Test will only work using PHP preg_match_all or similar; I ask this site
 to add that option.
Credit goes to user prometheuzz. "
2419,URL from a data file (Fields separated by |),\|(http.*)\|(.*)$/ig,"ac80016-29181-12246003492|1224600413|ac8001629181-12246003492|M4.0-300-398598-1224600381630-721324|none|190.40.27.239|31,46,51,63,77,82,94,100
,110,150,353,357,521,891,1171,1352,1744,2700,3286,4482,4552,4568,5500,5526,5665,7258,8586,9109,9255,10016,10810,11693,11784,11819|Mozilla/4.0(com
patible;MSIE7.0;WindowsNT6.0;WOW64;SLCC1;.NETCLR2.0.50727;.NETCLR3.0.04506;.NETCLR1.1.4322;InfoPath.2)|http://www.univision.com/uv/music/1169286/Enrique_Iglesias/fotos|/html.ng/SITE=AUDIT&CHANNEL=PORTAL&SUBCHANNEL=POP&SECTION=IGLESIASENRIQUE&CONTENT=PHOTOGALLERY&PARTNER=UNIVISION&CLIENT=AR
"
2420,Address Parser,"^(\d{3,})\s?(\w{0,5})\s([a-zA-Z]{2,30})\s([a-zA-Z]{2,15})\.?\s?(\w{0,5})$",A quick and dirty expression for splitting up a generic street address
2421,Swiss Phone Number,"^(\+?)(\d{2,4})(\s?)(\-?)((\(0\))?)(\s?)(\d{2})(\s?)(\-?)(\d{3})(\s?)(\-?)(\d{2})(\s?)(\-?)(\d{2})",This regex will match various ways of entering a Swiss phone number along with the country code.
2422,Brazilian salary format,"^(\d{1}\.){0,1}\d{1,3}\,\d{2}$",Brazilian salary format between 0 and ten thousand with two decimal places
2423,uri expression,"^((ht|f)tps?://((([a-zA-Z0-9_\-]{2,}\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(:[0-9]+)?)$","matches uri's with either ips or domains. http, https, ftp, or ftps. Also matches ports"
2424,url bbcode,"\[url\]((ht|f)tps?://((([a-zA-Z0-9_\-]{2,}\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(:[0-9]+)?(/[a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~]*)?)\[/url\]","bbcode for urls. Works for http, https, ftp, ftps. Does both domains and ip address'. Works with ports, and folders/query string"
2425,Dni / Nie,^[A-z]?\d{8}[A-z]$,Dni-nie validator
2426,Date in MMYYYY format,(((0[123456789]|10|11|12)(([1][9][0-9][0-9])|([2][0-9][0-9][0-9])))),"Validates dates that are in month/year (MMYYYY) format without slashes, periods, dashes, or spaces.  No special characters or letters allowed.  MM values allowed are 01 thru 12.  YYYY values allowed are 1900 - 2999.

This is an adaptation of Felipe Albacete's MM/YYYY regular expression."
2427,dds,sdsd,sdsd
2428,UK telephone number match,(\(?\+44\)?\s?(1|2|3|7|8)\d{3}|\(?(01|02|03|07|08)\d{3}\)?)\s?\d{3}\s?\d{3}|(\(?\+44\)?\s?(1|2|3|5|7|8)\d{2}|\(?(01|02|03|05|07|08)\d{2}\)?)\s?\d{3}\s?\d{4}|(\(?\+44\)?\s?(5|9)\d{2}|\(?(05|09)\d{2}\)?)\s?\d{3}\s?\d{3},"Matches most common patterns for UK telephone numbers including +44 prefix , and with or without brackets. Covers 10 and 11 digit number ranges. Should be easy to modify for other number ranges."
2429,Hex Color Codes,^\#?[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$,Matches valid 3 or 6 character hex codes used for HTML or CSS. 
2430,Password 6 symbols and must containt non-captial letter and digit,"^(?=.{6,})(?=.*[0-9].*)(?=.*[a-z].*).*$",Password of 6 symbols. Must containt at leats one non-captial letter and at least digit digit
2431,Brazilian phone area code,^[1-9]\d$,Brazilian phone area code
2432,Single quoted string,('(?:(?:\\'|[^'])*)'|NULL),"This is useful to find single quoted strings in mysql dumps. 

It accepts \' inside the strings."
2433,12 Hour Time,((\d{0}[0-9]|\d{0}[1]\d{0}[0-2])(\:)\d{0}[0-5]\d{0}[0-9](\:)\d{0}[0-5]\d{0}[0-9]\s(AM|PM)),Matches hours 0-12:minutes 0-59:seconds 0-59 AM|PM
2434,Date,^\d{2}\/\d{2}\/\d{4}$ ,Date
2435,DateTime,^([0]\d|[1][0-2]\/([0-2]\d|[3][0-1])\/([2][0]\d{2})\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)?\s(AM|am|aM|Am|PM|pm|pM|Pm),Date Time with am/pm.
2436,Password Rule,"^(?=.*\d)(?=.*[a-zA-Z])(?!.*\s).{6,12}$","Tests that a password contains between 6 and 12 characters, and contains at least one number."
2437,Screen name,"^([\w][\w\-_\u0020]{4,18}[\w])$","Tests that a screen name begins and ends with an alphanumeric, and otherwise use alphanumeric characters, hyphens, and underscores.  Dictates length between 6 and 20 characters"
2438,Exclusion,(?s)(?i)^(?!^.*(dont match me).*$).*$,"will match anything EXCEPT  what you replace ""dont match me"" with.
you can replace the last .* with whatever criteria must be matched. example matches anything."
2439,Checking of currency on key down,"^(([1-9]{1}[0-9]{0,5}([.]{1}[0-9]{0,2})?)|(([0]{1}))([.]{1}[0-9]{0,2})?)$","This will allow your app to check currency during events such as key down
(set to decimal(8,2) only)"
2440,URL and Email addresses validation,"^(https?://)?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+\.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\.[a-z]{2,6})(:[0-9]{1,4})?((/?)|(/[0-9a-z_!  ~*'().;?:@&=+$,%#-]+)+/?)$","i found this regex usefull to checks for valid urls and email addresses, so i want to share to others. all credit goes to
http://www.osix.net/modules/article/?id=586"
2441,Gender Descriptor,^(?:m|M|male|Male|f|F|female|Female)$,Classic gender descriptor regex.
2443,Number lower than a value,^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-9]{1}[0-9]{1}[0-9]{1}$|^[1-9]{1}[0-9]{1}[0-9]{1}[0-8]{1}$,Validates a number lower than another value
2444,RUT and RUN,"^0*(\d{1,3}(\.?\d{3})*)\-?([\dkK])$","Matches any-length chilean RUT (Rol Unico Tributario) and RUN (RUT (Rol Unico Nacional), with or without dots as thousand separator, and with or without hyphen as verification digit separator. Grab 1st and 3rd match for best results. Delete the dots from 1st match
===
Calza con RUT chileno (Rol Unico Tributario) y RUN (RUT (Rol Unico Nacional) de cualquier largo, con o sin puntos separadores de miles, y con o sin guion como separador de digitos verificador. Considerar el 1er y 3er calce para mejores resultados. Eliminar los puntos del 1er calce"
2446,Version Number,"""\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}""","this is regular expression for version number upto 3 digits

"
2447,Numerical Strings w & w/o interpunctation,"(?:^(?:-)?(?:\d{1,3}\.(?:\d{3}\.)*\d{3})(?:\,\d+)?$|^(?:-)?\d*(?:\,\d+)?$)","This validation forces a strict niced or plain input of a numerical value.
The separation per thousand should be a (.) dot and must be used exactly or never to be valid."
2448,German numerical Strings w & w/o interpunctation,"(?:^(?:-)?(?:\d{1,3}\.(?:\d{3}\.)*\d{3})(?:\,\d+)?$|^(?:-)?\d*(?:\,\d+)?$)","This validation forces a value wheter to be strict niced or plain input of a numerical value.
The separation per thousand should be a (.) dot and must be used exactly or never to be valid.
Currently this RX validates german formed values... Just switch \, with \. and vice versa to get valid US results."
2450,Miltary Format Date: dd MMM yy,^[0-3]{1}[0-9]{1}[ ]{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec){1}[ ]{1}[0-9]{2}$,This will test to see if a date is formatted in the military style of 'dd MMM yy'
2451,sfd,sfs,sdfs
2452,Email,"^[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+(\.[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,})$",Validates rfc2822 for the mostpart
2453,Limited Number of Digits with 0 or 2 Decimal Places,"^[-]?\d{1,10}\.?([0-9][0-9])?$","Limits the max number of digits before the decimal point to 10; if decimal point is entered, requires entry of 2 decimal places. Allows for an optional negative sign. This pattern was derived to meet the maximum number of digits that can be stored in a decimal data type in SQL Server 2005, and allows for the way SQL Server appends the decimal places.  The column in the table is defined as decimal(12,2)."
2454,Phone Saudi Arabia,^(\d{5}-\d{2}-\d{7})*$,This is for Saudi phone 
2455,Multiples of 3,([0369]*([147][0369]*([147][0369]*[258])*[0369]*[147][0369]*([258][0369]*[147])*[0369]*[0369]*([258][0369]*[147])*[0369]*[147]|[258][0369]*([258][0369]*[147])*[0369]*[258][0369]*([147][0369]*[258])*[0369]*[0369]*([147][0369]*[258])*[0369]*[258]|[147][0369]*([147][0369]*[258])*[0369]*[258]|[258][0369]*([258][0369]*[147])*[0369]*[147])*[0369]*)*,Matches any sequence of decimal digits that represent a positive denary multiple of three.
2456,Digit-grouped numbers,"[+-]?(0|[1-9]([0-9]{0,2})(,[0-9]{3})*)(\.[0-9]+)?","Matches any positive or negative number, with or without decimal places, where the digits are grouped in threes seperated by commas."
2457,Scientific Notation,[+-]?\d(\.\d+)?[Ee][+-]?\d+,Matches a number using normalised scientific 'E' notation
2458,2-7 character palindrome words,(\w)(\w)?(\w)?\w?(?(3)\3)(?(2)\2)\1,"Matches any palindromic word of between 2 and 7 characters length. Best to use without case-sensitivity as ""Noon"" would not match otherwise because of the capitalisation."
2459,Trailing whitespace,[ \t]+$,Use in Java programming code to find trailing spaces (a checkstyle warning). Replace All with the empty string to remove them.
2460,Trailing whitespace,[ \t]+$,Use in Java programming code to find trailing spaces (a checkstyle warning). Replace All with the empty string to remove them.
2461,Unicode non-characters,[\uFDD0-\uFDEF],Matches any of the 66 unicode non-characters (guaranteed never to be used for encoding characters). Could be useful for checking if a document is text-renderable.
2462,Validate  HTM/HTML/ASP/ASPX ,^([a-zA-Z1-9]*)\.(((a|A)(s|S)(p|P)(x|X))|((h|H)(T|t)(m|M)(l|L))|((h|H)(t|T)(M|m))|((a|A)(s|S)(p|P))),"Validate  HTM/HTML/ASP/ASPX 
e.g. PageName.html"
2463,Validate URL,"(((ht|f)tp(s?):\/\/)(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;&quot;\'&lt;&gt;\n\r\t]+)([^\. \[\]\(\),;&quot;\'&lt;&gt;\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})","Validate URL
e.g. 
http://www.sample.com,
http://61.61.67.123/test.html"
2464,"Validate extension of files such as asp,aspx,xls,doc Extensions etc",([a-zA-Z1-9]*)\.(((a|A)(s|S)(p|P)(x|X))|((h|H)(T|t)(m|M)(l|L))|((h|H)(t|T)(M|m))|((a|A)(s|S)(p|P))|((t|T)(x|X)(T|x))|((m|M)(S|s)(P|p)(x|X))|((g|G)(i|I)(F|f))|((d|D)(o|O)(c|C))),"Validate Filename,PageName,ImageName etc
such as
filename.doc
filename.xls
pagename.aspx
pagename.asp
pagename.htm
pagename.html
Extensions 
etc ..."
2465,Us zip Code,^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$,abc
2466,JavaScript number,^[-+]?(?:\d+\.?|\.\d)\d*(?:[Ee][-+]?\d+)?$,"Validates that a string represents a javascript number (as defined by ECMAScript 3 Specs): integer (base-10) or floating
point including in the exponential notation. Doesn't match the empty string."
2467,URI,(((s*)(ftp)(s*)|(http)(s*)|mailto|news|file|webcal):(\S*))|((www.)(\S*)),"Matches all kind of URIs: mailto's, http(s), (s)ftp(s), ..., or just www addresses without protocol prefix."
2468,Full ISO8601 DateTime,\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:.\d{7})?[+|-](0[0-9]|1[0-2]):(00|15|30|45),Complete date-time format according to the ISO 8601 standard.
2469,DD-MM-YYYY Format Date Validator,^((29-02-(19|20)(([02468][048])|([13579][26])))|(31-((0[13578])|(1[02]))|(30-((0[13456789])|(1[0-2])))|(29-((0[13456789])|(1[0-2])))|(((0[1-9]|)|(1[0-9])|(2[0-8]))-((0[1-9])|(1[0-2])))-((19|20)[0-9][0-9])))$,This expression can be used to validate any date entered in correct DD-MM-YYYY format. Takes care of Leap Years too..
2470,Scientific Notation,^(-?[1-9](\.\d+)?)((\s?[X*]\s?10[E^]([+-]?\d+))|(E([+-]?\d+)))$,"Matches both normalized and E notations, with or without spaces or negative numbers. Make sure to use a case insensitive pattern matcher. Group 1 is the significand, and either group 5 or group 7 is the exponent (one or the other will be null, but never both)."
2471,Extract paragraphs,$(\n|\r\n),"Multi-line mode.
Extract each paragraph in the text. Using split."
2472,Extract sentences,\.\s|$(\n|\r\n),It does not work in sentences with abbreviations.
2473,Cisco dotted MAC notation,^([0-9a-f]{4}\.[0-9a-f]{4}\.[0-9a-f]{4})$,Matches against dumps of Cisco MAC address tables on newer versions of Cisco IOS.
2475,test,test,test
2476,User Name,^([a-zA-Z]+)[0-9]*\.*[a-zA-Z0-9]+$|^[a-zA-Z]+[0-9]*$,This Regex allows usernames with or without special char . 
2477,SPF checker,"^v=spf1[ \t]+[+?~-]?(?:(?:all)|(?:ip4(?:[:][0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?(?:/[0-9]{1,2})?)|(?:ip6(?:[:]([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})?(?:/[0-9]{1,2})?)|(?:a(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:mx(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:ptr(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exists(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:include(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:redirect(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exp(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|)(?:(?:[ \t]+[+?~-]?(?:(?:all)|(?:ip4(?:[:][0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?(?:/[0-9]{1,2})?)|(?:ip6(?:[:]([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})?(?:/[0-9]{1,2})?)|(?:a(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:mx(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:ptr(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exists(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:include(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:redirect(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exp(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|))*)?$","I use ""preg_match"" function on PHP with this expression.
Detects a valid SPF expression.

Warnings:
ip6 register only works in ""no compressed"" form.

""trim"" the string before use the expression (or add [ \t]+ after ^ and before $)"
2478,Email Address Format,"^([a-zA-Z0-9]+[._-])*[a-zA-Z0-9]+@(([a-zA-Z0-9]+|([a-zA-Z0-9]+[.-])+)[a-zA-Z0-9]+\.[a-zA-Z]{2,4}|([a-zA-Z]\.com))$",Validates format of email addresses including q.com but not q.net
2479,"Regular expression to validate ""..&..""",".*\"".*&.*\""","This regex validate a string that contain anything ""anything & anything"" i.e ""..&..""
"
2482,Zero or One of a certain character ANYWHERE in the string.,"^[^\*]{0,}[\*]{0,1}[^\*]{0,}$",An expression to validate a search string which accepts a wildcard(asterik) at most once anywhere in the string.
2483,BBCode Hyperlink Locator,"(\[url=?""?)([^\]""]*)(""?\])([^\[]*)(\[/url\])","This expression locates all BBCode style hyperlinks and breaks out the URL and linked text components. The URL attribute can be double-quoted or not, or not present at all. URL attributes (if present) are at $2, linked text is at $4."
2484,UK Phone with country code and area code,\+44\s\(0\)\s\d{2}\s\d{4}\s\d{4},Simple expression to validate a UK phone number including country code and area code.  Requires spacing.
2485,Ireland phone number and country code,\+353\(0\)\s\d\s\d{3}\s\d{4},This simple expression evaluates an Ireland phone number.  It requires the country code and dialing instructions for an international call plus spaces within the number. 
2486,Max length,"(^\d{1,3}([,]\d{3})*$)|(^\d{1,16}$)",Maxlength test
2487,Indian Mobile No ,"^((\+){0,1}91(\s){0,1}(\-){0,1}(\s){0,1}){0,1}9[0-9](\s){0,1}(\-){0,1}(\s){0,1}[1-9]{1}[0-9]{7}$",This expression is to validate indian mobile nos
2488,,"(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$",To validate a number of 10 digits before the decimal point and atmost 2 digits after it
2489,,"(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$",To validate a number of 10 digits before the decimal point and atmost 2 digits after it
2490,,"(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$",To validate a number of 10 digits before the decimal point and atmost 2 digits after it
2491,,"(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$",To validate a number of 10 digits before the decimal point and atmost 2 digits after it
2492,,"(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$",To validate a number of 10 digits before the decimal point and atmost 2 digits after it
2493,Percentage,Percentage allowing upto 4 places of decimal,"(?!^0*$)(?!^0*\.0*$)^\d{1,2}(\.\d{1,4})?$"
2494,US and Canada zip code validation,^(\d{5}-\d{4}|\d{5}|\d{9})$|^([a-zA-Z]\d[a-zA-Z]( )?\d[a-zA-Z]\d)$,Will match any valid US or Canada zip code
2495,Allow Decimal only,^\d*[0-9](|.\d*[0-9]|)*$,"Decimal like 123.23
123.1234
12345.456"
2496,Bible verse bbcode tags for multiple versions and languages (eregi not preg_match),"\[bible[=]?([a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*)\]((([0-9][[:space:]]?)?[a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]{1}([a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]?[a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]{1})?)([0-9]{1,3})(:{1}([0-9]{1,3})(-{1}([0-9]{1,3}))?)?)\[\\/bible\]","I used this to find bbcode [bible][/bible] tags.  It also allows for multiple versions with a default and other than english languages.

This is eregi, not preg_match"
2497,Disallow Special Characters in string,^[a-zA-Z0-9]+(([_][a-zA-Z0-9])?[a-zA-Z0-9]*)*$,"This Regular Expression. I have used with ASP.NET Regular expression for validating that input string should not have special characters(e.g. $,#,@ etc.]"
2498,Regx for strong password,"^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(^[a-zA-Z0-9@\$=!:.#%]+$)","This Expression will allow at least one small letter, one capital and one numeric digit. And length of the password is minimum of 8 and allowed special chars are pre defined(@\$=!:.#%),special chars are optional in password"
2499,eeee,"""^[A-Z0-9a-z'&()/]{0,1}[A-Z0-9a-z'&()/]{0,1}(([A-Z0-9a-z'&()/_-])|(\\s)){0,47}[A-Z0-9a-z'&()/]{1}$""",sdfsd
2500,Chennai Phone Numbers,"^(0)44[\s]{0,1}[\-]{0,1}[\s]{0,1}2[\s]{0,1}[1-9]{1}[0-9]{6}$",This expression will help you to match chennai telephone numbers. chennai bsnl telephone numbers will start from 2.
2501,http & www / subdomain check,"^(http\://){1}(((www\.){1}([a-zA-Z0-9\-]*\.){1,}){1}|([a-zA-Z0-9\-]*\.){1,10}){1}([a-zA-Z]{2,6}\.){1}([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*","This checks to see if a URL has http:// in it, and if it has either www or a subdomain before the domain and tld. Without (http\://) it only does the latter check. Replace http by (http|https|ftp) for other protocols. Still not happy about this: http://www.www.passshouldfail.com"
2503,mm/dd/yyyy 00:00,"/^(\d{1,2})(\/)(\d{1,2})(\/)(\d{4})(T|\s{1,2})(([0-1][0-9])|(2[0-3])):([0-5][0-9])+$/;",date and time. mm/dd/yyyy 00:00 format
2505,MMDD,^((0[123456789]|1[0-2])(0[1-3]|1[0-9]|2[0-9]))|((0[13456789]|1[0-2])(30))|((0[13578]|1[02])(31))$,Evaluates a date in the format of MMDD. Will evaluate month day ranges accurately with Feb going up to 29.
2506,JavaScript: American Names (No latin/cyrilic characters),"^(([A-Z]{1}[a-z]+([\-][A-Z]{1}[a-z]+)?)([ ]([A-Z]\.)){0,2}[ ](([A-Z]{1}[a-z]*)|([O]{1}[\']{1}[A-Z][a-z]{2,}))([ ](Jr\.|Sr\.|IV|III|II))?)$","Allows:

1) first last
2) first mi last
3) first mi mi last
4) first mi O'last
5) first mi mi O'last
6) first-first last
7) first-first mi last
8) first-first mi mi last
9) first-first mi O'last
10)first-first mi mi O'last"
2507,C++ Comments,//.*|/\*[\s\S]*?\*/,Matches single line or multi-line comments.
2508,web URL,(https?://)?((?:(\w+-)*\w+)\.)+(?:com|org|net|edu|gov|biz|info|name|museum|[a-z]{2})(\/?\w?-?=?_?\??&?)+[\.]?[a-z0-9\?=&_\-%#]*,"matches most most web URLs
"
2509,string expression,;,nothing
2510,BFPO - British Forces Post Office,"^(b|B)(f|F)(p|P)(o|O)(\s*||\s*C(/|)O\s*)[0-9]{1,4}","Matches BFPO
Allows for BFPO with no spacing"
2511,BFPO - British Forces Post Office - STRICT,"^(b|B)(f|F)(p|P)(o|O)(\s|\sC/O\s)[0-9]{1,4}",Matches all coorrectly spaced BFPO's
2512,yyyy-mm-dd hh:mm,^((\d{2}(([02468][048])|([13579][26]))[-]?((((0?[13578])|(1[02]))[-]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[-]?((((0?[13578])|(1[02]))[-]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1]?[0-9])|([2][0-3]))\:([0-5][0-9])))?$,This expression will validate date format to be yyyy-mm-dd hh:mm.
2513,.NET MembershipProvider strong password validation for PasswordStrengthRegularExpression,"(?=^[!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]{7,}$)(?=([!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]*\W+){1,})[!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]*$",Regex to validate strong password for .NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.
2514,HH:MM 24hr time,^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$,Matches a string if it is a valid time in the format of HH:MM
2516,10 Digit US Phone Number,(([2-9]{1})([0-9]{2})([0-9]{3})([0-9]{4}))$,Basic expression to validate a 10 digit number. Does not allow for any delimiters between numbers. Specifies that numbers cannot start with a one.
2517,a,\d,33aad 3d
2518,1,1,1
2520,Typical Email Expression,"("".+""\s)?<?[a-z\._0-9]+[^\._]@([a-z0-9]+\.)+[a-z0-9]{2,6}>?;?","Simple email matching expression, that allows for a friendly name string similar to what you see in outlook 2007.

Example: ""Test User"" test@user.com"
2521,Versitile North American Phone Number Validation,[\+]?[\s]?(\d(\-|\s)?)?(\(\d{3}\)\s?|\d{3}\-?)\d{3}(-|\s-\s)?\d{4}(\s(ex|ext)\s?\d+)?,"My goal with this was to have a pretty loose and flexible validation, accept a number of different input strings, but still inforce the core of what a phone number is. Country Code optional, Area Code required, with optional extension as well for business numbers.

I'm still fairly new to Regex's so any suggestions for improvement are great."
2522,Man Hour Calculation,^\d*\.?(((5)|(0)|))?$,This validates Man Hour values in projects
2523,date format validater,^(3[0-1]|2[0-9]|1[0-9]|0[1-9]|[1-9])[\s{1}|\/|-]((Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)|(0[1-9]|1[1-2]|[1-9]))[\s{1}|\/|-](\d{4}|\d{2})$,"following date format validator is validates d-m-yy,dd-mm-yy,dd-Mmm-yyyy,dd mm yyyy,dd Mmm yyyy, dd/mm/yy,dd/mm/yyyy"
2524,Swedish personnummer with accepted foreigners,^[0-9]{6}-[0-9pPtTfF][0-9]{3}$,"Other Swedish personnummer regexps do not take into account that at Swedish universities, foreigners might get special temporary personnummers with a ""P"", ""T"", or ""F"" instead of the first of the four last numbers.

This code fixes the problem, but does not check the validity of the date, or the last number."
2525,Email address (RFC 2821 mailbox),"^\s*(([/-9!#-'*+=?A-~-]+(?:\.[/-9!#-'*+=?A-~-]+)*|""(?:[^""\r\n\\]|\\.)*"")@([A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?(?:\.[A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?)*|\[(?:[^\[\]\r\n\\]|\\.)*\]))\s*$","This validates against the RFC 2821 (SMTP) syntax unit 'Mailbox' [equiv. to addr-spec - not address - element of RFC 2822] (the one a certain critic keeps linking to validates the RFC822 'address' element which includes support for stuff like ""Group:User <address>,User <address>;"", obsolete smtp routing syntax like <@host1,@host2:user@host>, etc)

There are some differences. This version does not allow line breaks for continuation lines. It also applies the stricter standards of RFC 2821 (SMTP) to the domain portion of the address.

Username may be a quoted string (but not ""multiple"".""quoted"".""strings"" - RFC 2822's grammar appears to allow this but the SMTP grammar does not). Also only one piece enclosed in [Brackets] (for IP email addresses) is allowed in the domain; that is you can't have user@[1.2.3.4].[5.6.7.8] as implied by the RFC2822 but not SMTP. Whitespace is only allowed in quoted strings. It is silently ignored at the beginning or end.

Capture group 1 is the email address, group 2 is the username, group 3 is the domain."
2526,Diacritics,"([A-Z]|[a-z])|\/|\?|\-|\+|\=|\&|\%|\$|\#|\@|\!|\||\\|\}|\]|\[|\{|\;|\:|\'|\""|\,|\.|\>|\<|\*|([0-9])|\(|\)|\s","This regex will eliminate all diacritics characters. To make it clear, if this is embedded in a javascript or any other coding it will not accept diacritics"
2527,HTML Tag operation - Identification and Extraction,(\<(.*?)\>)(.*?)(\<\/(.*?)\>),This will identify all the characters in between html tags irrespective of the length of the character or intiger. If scenario emerges to extract content between tags a replacement string  can be used: $3 
2528,Executive Moves,\b ?(a|A)ppoint(s|ing|ment(s)?|ed)?| ?(J|j)oin(s|ed|ing)| ?(R)?recruit(s|ed|ing(s)?)?| (H|h)(is|er)(on)? dut(y|ies)?| ?(R)?replace(s|d|ment)?| (H)?hire(s|d)?| ?(P|p)romot(ed|es|e|ing)?| ?(D|d)esignate(s|d)| (N)?names(d)?| (his|her)? (P|p)osition(ed|s)?| re(-)?join(ed|s)|(M|m)anagement Changes|(E|e)xecutive (C|c)hanges| reassumes position| has appointed| appointment of| was promoted to| has announced changes to| will be headed| will succeed| has succeeded| to name| has named| was promoted to| has hired| bec(a|o)me(s)?| (to|will) become| reassumes position| has been elevated| assumes the additional (role|responsibilit(ies|y))| has been elected| transferred| has been given the additional| in a short while| stepp(ed|ing) down| left the company| (has)? moved| (has)? retired| (has|he|she)? resign(s|ing|ed)| (D|d)eceased| ?(T|t)erminat(ed|s|ing)| ?(F|f)ire(s|d|ing)| left abruptly| stopped working| indict(ed|s)| in a short while| (has)? notified| will leave| left the| agreed to leave| (has been|has)? elected| resignation(s)?,"This regex is really helpful if you are trying to find out executive moves. For instance you have 100 docs with company details but you need to find out the newly joined executives and resigned executives, you can do it with this. "
2529,Email Identification - Alternate method,\b([A-Za-z0-9]+)(-|_|\.)?(\w+)?@\w+\.(\w+)?(\.)?(\w+)?(\.)?(\w+)?\b,This RE will be useful in identifying emails. 
2530,DB naming convention - Regex,\b([A-Za-z0-9]+)( )([A-Za-z0-9]+)\b,"Replaces the space character with an underscore, this regex replacement will be useful if you have change the naming convention for DB field names. The replacement string will be: $1_$3 (you can opt anything instead of ""_"" in the replacement string  for instance, $1-$2"
2531,Doubled word/character  identification,\b([A-Za-z]+) +\1\b,This RE will find doubled words/characters in a sentence. This will give a helping hand in content QC where you need to  identify and remove unnecessary repetitive words/characters.
2532,Douled numerics identification,\b([0-9]+) +\1\b,Repetition of two numeric sets can be identified with this RE.
2533,Doubled alphanumeric/alpha/numeric identification,\b([A-Za-z0-9]+) +\1\b,Repeated word/character/number/number with alpha character can be identified with this RE
2534,Doubled word/character identification & Replacement,\b([A-Za-z0-9]+) +\1\b   replacement string--->$1,The above RE will identify doubled alphanum/num/alpha and replaces with a single occurance.
2535,Remove Blank lines (Single or Multiple),(\n\r)   replacement string---->\n,"(\n\r) removes single or multiple blank\empty lines. The replacement string will be \n

Simple but powerful and really useful"
2536,Remove leading and trailing spaces,^[ \t]+|[ \t]+$,This RE will identify leading and trailing spaces. To trim this just replace with nothing.
2537,US Phone Number - Normalization,"^([\.\""\'-/ \(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\.\""\'-/\(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\,\.\""\'-/\(/)\s\[\]\\\<\>\;\:\{\}]?)([0-9]{4})$","This RE recognizes unformatted US phone numbers. The replacement string is $2-$4-$6. Helps when you want to normalize the phone numbers in a DB field.This also identifies a single space given before are after the part of first, second 3 digits and before the last 4 digits. The replaced format will be ""123-456-7890"""
2538,Eliminate Junk lines,^[^a-zA-Z0-9]+$,"This RE will be very useful if you want to eliminate non-alpha\numeric containing lines. For example, you have 10000 records in a DB field and you need to identify and eliminate fully unwanted character containing lines, this will help you."
2539,URL identifier - simple method,^(http(s)?\:\/\/\S+)\s,This RE will identify URLS only starting with http or https. Please test this before using.
2542,US Phone,"^(1|1(\s|\s?-\s?|\s?\.\s?|\s?/\s?))?((\(?[2-9]{1}[\d]{2}\)?(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?))?(\d{3})(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?(\d{4})$
","USA Phone number with dash, periods, slashes, spaces, () and only last 7 digit is required but everything else is checked

Here it is broken down feel free to add too it or use it

Begin String: ^
Country Code 1: (1|1(\s|\s?-\s?|\s?\.\s?|\s?/\s?))?
Area Code FirstDigit cannot be 0 or 1:((\(?[2-9]{1}[\d]{2}\)?(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?))?
3Digit Prefix: (\d{3})
Space/-/. between: (\s|\s?-\s?|\s?\.\s?|\s?/\s?)?
4Digit Suffix: (\d{4})
End String $


*can add country code with out area code!!"
2543,Comma Separated list of bit numbers,"^([1-9]{1}|[1-5]{1}[0-9]{1}|60|61|62|63|64*)+(,[1-9]{1}|[1-5]{1}[0-9]{1}|60|61|62|63|64+)*$","I needed a comma separated list containing numbers in the range 1 .. 64 to reflect bits set. This does not identify duplicates.
Doesn't do exactly as I want - so broken - sorry"
2544,Discover Card,^((6011)((-|\s)?[0-9]{4}){3})$,Validates Discover Card numbers starting with 6011 and allows for spaces and -'s.
2545,Mastercard,^((5[1-5])([0-9]{2})((-|\s)?[0-9]{4}){3})$,Validates all Mastercard numbers starting with 51-55 with a total of 16 digits. Allows for spaces and -'s.
2546,Email Extractor,"[_\w-]+(?:\.[_\w-]+)*@(?:[\w-]+\.)+(?:[\w-]{2,4})(?![\w]+)",matches the most of the email addresses.
2547,Money Brazil,"^([1-9]{1}[\d]{0,2}(\.[\d]{3})*(\,[\d]{0,2})?|[1-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$","Aceita duas casas decimas ap&#243;s a v&#237;rgula. Pode ser usado para Real Brasil.
Uses up to two decimal places. Good to use for brazilian money format (Real)."
2548,Validate Numeric values with commas and limited decimal places,"^(\d)?(\d|,)*\.?\d{1,2}$","Validates Numeric values with commas and limited decimal places. Can change the value d{1,2} to limit decimal places from 1 to n"
2549,SIMPLE UK POST CODE,"([a-zA-Z]{2}[0-9]{1,2}\s{0,1}[0-9]{1,2}[a-zA-Z]{2})",This is a simple post code regex for UK. It does a wonderfull job.
2550,File Name,"^([a-zA-Z]:\\)?[^\x00-\x1F""<>\|:\*\?/]+\.[a-zA-Z]{3,4}$",This matches a valid windows filename. Not a valid path.I wanted something simple that covered all the bases
2551,Alphanumeric Password with Special Character Support,"(?=^.{7,20}$)(?=.*\d)(?=.*[a-zA-Z])(?!.*\s)[0-9a-zA-Z*$-+?_&=!%{}/'.]*$","Password length must be between 7 and 20 characters, include at least one alphabetic and one numeric character, and may include some special characters."
2552,Telefone Brazil,Express&#227;o regular para Telefones do Brasil.,^\(\d{2}\)\d{4}-\d{4}$
2553,MAX length using regex for Textbox with textmode 'Multiline',"(.|[\r\n]){1,5}",count the space and new line character also .. pass first parameter for minimun and next for maximum character
2555,UK Postcode (post code),"\A(([a-zA-Z]{1,2}\d{1,2})|([a-zA-Z]{2}\d[a-zA-Z]{1}))\x20{0,1}\d[a-zA-Z]{2}\Z","I used this in C#.NET to check the validity of UK postcode entries.  It successfully matches all acceptable formats (with or without a space) but does not check that the actual postcode is valid due to constant changes.  Hope this helps - Jon

NOTE: If you are not using in .NET yoy may need to replace \d with [0-9], \A with ^, and \Z with $."
2556,Identificaciones Colombia - Cedula,^((\d{8})|(\d{10})|(\d{11})|(\d{6}-\d{5}))?$,"Colombian identification numbers are a combination of digits, can be 8, 10 or 11 digits long, there is an identity card, which can be 6 digits separated by - and followed by 5 digits"
2557,Email,"^[-\w'+*$^&%=~!?{}#|/`]{1}([-\w'+*$^&%=~!?{}#|`.]?[-\w'+*$^&%=~!?{}#|`]{1}){0,31}[-\w'+*$^&%=~!?{}#|`]?@(([a-zA-Z0-9]{1}([-a-zA-Z0-9]?[a-zA-Z0-9]{1}){0,31})\.{1})+([a-zA-Z]{2}|[a-zA-Z]{3}|[a-zA-Z]{4}|[a-zA-Z]{6}){1}$","For Email Inputs checks to RFC 5322 Standards (no IP address though Didn't Want them)
localhost:
cannot start or end with .
cannot have .. in it
Domain:
cannot start with - or .

Known problems:
TLDDoesntExist@domain.moc
domains can be longer then 255. But each Domain can only be 63 then a . is required"
2558,"Email - RFC 2821, 2822 Compliant","^((([!#$%&'*+\-/=?^_`{|}~\w])|([!#$%&'*+\-/=?^_`{|}~\w][!#$%&'*+\-/=?^_`{|}~\.\w]{0,}[!#$%&'*+\-/=?^_`{|}~\w]))[@]\w+([-.]\w+)*\.\w+([-.]\w+)*)$","According to RFC 2821 (<see cref=""http://tools.ietf.org/html/2821""/>)
and RFC 2822 (<see cref=""http://tools.ietf.org/html/2822""/>), the local-part
of an email addresses may use any of these ASCII characters:
1. Uppercase and lowercare letters
2. The digits 0 through 9
3. The characters, !#$%&'*+-/=?^_`{|}~
4. The character ""."" provided that it is not the first or last character in the local-part."
2559,Phone number,"^[+]\d{1,2}\(\d{2,3}\)\d{6,8}(\#\d{1,10})?$","Phone number with country prefix +2 or +22 (one or two digits), then City code in parenthesis, like (444)? then phone number 6 to 8 digits and optional extension '#XXX' up to 10 digits"
2560,Ip address,(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?),Accurate IP address verification... Th fist and the fourth numeric part of an IP address must be between 1 and 255. The second and the third numeric part of an IP address must be between 0 and 255. 
2561,International Phone Number (with optional extension),"^(\+[0-9]{2,}[0-9]{4,}[0-9]*)(x?[0-9]{1,})?$",This comes from our requirement to have tight clean telephone database column. This expression supports only strict format and none others.It accepts any international country code with optional extension number.
2562,flfk,sample,dfdfdf
2563,Canada postal code,^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\d{1}[A-Za-z]{1}\d{1}[A-Za-z]{1}\d{1}$,Matches the Canadian postal code with no space between.
2564,Time hh:mm am/pm,^([0][1-9]|[1][0-2]):[0-5][0-9] {1}(AM|PM|am|pm)$,Matches if the string is in hh:mm am/pm format. Also the hour and minute values should have left padding 0's if they are single digit.
2565,Validate password has at least 4 non-alphanumeric characters within it,"^(?=.*(\W.*){4,}).*$",This RegEx will validate a password that has at least 4 non-alphanumeric characters in it. The characters do not need to be adjacent.
2567,Indian Passport No Format,^[A-Z]{1}-[0-9]{7}$,Indian Passport No Format
2568,Brazilian Phone Number,^([(][1-9]{2}[)] )?[0-9]{4}[-]?[0-9]{4}$,This expression matches brazilian's phone numbers with area codes or not.
2569,YouTube Link,"^http://\w{0,3}.?youtube+\.\w{2,3}/watch\?v=[\w-]{11}",Validates a YouTube Link
2571,Retreive text between parenthesis #2,"[\(]{1,}[^)]*[)]{1,}",Will find any texts within a string that is enclosed within parenthesis ( )
2572,runescape,runescape,welcome to the professional runescape money shop to buy runescape gold.www.goldsrunescape.com. and www.cheaprunescape.com
2573,Linux Path Verify,"^/{1}(((/{1}\.{1})?[a-zA-Z0-9 ]+/?)+(\.{1}[a-zA-Z0-9]{2,4})?)$","This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also  will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _ . or - in the path, this will be updated at some point."
2574,No. of Identification Card (Slovak Republic),^(([a-zA-Z]{2})([0-9]{6}))$,"[en] Every number of Identification Card in SR contains two letters (begin) and six numbers (continue). Number is without spaces.
[sk] Každ&#233; c&#237;slo obcianskeho preukazu v SR sa mus&#237; zac&#237;nat dvoma p&#237;smenami a pokracuje šiestimi c&#237;slicami. Toto c&#237;slo neobsahuje medzery."
2575,Postal Code (Slovak Republic),"^(([0-9]{5})|([0-9]{3}[ ]{0,1}[0-9]{2}))$",[en] Postal Code in Slovak Republic contains five numbers. Between 3rd and 4th number can be space. [sk] Poštov&#233; smerov&#233; c&#237;slo v Slovenskej Republike m&#225; p&#228;t c&#237;sel. Medzi 3. a 4. c&#237;slicou m&#244;že byt medzera.
2576,Personal identification number (Slovak Republic),"^([0-9]{2})(01|02|03|04|05|06|07|08|09|10|11|12|51|52|53|54|55|56|57|58|59|60|61|62)(([0]{1}[1-9]{1})|([1-2]{1}[0-9]{1})|([3]{1}[0-1]{1}))/([0-9]{3,4})$","Law 301/1995 z. Z. SR from 14. december 1995. PIN from 1900 to 1953 have sufix with three digits, PIN beyond 1954 have four digits in sufix. In first part of woman PIN is month of birth  (3rd & 4th digit) increase +50."
2577,CHMOD #1,^([0-7]{3})$,no comment :o)
2578,CHMOD #1 (with/without zero),"^([0]{0,1}[0-7]{3})$",no comment :o)
2579,CHMOD #2,^((\-|d|l|p|s){1}(\-|r|w|x){9})$ ,no comment :o)
2580,CRON (part: date/time of execution),"^(((([\*]{1}){1})|((\*\/){0,1}(([0-9]{1}){1}|(([1-5]{1}){1}([0-9]{1}){1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([0-9]{1}){1}|(([1]{1}){1}([0-9]{1}){1}){1}|([2]{1}){1}([0-3]{1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([1-9]{1}){1}|(([1-2]{1}){1}([0-9]{1}){1}){1}|([3]{1}){1}([0-1]{1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([1-9]{1}){1}|(([1-2]{1}){1}([0-9]{1}){1}){1}|([3]{1}){1}([0-1]{1}){1}))|(jan|feb|mar|apr|may|jun|jul|aug|sep|okt|nov|dec)) ((([\*]{1}){1})|((\*\/){0,1}(([0-7]{1}){1}))|(sun|mon|tue|wed|thu|fri|sat)))$","SUPPORTED constructions: 
[*] - all five commands; 
[number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);   
[*/nubmer] - see construction [number]; 
[word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).

NON SUPPORTED constructions:
[number-number] and
[number,number]."
2581,registration number of cars - SPZ (Slovak Republic),"^(B(A|B|C|J|L|N|R|S|Y)|CA|D(K|S|T)|G(A|L)|H(C|E)|IL|K(A|I|E|K|M|N|S)|L(E|C|M|V)|M(A|I|L|T|Y)|N(I|O|M|R|Z)|P(B|D|E|O|K|N|P|T|U|V)|R(A|K|S|V)|S(A|B|C|E|I|K|L|O|N|P|V)|T(A|C|N|O|R|S|T|V)|V(K|T)|Z(A|C|H|I|M|V))([ ]{0,1})([0-9]{3})([A-Z]{2})$",Case sensitive (upper)!
2582,Chees coordinate,^([a-hA-H]{1}[1-8]{1})$,Letter (a - h) + number (1 - 8). Case insensitive.
2583,Tel. number - mobile (Slovak Republic),"^(([0]{0,1})([1-9]{1})([0-9]{2})){1}([\ ]{0,1})((([0-9]{3})([\ ]{0,1})([0-9]{3}))|(([0-9]{2})([\ ]{0,1})([0-9]{2})([\ ]{0,1})([0-9]{2})))$",no comment
2584,Extract Titles from webpage,<title>(.*?)</title>,This regular expression can be used to extract titles from web page
2585,Extract script from web page,<script[\\.|\\W|\\w]*?</script>,Any java script from web page can be extracted using the regular expression
2588,Extract date from webpage,\\s\\d{2}[-]\\w{3}-\\d{4},this regular expression can be used to extract the date from webpage
2589,Extract country from webpage,\\[\\w{2}\\],this regular expression can be used to extract country code from web page
2590,Extract Price in $,\\$\\d+[.]?\\d*,All the prices available in web page can be extracted
2591,Replace comment from html page,<!--[\\.|\\W|\\w]*?-->,the comments on html page can be extracted or removed.
2592,Extract current page number and total page,(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1}),"Matching pattern like

1-15 of 15"
2594,Find days and hour from web page,"\d{1,2}d \d{1,2}h",82d 10h
2595,Country codes ISO 3166-1 (alfa-2),^(A(D|E|F|G|I|L|M|N|O|R|S|T|Q|U|W|X|Z)|B(A|B|D|E|F|G|H|I|J|L|M|N|O|R|S|T|V|W|Y|Z)|C(A|C|D|F|G|H|I|K|L|M|N|O|R|U|V|X|Y|Z)|D(E|J|K|M|O|Z)|E(C|E|G|H|R|S|T)|F(I|J|K|M|O|R)|G(A|B|D|E|F|G|H|I|L|M|N|P|Q|R|S|T|U|W|Y)|H(K|M|N|R|T|U)|I(D|E|Q|L|M|N|O|R|S|T)|J(E|M|O|P)|K(E|G|H|I|M|N|P|R|W|Y|Z)|L(A|B|C|I|K|R|S|T|U|V|Y)|M(A|C|D|E|F|G|H|K|L|M|N|O|Q|P|R|S|T|U|V|W|X|Y|Z)|N(A|C|E|F|G|I|L|O|P|R|U|Z)|OM|P(A|E|F|G|H|K|L|M|N|R|S|T|W|Y)|QA|R(E|O|S|U|W)|S(A|B|C|D|E|G|H|I|J|K|L|M|N|O|R|T|V|Y|Z)|T(C|D|F|G|H|J|K|L|M|N|O|R|T|V|W|Z)|U(A|G|M|S|Y|Z)|V(A|C|E|G|I|N|U)|W(F|S)|Y(E|T)|Z(A|M|W))$,"Table: 
http://en.wikipedia.org/wiki/ISO_3166-1"
2596,Country codes ISO 3166-1 (alfa-3),^(A(BW|FG|GO|IA|L(A|B)|N(D|T)|R(E|G|M)|SM|T(A|F|G)|U(S|T)|ZE)|B(DI|E(L|N)|FA|G(D|R)|H(R|S)|IH|L(M|R|Z)|MU|OL|R(A|B|N)|TN|VT|WA)|C(A(F|N)|CK|H(E|L|N)|IV|MR|O(D|G|K|L|M)|PV|RI|UB|XR|Y(M|P)|ZE)|D(EU|JI|MA|NK|OM|ZA)|E(CU|GY|RI|S(H|P|T)|TH)|F(IN|JI|LK|R(A|O)|SM)|G(AB|BR|EO|GY|HA|I(B|N)|LP|MB|NQ|NB|R(C|D|L)|TM|U(F|M|Y))|H(KG|MD|ND|RV|TI|UN)|I(DN|MN|ND|OT|R(L|N|Q)|S(L|R)|TA)|J(AM|EY|OR|PN)|K(AZ|EN|GZ|HM|IR|NA|OR|WT)|L(AO|B(N|R|Y)|CA|IE|KA|SO|TU|UX|VA)|M(A(C|F|R)|CO|D(A|G|V)|EX|HL|KD|L(I|T)|MR|N(E|G|P)|OZ|RT|SR|TQ|US|WI|Y(S|T))|N(AM|CL|ER|FK|GA|I(C|U)|LD|OR|PL|RU|ZL)|OMN|P(A(K|N)|CN|ER|HL|LW|NG|OL|R(I|K|T|Y)|SE|YF)|QAT|R(EU|OU|US|WA)|S(AU|DN|EN|G(P|S)|HN|JM|L(B|E|V)|MR|OM|PM|RB|TP|UR|V(K|N)|W(E|Z)|Y(C|R))|T(C(A|D)|GO|HA|JK|K(L|M)|LS|ON|TO|U(N|R|V)|WN|ZA)|U(EN|GA|KR|MI|RY|SA|ZB)|V(AT|CT|GB|IR|NM|UT)|W(LF|SM)|YEM|Z(AF|MB|WE))$,"Table: 
http://en.wikipedia.org/wiki/ISO_3166-1."
2597,Country codes ISO 3166-1 (numeric),^(0(0(4|8)|1(0|2|6)|2(0|4|8)|3(1|2|6)|4(0|4|8)|5(0|1|2|6)|6(0|4|8)|7(0|2|4|6)|8(4|6)|9(0|2|6))|1(0(0|4|8)|1(2|6)|2(0|4)|3(2|6)|4(0|4|8)|5(2|6)|6(2|6)|7(0|4|5|8)|8(0|4|8)|9(1|2|6))|2(0(3|4|8)|1(2|4|8)|2(2|6)|3(1|2|3|4|8|9)|4(2|4|8)|5(0|4|8)|6(0|2|6|8)|7(0|5|6)|88|9(2|6))|3(0(0|4|8)|1(2|6)|2(0|4|8)|3(2|4|6)|4(0|4|8)|5(2|6)|6(0|4|8)|7(2|6)|8(0|4|8|9)|92)|4(0(0|4|8)|1(0|4|7|8)|2(2|6|8)|3(0|4|8)|4(0|2|6)|5(0|4|8)|6(2|6)|7(0|4|8)|8(0|4)|9(2|6|8|9))|5(0(0|4|8)|1(2|6)|2(0|4|8)|3(0|3)|4(0|8)|5(4|8)|6(2|6)|7(0|4|8)|8(0|1|3|4|5|6)|9(1|8))|6(0(0|4|8)|1(2|6)|2(0|4|6)|3(0|4|8)|4(2|3|6)|5(2|4|9)|6(0|2|3|6)|7(0|4|8)|8(2|6|8)|9(0|4))|7(0(2|3|4|5|6)|1(0|6)|24|3(2|6)|4(0|4|8)|5(2|6)|6(0|4|8)|7(2|6)|8(0|4|8)|9(2|5|6|8))|8(0(0|4|7)|26|3(1|2|3|4)|40|5(0|8)|6(0|2)|76|8(2|7)|94))$,"Table:
http://en.wikipedia.org/wiki/ISO_3166-1."
2599,PORTS 1 - 65536,"^([1-9]{1}|[1-9]{1}[0-9]{1,3}|[1-5]{1}[0-9]{4}|6[0-4]{1}[0-9]{3}|65[0-4]{1}[0-9]{2}|655[0-2]{1}[0-9]{1}|6553[0-6]{1})$",Communication ports in PC between 1 - 65536.
2600,CSS color,"^([\#]{0,1}([a-fA-F0-9]{6}|[a-fA-F0-9]{3})|rgb\(([0-9]{1},|[1-9]{1}[0-9]{1},|[1]{1}[0-9]{2},|[2]{1}[0-4]{1}[0-9]{1},|25[0-5]{1},){2}([0-9]{1}|[1-9]{1}[0-9]{1}|[1]{1}[0-9]{2}|[2]{1}[0-4]{1}[0-9]{1}|25[0-5]{1}){1}\)|rgb\(([0-9]{1}%,|[1-9]{1}[0-9]{1}%,|100%,){2}([0-9]{1}%|[1-9]{1}[0-9]{1}%|100%){1}\))$",This reg. exp. is ignore color names. Supported only hexadecimal with 3 or 6 chars (with or only prefix #); rgb syntax (0-255) and rgb syntax with % (0-100).
2602,Find words or phrases,"\""[^""]+\""|\([^)]+\)|[^\""\s\()]+","RegEx parses out all whole words, phrases within quotes or parentheses."
2604,currency EURO,"^(0|(([1-9]{1}|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{2}){1}(\ [0-9]{3}){0,})),(([0-9]{2})|\-\-)([\ ]{1})(€|EUR|EURO){1}$",Supported symbols are € or EUR or EURO (all case sensitive).
2605,MySQL 5.1 charset,^(big5|euc(kr|jpms)|binary|greek|tis620|hebrew|ascii|swe7|koi8(r|u)|(u|keyb)cs2|(dec|hp|utf|geostd|armscii)8|gb(k|2312)|cp(8(5(0|2)|66)|932|125(0|1|6|7))|latin(1|2|5|7)|(u|s)jis|mac(ce|roman))$,"supported all charsets in MySQL 5.1, case sensitive (lower)"
2606,MySQL 5.1 collate,^((ucs2|utf8)\_(bin|(general|unicode|roman|slovak|czech|icelandic|(latv|pers)ian|(dan|pol|span|swed|turk)ish|spanish2|(esto|lithua|roma|slove)nian\_ci)))|((mac(ce|roman)|cp(8(5(0|2)|66)|1256)|armscii8|geostd8|ascii|keybcs2|greek|hebrew|koi8(r|u))\_(bin|general\_ci))|((dec8|swe7)\_(bin|swedish\_ci))|((hp8|latin5)\_(bin|english\_ci))|((big5|gb(2312|k))\_(bin|chinese\_ci))|((cp932|eucjpms|(s|u)jis)\_(bin|japanese\_ci))|(euckr\_(bin|korean\_ci))|(tis620\_(bin|thai\_ci))|(latin1\_(bin|(((dan|span|swed)ish|german(1|2))\_ci)|general\_(ci|cs)))|(cp1250\_(bin|czech\_cs|general\_ci))|(latin2\_(bin|czech\_cs|(general|hungarian|croatian)\_ci))|(cp1257\_(bin|(general|lithuanian)\_ci))|(latin7\_(bin|general\_(c(i|s))|estonian\_cs))|(cp1251\_(bin|(general|bulgarian|ukrainian)\_ci|general\_cs))$,"supported all collates for all charsets in MySQL 5.1, case sensitive (lower)"
2607,身分證格式,^[a-zA-Z](1|2)\d{8}$,Persional identify number(TW)
2608,Email validation,\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*,To validate an Email ID
2609,javascript function,function[\s]+[\S]+[\s]*([\s]*)[\s]*{[\s]*([\S]|[\s])*[\s]*},detect javascript function in HTML
2610,FR (French) VAT Number,^(FR)?\s?[A-Z0-9-[IO]]{2}[0-9]{9}$,"0 or one FR +
0 or one space +
11 characters (that may include alphabetical characters - any except O or I (first or second or first and second))
12345678901 - 
X1234567890 - 
1X123456789 - 
XX123456789 - 

. "
2611,DENMARK (DK) VAT Number,^(DK)?\s?(([0-9]{2}\s[0-9]{2}\s[0-9]{2}\s[0-9]{2})|[0-9]{8})$,"Danish VAT Number 

1 block of 8 digits: DK 12345678  OR
4 blocks of 2 digits:DK 12 34 56 78"
2612,Regular Expression for Phone Numbers in the US,/^(1)?(-|.)?(\()?([0-9]{3})(\))?(-|.)?([0-9]{3})(-|.)?([0-9]{4})/,"I was looking for a regex that allows pretty much any combo of a US phone number. I found some that covered most of the bases, but not all of them. 

This regex allows for missing characters, periods, hyphens. It should cover most of the bases. If not, let me know! I want to make it better!"
2613,TimeStamp,^[1-9]{1}[0-9]{3}-(0[1-9]{1}|1[0-2]{1})-([0-2]{1}[1-9]{1}|3[0-1]{1}) ([0-1]{1}[0-9]{1}|2[0-3]{1}):[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}$,Its validates a time stamp
2614,US Currency,\$(\d)*\d,This Expression is used to Validate the US curreny.
2615,Number or Range of numbers,^(\d*\s*\-?\s*\d*)$,For numbers such as 27 or a range using spaces and/or a hyphen such as 5 - 10 (meaning between 5 and 10).
2616,Strong Password,"(?=^.{8,15}$)((?!.*\s)(?=.*[A-Z])(?=.*[a-z])(?=(.*\d){1,}))((?!.*["",;&|'])|(?=(.*\W){1,}))(?!.*["",;&|'])^.*$","Password must have at least 8 characters and maximum of 15 characters with at least one Capital letter, at least one lower case letter and at least one number.Special character is optional. Special characters "",;&|' not allowed."
2617,Parse & Extract Filename Parts,^(.*?)([^/\\]*?)(\.[^/\\.]*)?$,"Simple (non-validating) match with numbered group captures that extracts parts of a filename into $1 = folder path, $2 = filename w/o extension, $3 = extension. Should work on Windows, OS X, and Unix/Linux, but not on OS 9 and OSs with folder separators other than slashes (either direction). Tested only on .NET RE engine."
2618,Positive Integer,^([1-9]+[0-9]* | [1-9])$,REGULAR EXPRESSION TO CHECK ONLY POSITIVE INTEGERS
2619,test,test,test
2620,01/01/1753 - 12/31/9999,^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|[1-9][0-9]|175[3-9]|17[6-9][0-9]|1[8-9][0-9]{2}|[2-9][0-9]{3})$,Matches all dates (mm/dd/yyyy or mm/dd/yy) greater than or equal to the SQL minimum date of 01/01/1753 and less than or equal to 12/31/9999.  Does not check for leap years.  
2621,Time 24:00 hrs format,^(([01][0-9]|[012][0-3]):([0-5][0-9]))*$,"The Regular Expression to  validate time format in [24:00] hrs.  
>> Pemitted values from 00:00 to 23:59
>> Prefix zero for single digit hours 01:00 to 09:59

>> Tested & Certified by Mr. Shripad Pramod Bhende :-)"
2622,Date Format,(([1-9]|[0][1-9])|1[012])[- /.](([1-9]|[0][1-9])|[12][0-9]|3[01])[- /.](19|20)\d\d,"Regular Expression to validate date in MM/DD/YYYY format.
>> Permitted formats ""1/1/2008” or “01/01/2008” or “01/1/2008” or 1/01/2008”"
2623,IP V4 and IP V6 Validate,"^\d{1,3}((\.\d{1,3}){3}|(\.\d{1,3}){5})$",validate both IP V4 and IP V6
2624,Trim HTML tags with content,<(.|\n)*?>,This regex will remove the HTML tags with content
2625,netmask address,^(((0|128|192|224|240|248|252|254).0.0.0)|(255.(0|128|192|224|240|248|252|254).0.0)|(255.255.(0|128|192|224|240|248|252|254).0)|(255.255.255.(0|128|192|224|240|248|252|254)))$,netmask address. I know this is nod good enough :)
2626,ip address / netmask,"^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})(/([0-9]|[0-2][0-9]|3[0-2]))$",ip address/netmask couple
2627,Doubled word/character  - Replace with single word,\b([A-Za-z]+) +(\1\b),"""one one"" can be replaced with ""one"". This RE will help you in removing the duplicated successor with single word or character. The replacement string will be $1"
2628,E-mail validation,"^[a-zA-Z][a-zA-Z0-9_\.\-]+@([a-zA-Z0-9-]{2,}\.)+([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})$",This will validate most legal e-mail adresses with the correct syntax.
2629,Website validation,"^((http|https|ftp):\/\/(www\.)?|www\.)[a-zA-Z0-9\_\-]+\.([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})(\/[a-zA-Z0-9\-\._\?\&=,'\+%\$#~]*)*$","This will validate most legal websites, including ftp."
2630,Website validation,"^((http|https|ftp):\/\/(www\.)?|www\.)[a-zA-Z0-9\_\-]+\.([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})(\/[a-zA-Z0-9\-\._\?\&=,'\+%\$#~]*)*$","This will validate most legal websites, including ftp.

double-post, please delete me"
2631,Tel Validation,"^(([0-9]{3})[-]?)*[0-9]{6,7}$",This validates most telephone numbers in Sweden.
2632,UK residential phone numbers,^((\(44\))( )?|(\(\+44\))( )?|(\+44)( )?|(44)( )?)?((0)|(\(0\)))?( )?(((1[0-9]{3})|(7[1-57-9][0-9]{2}))( )?([0-9]{3}[ -]?[0-9]{3})|(2[0-9]{2}( )?[0-9]{3}[ -]?[0-9]{4}))$,"Matches valid UK residential telephone numbers in all expected formats, including international."
2633,Token Words,(\$(([0-9]?)[a-zA-Z]+)([0-9]?)),"Matches token words based on the use of a ""$"" (USD) prefix."
2634,South Africa Cell Mobile Telephone Number,^(\+27|27)?(\()?0?[87][23467](\))?( |-|\.|_)?(\d{3})( |-|\.|_)?(\d{4}),Allows most formats for entering valid South African mobile / cellular phone numbers.
2635,.NET RegEx mm/dd/yyyy date validation,\b(((0[13578]|1[02])[\/\.-]?(0[1-9]|[12]\d|3[01])[\/\.-]?(19|20)?(\d{2}))|(0[13456789]|1[012])[\/\.-]?(0[1-9]|[12]\d|30)[\/\.-]?(19|20)?(\d{2}))|(02[\/\.-]?(0[1-9]|1\d|2[0-8])[\/\.-]?(19|20)?(\d{2}))|(02[\/\.-]?29[\/\.-]?(19|20)?((0[48]|[2468][048]|[13579][26])|(00)))\b,"I needed to have a way where users could type in any date format like the following:  mm/dd/yyyy, mm/dd/yy, mmddyy, mmddyyyy with the ability to use ""/"" and ""."" and ""-"" or nothing as separation characters.  I use this in a RegularExpression Validator control in ASP.NET"
2636,Column name,"^[A-Z]+[A-Z0-9,\x5F]*$","This regular expression is very useful, when it's required to validate a database column name, for example CUSTOMER_NAME, ORDER_ID or even ITEM2"
2637,hour/minute,"(^([1-9]|[1][0-2]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([1-9]|[1][0-2])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])$)",regular expresion to evalute time
2638,U.S. Social Security Numbers,"[/,,/.,/=,\s]([0-6]\d{2}|7[0-6]\d|77[0-2])(\s|\-)?(\d{2})\2(\d{4})[/,,/.,\s]","Searches for US SSNs that have either a white space, ""."", "","", or ""="" in front and either a white space, ""."", or "","" at the end. Ensures that sets are separated with the same format (either spaces, dashes, or nothing)."
2639,SQL Parameter,@([_a-zA-Z]+),"Can be used to find SQL Server parmeters in a SQL string.  Does not attempt to weed-out ""@"" characters in embedded string values."
2640,Length Validator,"^(.\n){0,5}$","This will not allow user to enter more than 5 characters. The ""Enter"" is also allow to user."
2641,DateTime type format,(\d{2}|\d{4})(?:\-)?([0]{1}\d{1}|[1]{1}[0-2]{1})(?:\-)?([0-2]{1}\d{1}|[3]{1}[0-1]{1})(?:\s)?([0-1]{1}\d{1}|[2]{1}[0-3]{1})(?::)?([0-5]{1}\d{1})(?::)?([0-5]{1}\d{1}),"Will match a date accepted by MySQL datetime type.
Years with 2 or 4 digits from any range.
Months with 2 digits from 00 to 12.
days with 2 digits from 00 to 31.
Hours with 2 digits from 00-23
Minutes with 2 digits from 00 to 59.
Seconds with 2 digits from 00 to 59."
2642,Byte type,"^(0|[-]{1}([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-8]{1}))|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-7]{1})))$","Not just a number, a byte type. Will match any number from range -128 to 127."
2643,Unsigned Byte type,"(0|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}[0-9]{0,2}|[2]{1}([0-4]{1}[0-9]{1}|[5]{1}[0-5]{1})))","Will match an unsigned byte, from range 0 to 255"
2644,Short type,"^(0|[-]{1}([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-8]{1})))))|(\+)?([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-7]{1}))))))$","Short type, will match a short number from range -32768 to 32767."
2645,Unsigned Short Type,"^(0|(\+)?([1-9]{1}[0-9]{0,3})|([1-5]{1}[0-9]{1,4}|[6]{1}([0-4]{1}[0-9]{3}|[5]{1}([0-4]{1}[0-9]{2}|[5]{1}([0-2]{1}[0-9]{1}|[3]{1}[0-5]{1})))))$",Will match an unsigned short number from range 0 to 65535
2646,Int type,"(0|[1-9]{1}[0-9]{0,8}|[1]{1}[0-9]{1,9}|[-]{1}[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-8]{1}))))))))|(\+)?[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-7]{1})))))))))",Will match any integer from range -2147483648 to 2147483647.
2647,Unsigned Int type,"^(0|(\+)?[1-9]{1}[0-9]{0,8}|(\+)?[1-3]{1}[0-9]{1,9}|(\+)?[4]{1}([0-1]{1}[0-9]{8}|[2]{1}([0-8]{1}[0-9]{7}|[9]{1}([0-3]{1}[0-9]{6}|[4]{1}([0-8]{1}[0-9]{5}|[9]{1}([0-5]{1}[0-9]{4}|[6]{1}([0-6]{1}[0-9]{3}|[7]{1}([0-1]{1}[0-9]{2}|[2]{1}([0-8]{1}[0-9]{1}|[9]{1}[0-5]{1})))))))))$",Will match any unsigned integer from range 0 to 4294967295
2648,Compare Number 0-9,"""^[0-9]{2}""",It will compare no. from zero to Nine lenght == 2
2649,Test Details Pattern Title ,^[1-9][0-9]{3}$ ,Simple expression to validate PassCode
2650,IP Address Validator,\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b,This regex expression validates IP addresses when processed as a string.
2651,Manage negative double integer with four decimal,^[-]?[0-9]*\.?[0-9]?[0-9]?[0-9]?[0-9]?,Manage negative double integer with four decimal
2652,,[()+-.0-9]*,"Phone numbers validation for all country and allow all format for phone no ,contact no ."
2654,Canadian Postal Code,"^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\d{1}[A-Za-z]{1}[ ]{0,1}\d{1}[A-Za-z]{1}\d{1}$","Matches the Canadian postal code with or without space between.
Also matches uppercase and lower case letters."
2656,Password,"^(?=.*[\d])(?=.*[A-Z])(?=.*[a-z])[\w\d!@#$%_]{6,40}$","Password must be 6-40 characters - {6,40}

Must have no spaces, at least 1 digit (?=.*[\d]), at least 1 uppercase letter (?=.*[A-Z]) and at least one lowercase letter (?=.*[a-z]).

Allows specifying special characters - !@#$%_"
2657,Hours (hours:minutes:seconds),^([0-1][0-9]|[2][0-3]|[0-9]):([0-5][0-9])(?::([0-5][0-9]))?$,Validate hours with seconds returning mirrors correctly.
2658,Date format,^([0-2]\d|3[0-1]|[1-9])\/(0\d|1[0-2]|[1-9])\/(\d{4})$,"Validate a date format: d/m/Y. 
See examples."
2659,subtitles SRT - timestamp,"^([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1} --> ([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1}(.*)$","e. g. HH:MM:SS:ttt --> HH:MM:SS:ttt;
$1 is start hour;
$2 is start minute;
$3 is start second;
$4 is start s/1000;
$5 is stop hour;
$6 is stop minute;
$7 is stop second;
$8 is stop s/1000;"
2660,subtitles SUB - timestamp,"^\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}(.*)$","e. g. {11510}{11810}Blah, blah, blah.;
$1 is start;
$2 is stop;"
2661,Text Between Double Quotes,"""([^\\""]|\\.)*""",to get the text betwwen double quotes
2662,Day 01 to 31 and 1 to 31,^[0-2]?[1-9]{1}$|^3{1}[01]{1}$,"test for valid day, 01 to 31 and 1 to 31"
2664,Regular Expression to check dollar amount with maximum of 20 numbers,"^(\$?)((\d{1,20})|(\d{1,2}((,?\d{3}){0,6}))|(\d{3}((,?\d{3}){0,5})))$","This expression will allow whole dollar amounts (along with $ and ,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit."
2665,Canadian Postal Code,^([a-z-[dfioquwz]]|[A-Z-[DFIOQUWZ]])\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])(\s)?\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])\d$,Take in account the fact that the first letter cannot be a w or a z  moreover the fact that letters cannot be any of DFIOQU
2666,IPv6地址,"^([\da-fA-F]{1,4}:){6}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^::([\da-fA-F]{1,4}:){0,4}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:):([\da-fA-F]{1,4}:){0,3}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){2}:([\da-fA-F]{1,4}:){0,2}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){3}:([\da-fA-F]{1,4}:){0,1}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){4}:((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){7}[\da-fA-F]{1,4}$|^:((:[\da-fA-F]{1,4}){1,6}|:)$|^[\da-fA-F]{1,4}:((:[\da-fA-F]{1,4}){1,5}|:)$|^([\da-fA-F]{1,4}:){2}((:[\da-fA-F]{1,4}){1,4}|:)$|^([\da-fA-F]{1,4}:){3}((:[\da-fA-F]{1,4}){1,3}|:)$|^([\da-fA-F]{1,4}:){4}((:[\da-fA-F]{1,4}){1,2}|:)$|^([\da-fA-F]{1,4}:){5}:([\da-fA-F]{1,4})?$|^([\da-fA-F]{1,4}:){6}:$",support compression and mixed IPv6/IPv4 addresses
2667,Simple Password,"^([a-zA-Z])(?=.*\d)\w{4,9}$","Check Password: 5 - 10 characters long, start with a letter and contain at least one number. No special characters"
2668,Find Unicode character entities,\046#\d*;,"Finds unicode character entities like &#8216; (‘ - Left Single Quotation Mark).
"
2669,Domain Name,^\w*[-]*\w*\\\w*$,It Accepts hyphen in the domain name
2670,Match range from 4.00 to 6.99,"\b0*[4-6]\b(\.\d{1,2})?$","Can be used to match numbers in a range, with 2 decimal points. You can change the [4-6] to expand or contract the range of numbers."
2671,Bloog Group,/(A|B|AB|O)[+-]/,"Matches all currently known positive and negative blood groups, i.e. A+, A-, B+, B-, O+, O-, AB+, AB-"
2672,Clean Domain Name,"^http\://www.[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}/$",This regex only matches clean domain names. No path after. Ends in a forward slash. Starts with http://www. It is pretty slack on the TLD requiring a 2 or 3 letter ending. This part could be tightened up if you wanted to be restrict it to specific TLDs.
2673,Caged,I'm Caged,Understood. Mentally captured someone's expressed thoughts and are now understood
2674,Match File Extension,"\.([A-Za-z0-9]{2,5}($|\b\?))","Pattern matches all file extensions from two(2) to five(5) characters in length (e.g. Adobe Illustrator [*.ai] or Extensible Hypertext Markup Language [*.xhtml]). Input can be an absolute path, relative path, URI, directory path, etc. If there are get variables in a URI input, they are ignored."
2675,Parse ISO8601 Dates into parts,(\d\d\d\d)-?(\d\d)-?(\d\d)T?(\d\d):?(\d\d)(?::?(\d\d)(\.\d+)*?)?(Z|[+-])(?:(\d\d):?(\d\d))?,This regular expression will parse an ISO8601 date into it's individual parts.
2678,UK Phone Number in 4-3-4 Format,^[\d]{4}[-\s]{1}[\d]{3}[-\s]{1}[\d]{4}$,Allows dashes or spaces to separate.
2679,UK Phone Number in 5-3-3 Format,^[\d]{5}[-\s]{1}[\d]{3}[-\s]{1}[\d]{3}$,Allows dashes or spaces to separate.
2680,UK Phone Number in 5-2-2-2 Format,^[\d]{5}[-\s]{1}[\d]{2}[-\s]{1}[\d]{2}[-\s]{1}[\d]{2}$,Allows dashes or spaces to separate.
2681,UK Phone Number in 5-4-2 Format,^[\d]{5}[-\s]{1}[\d]{4}[-\s]{1}[\d]{2}$,Allows dashes or spaces to separate.
2682,UK Phone Number in 5-2-4 Format,^[\d]{5}[-\s]{1}[\d]{2}[-\s]{1}[\d]{4}$ ,Allows dashes or spaces to separate.
2683,Signed Integer,^[+-]?[0-9]+$,Single- or multi-digit signed Integer.
2684,Decimal Number,"^[+-]?\d*(([,.]\d{3})+)?([,.]\d+)?([eE][+-]?\d+)?$","Matches any integer or decimal number with either dot (.) or comma (,) as decimal- and thousands-separator. Also accepts Scientific notation."
2685,ipv4 IP Address,"^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$",This matches any valid IPV4 IP Address. It includes 0-255 range checks since none of the IP components may exceed 255.
2687,Images FileUpload Control,^.*([^\.][\.](([gG][iI][fF])|([Jj][pP][Gg])|([Jj][pP][Ee][Gg])|([Bb][mM][pP])|([Pp][nN][Gg]))),By using this we can upload only images files. This is the simplest and its execution is fast.
2688,China Drug Spam Blocked,"[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]\.[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][cn]{2,4}",China Drug Spam Blocked
2689,Hexadecimal Colour,"^#?(([a-fA-F0-9]{3}){1,2})$",Matches any valid 3 or 6 digit hexadecimal colour value.
2690,IPv6 Address,"(^\d{20}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff(:[a-fA-F0-9]{1,4}){2}$)|(^([a-fA-F0-9]{1,4}) (:[a-fA-F0-9]{1,4}){7}$)|(^:(:[a-fA-F0-9]{1,4}(::)?){1,6}$)|(^((::)?[a-fA-F0-9]{1,4}:){1,6}:$)|(^::$)","This matches all valid forms of an IPv6 address. Including the compatibility form used to map IPv4 addresses. As well as the base-85 encoded integer form.

It takes care of value range checking on the ipv4 part (components cannot exceed 0-255).

This has been tested quite thoroughly, but considering the complexity and possibilities in the formation of an IPv6 address, matching errors are not guaranteed to be absent."
2691,Split by period/full-stop outside of quotes,"\.(?=([^""]*""[^""]*"")*(?![^""]*""))",This is intended to split a string by full stop except when inside a pair of quotes.
2693,Universal Validation for phone numbers,"var phonePattern = /^(([^\.\-\,a-wy-z]([\(]?(\+|[x])?\d+[\)]?)?[\s\.\-\,]?([\(]?\d+[\)]?)?[\s\.\-\,]?(\d+[\s\.\-\,]?)+[^\.\-\,a-z])|((\+|[x])?\d+))$/i","This pattern will address almost most of the country phone patterns like UK, US, eurpoe, india etc. "
2694,Package Name Validator,^([a-z]+?\.[a-z]+)+\%$,"This can be used to validate package names ending with %. If % is not needed ^([a-z]+?\.[a-z]+)+. (.....) can be used to make that part common. ""+"" is for more than one number of occurences. ""?"" is for one ""."" (dot) charactor
"
2695,double quotes check,"""^[^\""]+$""",this regular expression can be used to validate the existance of double quotes
2696,css definition split,"\s*(""[^""]+""|[^ ,]+)","css definition split on space or comma but keep """" enclosed items for string like

'10pt ""Times Roman"", Helvetica,Arial, sans-serif"
2697,Natural Number with or without preceding zeros ,^[0]*?[1-9]\d*\.?[0]*$,"This matches Natural numbers with or without preceding zeros. 
^[0]+?[1-9]\d*\.?[0]*$ this states there should be atleast one zero"
2698,tlen.pl,"^([a-z]{1}[a-z0-9\-_\.]{2,24})@tlen\.pl$",determines if the selected string is valid tlen.pl communicator login
2699,Indian Rupees Expression,"^([0-9]{1,2},([0-9]{2},)*[0-9]{3}|[0-9]+)$","When you require "","" after every two digits"
2700,Source Code String,"(""((\\.)|[^\\""])*"")","match string between chars "" "" as in source code"
2701,Source Code String singles quote,('((\\.)|[^\\'])*'),match string between chars ' ' as in source code
2702,DMS Coordinate ,"[0-9]{1,2}[:|&#176;][0-9]{1,2}[:|'](?:\b[0-9]+(?:\.[0-9]*)?|\.[0-9]+\b)""?[N|S|E|W]","Matches common Degree, Minute, Second coordinate values. The last part can be easily modified to be latitude or longitude specific by changing
[N|S|E|W] to [N|S] for latitude or [E|W] for longitude."
2703,RFC Registro Federal de Contribuyentes (MEXICO),"^([A-Z|a-z|&amp;]{3})(([0-9]{2})([0][13456789]|[1][012])([0][1-9]|[12][\d]|[3][0])|([0-9]{2})([0][13578]|[1][02])([0][1-9]|[12][\d]|[3][01])|([02468][048]|[13579][26])([0][2])([0][1-9]|[12][\d])|([1-9]{2})([0][2])([0][1-9]|[12][0-8]))(\w{2}[A|a|0-9]{1})$|^([A-Z|a-z]{4})(([0-9]{2})([0][13456789]|[1][012])([0][1-9]|[12][\d]|[3][0])|([0-9]{2})([0][13578]|[1][02])([0][1-9]|[12][\d]|[3][01])|([02468][048]|[13579][26])([0][2])([0][1-9]|[12][\d])|([1-9]{2})([0][2])([0][1-9]|[12][0-8]))((\w{2})([A|a|0-9]{1})){0,3}$","Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of characters for a person or corporation registration . Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda

(includes leap years)"
2704,Simple pattern match,^([A-Z0-9]{5})$,"Simply match to a combination of 5 characters, using capital letters and numbers only. No special characters or lower case letters."
2705,UK Bank Sort Code,^(\d){2}-(\d){2}-(\d){2}$,Validates the format of a UK bank sort code.
2706,UK Bank Account (8 Digits),^(\d){8}$,UK Bank account numbers are 8 digits. One bank uses 7 digits so in the validation error message you should instruct the user to prefix with a zero of their code is too short. If you want to allow the 7 digit codes as well use this regex: http://regexlib.com/REDetails.aspx?regexp_id=2707
2707,UK Bank Account (7-8 Digits),"^(\d){7,8}$",UK Bank Account. One bank account issues 7 digit bank codes and you should prefix a 0 yourself after input. If you want strict validation of 8 characters use this regex: http://regexlib.com/REDetails.aspx?regexp_id=2706
2708,No Whitespace,^[^\s]+$,No whitespace is allowed in a string
2709,match csharp string,""".*?[^""\\]""(?!"")|""""",match the csharp string Syntax
2710,match 2 or 3 string parameters csharp method,"\(\s*@*("".*?[^""\\]""(?!"")||"""")\s*,\s*@*("".*?[^""\\]""(?!"")|"""")\s*(?:\)|(?:,\s*@*("".*?[^""\\]""(?!"")||"""")\s*))?\)",match chsarp method with 2 or 3 string parameters syntax
2711,Mobile,^(01)[0-9]{8},Regular Expression for Egypt Mobile Network
2712,European Date and Time,(((((0[1-9]|[12][0-9]|3[01])/(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)/(0[469]|11))|((0[1-9]|[1][0-9]|2[0-8]))/02)/([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3}) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$))|(29/02/(([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00)) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$))),this expression validates a date-time field in European dd/mm/yyyy hh:mm format
2713,Street Types,A(?:CCESS|LLEY|PPROACH|R(?:CADE|TERY)|VE(?:NUE)?)|B(?:A(?:NK|SIN|Y)|E(?:ACH|ND)|L(?:DG|VD)|O(?:ULEVARD|ARDWALK|WL)|R(?:ACE|AE|EAK|IDGE|O(?:ADWAY|OK|W))|UILDING|YPASS)|C(?:A(?:NAL|USEWAY)|ENTRE(?:WAY)?|HASE|IRC(?:LET?|U(?:IT|S))|L(?:OSE)?|O(?:MMON|NCOURSE|PSE|R(?:NER|SO)|UR(?:SE|T(?:YARD)?)|VE)|R(?:ES(?:CENT|T)?|IEF|OSS(?:ING)?)|U(?:LDESAC|RVE))|D(?:ALE|EVIATION|IP|OWNS|R(?:IVE(?:WAY)?)?)|E(?:ASEMENT|DGE|LBOW|N(?:D|TRANCE)|S(?:PLANADE|TATE)|X(?:P(?:(?:RESS)?WAY)|TENSION))|F(?:AIRWAY|IRETRAIL|O(?:LLOW|R(?:D|MATION))|R(?:(?:EEWAY|ONT(?:AGE)?)))|G(?:A(?:P|RDENS?|TE(?:S|WAY)?)|L(?:ADE|EN)|R(?:ANGE|EEN|O(?:UND|VET?)))|H(?:AVEN|E(?:ATH|IGHTS)|I(?:GHWAY|LL)|UB|WY)|I(?:NTER(?:CHANGE)?|SLAND)|JUNCTION|K(?:EY|NOLL)|L(?:A(?:NE(?:WAY)?)?|IN(?:E|K)|O(?:O(?:KOUT|P)|WER))|M(?:ALL|E(?:A(?:D|NDER)|WS)|OTORWAY)|NOOK|O(?:UTLOOK|VERPASS)|P(?:A(?:R(?:ADE|K(?:LANDS|WAY)?)|SS|TH(?:WAY)?)|DE|IER|L(?:A(?:CE|ZA))?|O(?:CKET|INT|RT)|RO(?:MENADE|PERTY)|URSUIT)?|QUA(?:D(?:RANT)?|YS?)|R(?:AMBLE|D|E(?:ACH|S(?:ERVE|T)|T(?:REAT|URN))|I(?:D(?:E|GE)|NG|S(?:E|ING))|O(?:AD(?:WAY)?|TARY|U(?:ND|TE)|W)|UN)|S(?:(?:ER(?:VICE)?WAY)|IDING|LOPE|PUR|QUARE|T(?:EPS|RAND|R(?:EET|IP))?|UBWAY)|T(?:ARN|CE|ERRACE|HRO(?:UGHWAY|WAY)|O(?:LLWAY|P|R)|RA(?:CK|IL)|URN)|UNDERPASS|V(?:AL(?:E|LEY)|I(?:EW|STA))|W(?:A(?:LK(?:WAY)?|Y)|HARF|YND),Matches any and all matches of the street types detailed at http://www.abs.gov.au/Ausstats/abs@.nsf/66f306f503e529a5ca25697e0017661f/2a46946e38f31d0cca256c62007dbb98!OpenDocument
2714,Single Line CSS,(?<!})\n,"This small regular expression strips newline characters from a CSS file, except where preceded by a right-curly-bracket/brace. This enhances the 'scanability' of your CSS, saving scroll time.  "
2715,Repeating characters limit,"^((.)(?!\2{2,}))+$","This pattern matches strings where no more than two equal characters may come in succession.
To modify the amount of characters allowed, change the second number (the two inside ""{2,}"")to the desired limit."
2716,AlphaNumeric,^([A-Za-z]|[A-Za-z][0-9]*|[0-9]*[A-Za-z])+$,This regular expression accepts any combination of alphabets or alphanumeric.
2717,CIDR notation (subnet),/^(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}([01]?\d?\d|2[0-4]\d|25[0-5])\/(\d{1}|[0-2]{1}\d{1}|3[0-2])$/,"Validates subnet specified by CIDR notation. A valid CIDR notation begins with the IP address followed by a '/' character and a decimal number specifying the length, in bits, of the subnet mask or routing prefix (number from 0 to 32)."
2718,Remove Java/PHP/C++ style multiline comments,/\/\*[\d\D]*?\*\//,If you are caching PHP code you may want to remove long comments from the code before caching it.  This expression will remove all /* */ style comments.
2719,UserNames,"^[\w_.]{5,12}$",validate usernames with dot or underscoures doesn't allow spaces and accept characters between 5 and 15 no other characters
2720,remove space,"^([^\s]){5,12}$",validate text against spaces and accept from 5 to 12 character
2721,Link Match,(http\:\/\/|ftp\:\/\/|https\:\/\/|ftps\:\/\/|file\:\/\/|telnet\:\/\/|www\.)([www\.]?)([a-zA-Z0-9\.\-]+)\.(de|net|org|to|com|biz|co|uk|am|pl),"This will match a lot of uri adresses. Subdomains will be matched as well.
Other Top-Level Domain Endings or Protocols can be added by yourself easily.
I've tested it with PHP but I think it will work with other applications too.
An example:
if(preg_match('~(http\:\/\/|ftp\:\/\/|https\:\/\/|ftps\:\/\/|file\:\/\/|telnet\:\/\/|www\.)([www\.]?)([a-zA-Z0-9\.\-]+)\.(de|net|org|to|com|biz|co|uk|am|pl)~i', $message)) {
do something if the regex is true...
}
Have fun with it. :-)"
2723,Malaysian MyKad,"^\d{2}[0-1][0-9][0-3][0-9]-{0,1}\d{2}-{0,1}\d{4}$","Validation for Malaysian MyKad number, with or without -"
2724,India Phone Numbers ,"^((\+)?(\d{2}[-])?(\d{10}){1})?(\d{11}){0,1}?$","India phone number, accept with optional +91 national code and 0 for land and mobile number prefix . Allows optional - after national code"
2725,,^(((0[13578]|1[02])\/(0[1-9]|[12]\d|3[01])\/((19|[2-9]\d)\d{2}))|((0[13456789]|1[012])\/(0[1-9]|[12]\d|30)\/((19|[2-9]\d)\d{2}))|(02\/(0[1-9]|1\d|2[0-8])\/((19|[2-9]\d)\d{2}))|(02\/29\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$,This expression would match MM/DD/yyyy date fromat with leap years
2726,Numeric Positive and Negative Range -64 to 64,^[0-9]{1}$|^[1-6]{1}[0-3]{1}$|^64$|\-[1-9]{1}$|^\-[1-6]{1}[0-3]{1}$|^\-64$,This regular expression validate a range between -64 and 64.
2727,Folder filename extension,(.*[\\\/]|^)(.*?)(?:[\.]|$)([^\.\s]*$),"This expression returns
$1-folder (including trailing delimiter)
$2-filename (without ext)
$3-extension (excluding dot)

Note: some captures may be blank, in the case the folder, filename or ext is missing

Note2: tested on Perl regular expression engine"
2728,Latitude as decimal,"^-?([1-8]?[0-9]\.{1}\d{1,6}$|90\.{1}0{1,6}$)","Matches a latitude in the range of -90 to 90 degrees, with between 1 and 6 trailing decimal places."
2729,Longitude as decimal,"^-?((([1]?[0-7][0-9]|[1-9]?[0-9])\.{1}\d{1,6}$)|[1]?[1-8][0]\.{1}0{1,6}$)","Matches a longitude in the range of -180 to 180 degrees, with between 1 and 6 trailing decimal places."
2730,MS Project-like Duration Input Validation,^(([0-9]{1})|([0-9]{1}[0-9]{1})|([1-3]{1}[0-6]{1}[0-5]{1}))d(([0-9]{1})|(1[0-9]{1})|([1-2]{1}[0-3]{1}))h(([0-9]{1})|([1-5]{1}[0-9]{1}))m$,"Duration validation similar to MS Project (5d16h45m, etc).  Does not allow more than 365 days, 23 hrs or 59 min."
2731,Cellphones in Argentina,"((\(?\d{2,5}\)?)?(\d|-| )?(15((\d|-| ){6,13})))","This regex will match cellphones from Argentina, which have a 15 prefix. It takes into account optional parenthesis and various digit groupings"
2732,Identify Special Characters,[^a-zA-Z0-9]+,This RE will identify all the special characters(non alpha/numeric).
2733,Validate GUID,((^[{])|^)[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}(?(2)[}]$|$),"This regex will validate a GUID. If the GUID starts with an opening curly bracket, then it must also end in a closing curly bracket. If it does not start with one, then it must not end with one."
2734,Valid GUID (VBScript),^[{][A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}[}]$|^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$,This RegEx validates a GUID number with or without curly brackets. But requires both brackets if any is provided. This version is compatible with VBScript's RegEx engine
2735,Almost any date,"(\d{1,2})\W+(\d{1,2})\W*(\d{2,4})?|(\d{4})\W(\d{1,2})\W(\d{1,2})|([a-zA-Z]+)\W*(\d{1,2})\W+(\d{2,4})|(\d{4})\W*([a-zA-Z]+)\W*(\d{1,2})|(\d{1,2})\W*([a-zA-Z]+)\W*(\d{2,4})|(\d{1,2})\W*([a-zA-Z]+)|([a-zA-Z]+)\W*(\d{1,2})|(\d{2})(\d{2})(\d{2,4})?",This will return the 3 parts of a date for you.  Splice out the empty array portions and use the 3 parts to build/verify the date.
2736,Latitude Validator,"^(\+|-)?(\d\.\d{1,6}|[1-8]\d\.\d{1,6}|90\.0{1,6})$","Matches decimal latitude notation (like that used by Google maps)  Matches -90.000000 through +90.000000 with maximum of 6 decimal places, minimum of 1 decimal place."
2737,Longitude Validator,"^(\+|-)?(\d\.\d{1,6}|[1-9]\d\.\d{1,6}|1[1-7]\d\.\d{1,6}|180\.0{1,6})$",Matches decimal longitude format like that returned by Google maps.  Matches from -180.000000 to +180.000000 with between one and six decimal places.
2738,Wordpress post image dimensions,-[0-9]*[x][0-9]*,"I wanted to get the original size of an image placed into a Wordpress post. This should find the resized image dimensions, from here you should be able to manipulate the size of the image of remove the dimesions to get the image untouched"
2739,"Up to 15 digits followed by 0,1 or 2 floating points","^[0-9]{1,15}(\.([0-9]{1,2}))?$",This might seem like a contrived example but it was written to answer a question on a forum. For regex newbies you can just change the numbers in {} to change the number of required digits to suit your requirements
2741,MD5,/^[A-Za-z0-9]{32}$/,"Matches 32 bit MD5 Hash values, both uppercase and lowercase one's. Mixing cases is allowed. "
2743,Calendar Date,^(0?[1-9]|1[012])/([012][0-9]|[1-9]|3[01])/([12][0-9]{3})$,"In month/day/year format. Matches valid months (1-12) and valid days (1-31) and a valid 4 digit year (from 1000-2999). $1 = month, $2 = day, $3 = year. Sadly, it doesn't check to make sure that months have a valid number of days (no Feb 30th checks, etc)."
2744,IP address validation,^((2[0-5][0-5]|1[\d][\d]|[\d][\d]|[\d])\.){3}(2[0-5][0-5]|1[\d][\d]|[\d][\d]|[\d])$,Validates IP addresses and subnet masks
2745,Email validation,"^([\w\._-]){3,}\@([\w\-_.]){3,}\.(\w){2,4}$",Validates email address
2746,Valid HTML code,"^\<(\w){1,}\>(.){0,}([\</]|[\<])(\w){1,}\>$",validates HTML tags
2747,Validate 15 - 30 Character Passwords,"^(?=.*\d{2})(?=.*[A-Z]{2})(?=.*[\D,\W,\S]{2})(?=.*[a-z]).{15,30}$","For matching passwords (or any words) with the following requirements... 15 - 30 Characters; At least 2 Numeric 0-9, 2 Special !,^,&... & 2 Uppercase A-Z"
2748,Username ,"^[a-zA-Z0-9][a-zA-Z0-9_]{2,29}$",A regexp for general username entry. Which doesn't allow special characters other than underscore. Username must be of length ranging(3-30). starting letter should be a number or a character.   
2749,Date,"^(([0]?[1-9])|(1[0-2]))\/(([0]?[1-9])|([1,2]\d{1})|([3][0,1]))\/[12]\d{3}$","This regular expression matches the format MM/DD/YYYY. Month and Day can have an optional leading 0. Months are from 01-12, days are from 01-31, and years are from 1000-2999."
2750,Picture upload validation,^(.)+\.(jpg|jpeg|JPG|JPEG)$,validates jpg/jpeg picture extension
2751,Google video,"^http://\\.?video\\.google+\\.\\w{2,3}/videoplay\\?docid=[\\w-]{19}",A simple regex for validating a Google link.
2752,non alpha numeric,[^A-Za-z0-9 ],search special character form a given sting space is ignored.
2753,(Java only) Postcodecheck for the Netherlands,^[1-9]\d{3}\s?(?i)(?!(S[ADS]))([A-Z&&[^FIOQUY]]{2})$,"Java only postcodecheck for the Netherlands, case insensitive.

Characters not allowed: FIOQUY

Strings not allowed: SA, SD, SS"
2754,Canada Postal Code,^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$,It matches canada postal code
2755,Email,"^([0-9a-zA-Z]+[-._+&amp;])*[0-9a-zA-Z_-]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$","Meets almost all email address, whacky ones included"
2756,All number between 0001 and 9999,^([1-9]\d{3}|0[1-9]\d{2}|00[1-9]\d{1}|000[1-9]{1})$,This RE will match all numbers between (including) 0001 and 9999. Four places of digits are mandatory in this expression.
2757,Number without all zero,^([\d]*[1-9]+[\d]*)$,RE to match numbers with value greater than 0.
2758,find HTML tags,<table[\s\S]*</table>,Find <table></table> tags in a multiline text
2759,(Java) Time (hh:mm),^([01]?\d|2[0-3]):[0-5]\d$,Matches timeformat (hh:mm)
2761,Fecha (Date) dd/MM/yyyy,"^(([0-9])|([0-2][0-9])|(3[0-1]))((\/)|-)(([1-9])|(0[1-9])|(1[0-2]))((\/)|-)(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$","Esta captura fechas en el formato dd/MM/yyyy permitiendo usar tambien el caracter ""-"" para la fecha"
2765,Numeric expression,^[-+]?\d+(\.\d)?\d*$,Number(no space or thousand separator with point(.) as decimal delimiter.
2767,URL,"((http|ftp|https|ftps):\/\/)?[\w\-_\.]+\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))+(:[0-9]+)?\/?(([\w\-\.,@^%:/~\+#]*[\w\-\@^%/~\+#])((\?[a-zA-Z0-9\[\]\-\._+%\$#\=~',]*=[a-zA-Z0-9\[\]\-\._+%\$#\=~',]*)+(&[a-zA-Z0-9\[\]\-\._+%\$#\=~',]*=[a-zA-Z0-9\[\]\-\._+%\$#\=~',]*)*)?)?","Based on the work of N H (http://regexlib.com/REDetails.aspx?regexp_id=96). Added ftps protocol, makes protocol optional, makes slash after site optional."
2768,Swift Number,"^[a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[XXX0-9]{0,3}",This is the regex for the bank Swift Number
2769,Blood Pressure,^\b(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)\\/(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)$,"Validates blood pressure in the format systolic/diastolic.
both systolic or diastolic can be any number between 1 and 299
"
2770,"Empty, Nothing, Nada","^.{0,0}","Only accepts nothing. I know, sounds stupid, but useful for ""Invisible Textbox Captcha"". Bots will fill in a hidden textbox, and this expression busts them."
2771,UK Telephone Numbers,"((\+44\s?\(0\)\s?\d{2,4})|(\+44\s?(01|02|03|07|08)\d{2,3})|(\+44\s?(1|2|3|7|8)\d{2,3})|(\(\+44\)\s?\d{3,4})|(\(\d{5}\))|((01|02|03|07|08)\d{2,3})|(\d{5}))(\s|-|.)(((\d{3,4})(\s|-)(\d{3,4}))|((\d{6,7})))",Matches over 18 different combinations for UK phone numbers that I could find.  If there are any errors please get in touch.
2772,Curl apostrophes,"'([dmstrl])([ .,?!\)\\/<])","Find apostrophes in text.

I use this to curl them, by replacing the above with this expression:
’$1$2"
2776,GMAT scores validator,^([0-9]|[1-9]\d|[1-7]\d{2}|800)$,Validates if the GMAT score is in the correct range and format
2777,Phone Number (Singapore),^[6]\d{7}$,"In Singapore, the first digit must start with a ""6"", and the rest is made up of 7 digits, which means that there are 8 digits in a Singapore's telephone number."
2778,National Registry Identification Number (Singapore),^[SFTG]\d{7}[A-Z]$,"The National Registry Identification Number (NRIC) of Singapore is made up of the first character being a S/F/T or G. The next 2 numbers is the year of birth for people born 1967 and later. The last character is a checksum done on the numbers, and the algorithm will not be released."
2779,Duration,([0-9]+)\s(d)\s(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9]),"Displays duration in
1 d 22:33:44 format. Can be modified to match some other formats e.g. 1.22:33:44 if needed. Takes a 24-hour day into account."
2781,Match String with keyword,^.*(?:kumar).*$,"This will match those string which contains the word ""kumar"""
2782,Match the numbers,(\b(1|2|3|4|5|6|7|8|9)?[0-9]\b),Match the numbers 1 to 99
2783,Match the numbers,(\b(10|11|12|13|14|15|16|17|18|19)[0-9]\b),Match the numbers 100 to 199
2784,1 to 99 in .5 increments,"^[1-9]{1,2}(.5)?$",This is a simple regular expression which allows 1 to 99 in .5 increments which I originally developed for a forum post
2785,Google Video ID from URL,"'/http:\\/\/\.?video.google.\w{2,3}\/videoplay\?docid=([a-z0-9-_]+)/i'",This will extract the Video Id From Google Video URL which the number sequence after docid= and will check url.. make sure its a valid google link
2786,Host name,[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*,"Multi-part host name validator, RFC-compliant but does not validate length of components or overall length"
2787,HTTP(S) URL,https?://[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*/\S*,"HTTP(S) URL validator with embededded multi-part host name validator, RFC-compliant but does not validate length of components or overall length.  Path portion after host name is free-form and will need refinement if you want to validate it."
2788,Email address,[A-Za-z0-9!#$%&'*+\-/=?^_`{|}~]+(?:\.[A-Za-z0-9!#$%&'*+\-/=?^_`{|}~]+)*@[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*,"Email address validator with embededded multi-part host name validator, RFC-compliant but does not validate length of components or overall length."
2789,Placa de carro nacional BRASIL ,^(([a-zA-Z]{3})?([0-9]{4}))$,"formata&#231;&#227;o de placas de carros brasileiros.
************************
Formatting of license plates Brazilian
"
2791,URL File Name,(?<!/)/(\w+\.\w+)?$,"Gets the file name from a URL including the ""/"". If the URL ends in ""/"" the ""/"" is matched."
2792,"German Street Name, Deutsche Strassennamen","^([A-Z&#196;&#214;&#220;][a-z&#228;&#246;&#252;&#223;]+(([.] )|( )|([-])))+[1-9][0-9]{0,3}[a-z]?$","checks German Street Name with housenumber

without Mannheim

&#220;berpr&#252;ft Deutsche Strassennamen mit Hausnummer (ohne Mannheit)"
2793,US Phone Number,[\+]?[1]?[-. ]?(\(\d{3}\)|\d{3})(|[-. ])?\d{3}(|[-. ])\d{4}|\d{3}(|[-. ])\d{4},match almost all kind of USPhone number
2794,Clipser Video ID from URL,'/http:\\/\/(?:www.)?clipser\.com\/watch_video\/([0-9a-z-_]+)/i',This will extract the Video Id From Video URL which the number sequence and will check url.. make sure its a valid link - expression is in PHP format
2795,Blip Video ID from URL,'/http:\/\/(?:www\.)?blip\.tv\/file\/(\d+).*/',extract video id from blip.tv url - expression is in PHP format
2797,N&#250;meros V&#225;lidos,"^(\d{1,})$|^(\d{1,}\.)$|^(\d{0,}?\.\d{1,})$|^([+-]\d{1,}(\.)?)$|^([+-](\d{1,})?\.\d{1,})$",Express&#227;o Regular para valida&#231;&#227;o de n&#250;meros decimais.
2798,Wii Code format,\d{4}\s\d{4}\s\d{4}\s\d{4}$,"Validate the Wii Code format. If you like to have slashes and spaces you can change the ""\s"" for ""[\s-]"""
2799,Strong password,"^(?=(.*[a-zA-Z].*){2,})(?=.*\d.*)(?=.*\W.*)[a-zA-Z0-9\S]{8,15}$","Strong passwords with min 8 - max 15 character length, at least two letters (not case sensitive), one number, one special character (all, not just defined), space is not allowed."
2800,tags,/(<[Ii][Mm][Gg]|<\?|<\?php|<[Ss][Cc][Rr][Ii][Pp][Tt]|<[Ii][Nn][Pp][Uu][Tt]|<%|<[Aa]|<[Ff][Oo][Rr][Mm])/,"test image, input, form and link html tag + php, jsp and script tag"
2801, Phone Number Validation for Finland,"^((([\+][\s]{0,1})|([0]{2}[\s-]{0,1}))([358]{3})([\s-]{0,1})|([0]{1}))(([1-9]{1}[0-9]{0,1})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1}))([0-9]{0,3}){1}$","General phone number validation for Finland.
It will pass old and new format numbers.
Between numbers space or dash can be used ones. 
number has to start
+358 or 00358 or 0 
are code can be 2 or 3 digit. I could not come with better idea then this"
2802,Strong password,"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d.*)(?=.*\W.*)[a-zA-Z0-9\S]{8,15}$","Strong passwords with min 8 - max 15 character length, at least one uppercase letter, one lowercase letter, one number, one special character (all, not just defined), space is not allowed."
2803,Date validation,"\b([0]?[1-9]|[1,2]\d|3[0,1])[-/]([0]?[1-9]|[1][0,1,2])[-/](\d{1,2}|[1][9]\d\d|[2][0]\d\d)\b","Validates strings of type dd/mm/yyyy. checking dd to be between 1-31, mm between 1-12 and yyyy between 1900-2099."
2804,positive (non-negative) decimal value less than or equal to 24 with maximum 2 floating point values,"^([0-2]{0,1})([0-3]{1})(\.[0-9]{1,2})?$|^([0-1]{0,1})([0-9]{1})(\.[0-9]{1,2})?$|^-?(24)(\.[0]{1,2})?$|^([0-9]{1})(\.[0-9]{1,2})?$",Allows positive(non-negative) decimal values with 2 floating point values and less than or equal to 24.
2805,UK Landline including VOIP,"^(02\d\s?\d{4}\s?\d{4})|((01|05)\d{2}\s?\d{3}\s?\d{4})|((01|05)\d{3}\s?\d{5,6})|((01|05)\d{4}\s?\d{4,5})$","Based on the source listed below. I have added in the 05 prefix for allowing UK voip landlines. I dont know if the spacings are all ofcom approved like the original regex but the patterns it supports are:

029 99999999 or 029 9999 9999; 0199 9999999 or 0199 999 9999; 01999 99999; 01999 999999; 019999 9999; 019999 99999; 0599 9999999 or 0599 999 9999; 05999 99999; 05999 999999; 059999 9999; 059999 99999;"
2806,Belgian VAT Number,^(BE)[0-1]{1}[0-9]{9}$|^((BE)|(BE ))[0-1]{1}(\d{3})([.]{1})(\d{3})([.]{1})(\d{3}),VAT Number BE. Assumes BE followed by 0 or 1 or ' ' the digits will grouped by xxxxxxxxxx or xxxx.xxx.xxx. If you only want VAT numbers starting with 0 then replace [0-1]{1} with [0]
2807,Date Format: MM-DD-YYYY or MM/DD/YYYY,/^\d{2}[\-\/]\d{2}[\-\/]\d{4}$/,This will match date values with the format mm-dd-yyyy or mm/dd/yyyy
2808,Indian Phone number,"/((\d){2})?(\s|-)?((\d){2,4})?(\s|-){1}((\d){8})$/",This expression is not working for this +91-020-41056767. If i enter +91555-020555-41056767 still its working. Please help me. Send me the correct expression on my email id cgadgilwar@gmail.com
2809,Password Verification,"^(?=.*\d)(?=.*[A-Za-z])(?!.*[!@#\$%\^&\*\(\)\+=\|;'""{}<>\.\?\-_\\/:,~`]).{6,20}$",Validates passwords to be 6-20 characters of letter and numbers and NO special characters (that appear on the keyboard). Adjust numbers at the end and remove special characters as needed.
2810,Groups,\?<.+?>,"Matches the name portion of a named group. Useful for ""cleaning"" regular expressions for use with ASP controls (since they don't support named groups)."
2814,Validate IP port number (1-65535),":(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})","This was based on the regex in the source but it was buggy so I fixed it and then optimized it.

It matches port numbers in the form of :1 to :65535

This is designed to be plugged onto the end of your favourite url regex because when I was looking for a IPv4 regex I noticed that a lot of them either didn't match the port or matched it badly (allowing the port number to start with a 0 or be higher than 65535)

This regex solves those two problems."
2815,Validate optional IP port number (1-65535),"(:(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))?",This is the same as my regex listed in the source except that it is wrapped in (regex)? which makes it optional. The intended use for this regex is to be combined with buggy url/ip regex's to strengthen the port matching. It matches port numbers in the form of :1 to :65535 and also allows no port to be entered. I noticed that a lot of url/ip regexs either didn't match the port or matched it badly (allowing the port number to start with a 0 or be higher than 65535) This regex solves those two problems.
2816,"U.S. Phone numbers, multiple styles",([(]?\d{3}[)]?(-| |.)?\d{3}(-| |.)?\d{4}),Can handle a variety of standard phone formats.
2817,Credit Card,"((4\d{3})|(5[1-5]\d{2})|(6011))[\s\-\.]*\d{4}[\s\-\.]*\d{4}[\s\-\.]*\d{4}|3[4,7]\d{13}$","This builds on some of the other credit card regular expressions. This identifies whitespaces, dashes and dots and checks for credit card numbers. Works with Visa Master Card Amex and Discover."
2818,ed2k Link,(ed2k://)([\x00-\xFF]*)(|/),"Select the ed2k download link.

It use the hexadecimal range of ascii chars"
2819,Degree Range,"^(3(([0-5][0-9]{0,2})|60))|([1-2][0-9]{2})|(^[1-9]$)|(^[1-9]{2}$)$",Pattern that evaluetes a number between 0 and 360
2820,Phone Number,(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*,This expression will find phone numbers regardless of seperators used
2821,Java class name (global),"^([a-z]{2,3}(\.[a-zA-Z][a-zA-Z_$0-9]*)*)\.([A-Z][a-zA-Z_$0-9]*)$","Regular Expression for validating fully qualified Java Class Names that follows the Java Naming Conventions for widely available classes (see: http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.8).

Group 1 gives the package name, group 3 gives the class name."
2822,private ip range check,^(1(0|7|9)2?)\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$,"validates private ip addresses
needs to  be a bit more refined "
2823,mac ,^([0-9a-fA-F][0-9a-fA-F]){5}([0-9a-fA-F][0-9a-fA-F])$,mac id check/validate
2824,Java class name (local),^(([a-zA-Z][a-zA-Z_$0-9]*(\.[a-zA-Z][a-zA-Z_$0-9]*)*)\.)?([a-zA-Z][a-zA-Z_$0-9]*)$,"Regular Expression for validating fully qualified Java Class Names that follows the Java Naming Conventions for local classes (see: http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.8).

Group 2 gives the package name, group 4 gives the class name.
"
2825,Hungarian phone number,"^(\+?36)?[ -]?(\d{1,2}|(\(\d{1,2}\)))/?([ -]?\d){6,7}$",Regex for validating format of Hungarian phone numbers.
2826,Private IPs,"((^192\.168)|(^172\.(((01|1)[6-9])|((02|2)[0-9])|((03|3)[0-1]))))\.[0-9]{1,3}\.[0-9]{1,3}",RegEx for IPs in private Networks.
2827,0-10 in 0.5 increments,^((10)|([0-9](\.(0|5))?))$,Matches a number from 0-10 in 0.5 increments. Was used for a rating system.
2828,Match Script block ,\<script[^>]*>[\w|\t|\r\|\W]*?</script>,match all script blocks in html file or aspx file.
2829,Numeric Accept,"^-?\d+([.,]?\d+)?$","It just accepts negative and positive numeric entries. Dot (.) or comma (,) signs accepted only once."
2830,Positive Numeric Accept,"^\d+([.,]?\d+)?$","It just accepts only positive numbers. Also accepts Dot (.) and comma (,) signs only once."
2831,Just Integer,"^-?\d+([^.,])?$",Accepts positive and negative integers.
2832,Just Positive Integer,"^\d+([^.,])?$",Accepts positive integers.
2833,Mobile Phones - Portugal,^([9]{1})+(6|3|2|1{1})+([0-9]{7})$,"A regex for cellphone numbers in Portugal, for the three major operators (TMN, Optimus, Vodafone).

2 numbers (91/96/93/92) + 7 others."
2834,Error|Warning|Exception,(?:Error|Warning|Exception),"Find any and all occurences of any of the three terms ""Error"" ""Warning"" ""Exception"" in a log or txt file.
Use this as a filter with TextAnalysisTool.NET for quick parsing of log files when looking for errors"
2835,Date and Time,^(\s(SUN|MON|TUE|WED|THU|FRI|SAT)\s+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\s+(0?[1-9]|[1-2][0-9]|3[01])\s+(2[0-3]|[0-1][0-9]):([0-5][0-9]):((60|[0-5][0-9]))\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2}))$,To parse the above type of detailed date and time format.
2836,Canadian Postal Code,^(?![DFIOQU])([ABCEGHJ-NPRSTVXY]\d[A-Z][ ]\d[A-Z]\d)$,"Validates Canadian postal codes.
Format: A9A 9A9
Cannot contain: DFIOQU
First letter must be one of: ABCEGHJKLMNPRSTVXY"
2837,frt,fferyhre@34-87568,TE RYBHBRTY6TU
2838,Search Engine Keywords,[\?|&][q|gs|p|query|search|keywords|key|terms|ask|searchfor|srctxt|text|su|kw]\=([^&]*),url for search engines to receive query word. q=example or  p=example or query=example or  keywords=example ....
2839,South African Mobile  or Telephone Number,"""^(27|0)[0-9]{9}""",South African 
2840,"A Liberal, Accurate Pattern for Matching URLs",\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/))),"Identifies the URLs in an arbitrary string of text, where by “arbitrary” let’s agree we mean something unstructured such as an email message or a tweet.  Source: daringfireball.net"
2842,domain,[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+,domain as defined in RFC 2821
2843,at domain list,"@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+(?:,@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)*",A-d-l or at-domain-list as defined in RFC 2821
2844,atext,[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~],atext as defined in RFC 2822
2845,mailbox,[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+(?:\.[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+)*@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+,mailbox as defined in RFC 2821
2846,forward-path,"^<(?:@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+(?:,@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)*:)?([a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+(?:\.[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+)*@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)>$",forward-path and reverse-path as defined in RFC 2821
2847,Porcentagem,"^(100([\.\,]0{1,2})?)|(\d{1,2}[\.\,]\d{1,2})|(\d{0,2})$","Porcentagem positiva de 0 a 100 com at&#233; 2 casas decimais, usando . (ponto) ou , (virgula)."
2848,Date Format : MM/DD/YYYY,^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$,It check the date format (MM/DD/YYYY).
2849,Non-HTML English sentences,"^[-\w\s""'=/!@#%&,;:`~\.\$\^\{\[\(\|\)\]\}\*\+\?\\]*$",Anti-HTML pattern for english sentences. any < or > will make it not match.
2850,Social Security Number - All Rules Enforced,^((?!000)(?!666)([0-6]\d{2}|7[0-2][0-9]|73[0-3]|7[5-6][0-9]|77[0-1]))-((?!00)\d{2})-((?!0000)\d{4})$,"Could not find a regex that truly matched the rules here http://en.wikipedia.org/wiki/Social_Security_number#Valid_SSNs So I modified an existing one to match the valid SSN rules.
The first digit set will not match:

000, 666, 734 to 749, and greater than 772.

* Numbers with all zeros in any digit group (000-xx-####, ###-00-####, ###-xx-0000)"
2851,cn domain Expression,^[a-zA-Z0-9\-]+\.cn$,select .cn from domain where nic.deleted
2854,NL Street Address,"\A(.*?)\s+(\d+[a-zA-Z]{0,1}\s{0,1}[-]{1}\s{0,1}\d*[a-zA-Z]{0,1}|\d+[a-zA-Z-]{0,1}\d*[a-zA-Z]{0,1})",This pattern splits the streetname and housenumber of Dutch Postal Addresses.
2855,Twitter Username,"^([a-zA-Z0-9]{1,15})$",Simple validation reg ex that requires 1-15 alphanumeric characters
2857,Currency - Money,"^(-?\$?([1-9]\d{0,2}(,\d{3})*|[1-9]\d*|0|)(.\d{1,2})?|\(\$?([1-9]\d{0,2}(,\d{3})*|[1-9]\d*|0|)(.\d{1,2})?\))$","Handles any kind of money entry. With $ sign or not, with commas or not. With bracket, negative sign or none. Max of 2 decimal points. It's perfect :)"
2858,Vat Rate,"^([1-9]{0,1})([0-9]{1})((\.[0-9]{0,1})([0-9]{1})|(\,[0-9]{0,1})([0-9]{1}))?$",Vat percentage format for Indian and Germany.Maximum two digit before decimal and after decimal
2859,Germany PostCode ,^([012346789][0-9]{4})$,Validate Germany postcode contains only 5 digits and starting with 0 to 9.
2860,Germany pincode,^([012346789][0-9]{4})$,Validate Germany pincode only.It Contains 5 digits only starting with any digit from 0 to 9.
2861,WII Wifi Friend Code Validator,(?:[0-9]{4}-){3}[0-9]{4},Validates WII Wifi friend codes
2862,Ordnance Survey Grid Reference (with Tetrads),((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?(([a-np-zA-NP-Z]{1}?|([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?)),Matches standard 0- to 10-figure (including 2km tetrad references) Ordnance Survey of Great Britain (OSGB) Grid References
2863,Url,"^(((h|H)(t|T))(t|T)(p|P)((s|S)?)\:\/\/)?((www|WWW)+\.)+(([0-9]{1,3}){3}[0-9]{1,3}\.|([\w!~*'()-]+\.)*([\w^-][\w-]{0,61})?[\w]\.[a-z]{2,6})(:[0-9]{1,4})?((\/*)|(\/+[\w!~*'().;?:@&=+$,%#-]+)+\/*)$",This expression matches url that starts with or without http(s) 
2864,Password,"(?!^[0-9 ]*$)(?!^[a-zA-Z ]*$)^([a-zA-Z0-9 ]{6,15})$",This expression validates alphanumeric with one alphabet compulsory and one numeric compulsory and accepts minimum 6 characters and max 15 characters irrespective of the order and case.It doesnt accept special characters
2865,URL,"^((http|HTTP|https|HTTPS|ftp|FTP?)\:\/\/)?((www|WWW)+\.)+(([0-9]{1,3}){3}[0-9]{1,3}\.|([\w!~*'()-]+\.)*([\w^-][\w-]{0,61})?[\w]\.[a-z]{2,6})(:[0-9]{1,4})?((\/*)|(\/+[\w!~*'().;?:@&=+$,%#-]+)+\/*)$",This expression validates urls that starts with http/HTTP/https/HTTPS/ftp/FTP/www/WWW.Its accepts either capital letters or small letters.Address is not case sensitive
2866,IPV4 and IPV6 address,"^(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))|([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})$",IPV4 and IPV6 address
2868,Fortran 95 Variable Name,"^[a-zA-Z]\w{0,30}$",A simple expression to verify a FORTRAN variable name to within 31 chars.
2869,dsfdsf,df,fdsf332
2870,Alphp numeric Underscore ,^[A-Za-z0-9_]+$,This expression checks whether the string contains lower or uppercase characters and numbers from zero to nine and an underscore
2871,UserId Validation,"^(?=.*[a-zA-Z])[^\*\s]{4,8}$","Validates a userID to be between 4 and 8 characters - no whitespace or asterisks and at least one alpha.

^(?=.*[a-zA-Z])  searches for one alpha

[^\*\s] rejects all white space and asterisks

{4,8} limits from 4-8 characters.
"
2872,CA Drivers License,"""^[A-Z]{1}\d{7}$","Matches California Drivers License Numbers. A Letter followed by 7 Numbers. I have not been able to find a site that shows only the number/letters CA uses, so this will have to do for now."
2873,US Street Address Only,"^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$","This will accept any 6 digit street address only, with min of two and up to four street names."
2874,US Phone Number,\(\d{3}\)\040\d{3}-\d{4},Phone Number in (###) ###-#### Format Only
2875,US Phone So CA Area Codes,\(714|760|949|619|909|951|818|310|323|213|323|562|626\)\040\d{3}-\d{4},Phone Numbers Format (###) ###-#### with only SoCal Area Codes. Use or replace with Area Codes You need.
2876,US Phone So CA Area Codes 2,714|760|949|619|909|951|818|310|323|213|323|562|626-\d{3}-\d{4},Phone Number in ###-###-#### Format Only with Southern California Area Codes. Use or Replace Area Codes
2877,CA Contractors License ,\d{6},Simple 6 digit CA contractors License #
2878,Vehicle Registration Series for India,^([A-Z]{2}\s?(\d{2})?(-)?([A-Z]{1}|\d{1})?([A-Z]{1}|\d{1}))$,this is usefull for Series of Vehicle Number of Indian Transport
2879,Complete Vehicle Registration Number For Indian Transport Dept.,^([A-Z]{2}\s?(\d{2})?(-)?([A-Z]{1}|\d{1})?([A-Z]{1}|\d{1})?( )?(\d{4}))$,"Ex.- RJ21-CA 1232
PB08-PA 4354"
2880,US Phone Number[ANY format],"^\D{0,2}[0]{0,3}[1]{0,1}\D{0,2}([2-9])(\d{2})\D{0,2}(\d{3})\D{0,2}(\d{3})\D{0,2}(\d{1})\D{0,2}$","Very useful if you want to use ANY-NON-DIGIT as delimiter and return proper US-Phone-Number. Use ""($1) $2-$3$4"" to get Number in form: ""(234) 567-8901"". 
Will ignore starting 1, 01, 001, +1 etc. 
Validates and also captures AreaCode, Prefix and Suffix for reformatting.
In all matching examples, it will return the same result. I have not found any exception yet."
2881,extract all URLs from a string,"'`.*?((http|ftp|https)://[\w#$&+,\/:;=?@.-]+)[^\w#$&+,\/:;=?@.-]*?`i'","With this expresion you ll be able to extract all the urls of a given text or HTML page.
Works fine using the PHP preg_match function"
2882,HtmlAmpCode,((&#[0-9]+|&[a-zA-Z]+[0-9]*?);),Matches HTML 'amp' codes
2884,Ultimate URL Match Expression,"^(?:(?:http|https|ftp|telnet|gopher|ms\-help|file|notes)://)?(?:(?:[a-z][\w~%!&amp;',;=\-\.$\(\)\*\+]*):.*@)?(?:(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(?::[0-9]+)?))?(?:(?:(?:/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))+)*/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*)(?:\?[^#]+)?(?:#[a-z0-9]\w*)?)?$","I think this is the ultimate url match expression to every possible url pattern including named or ip address domain

PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com"
2885,E-mail address,"^(?:mailto:)?(?:[a-z][\w~%!&amp;',;=\-\.$\(\)\*\+]*)@(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))$","I think this is a very good e-mail validation match expression

PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com"
2887,Domain Name or IP,^(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))$,"accepts
- Domain name
- or ip address"
2888,URL Path,^(?:(?:\.\./)|/)?(?:\w(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*\w?)?(?:/\w(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*\w?)*(?:\?[^#]+)?(?:#[a-z0-9]\w*)?$,"parse/match url path with:
1. optional relative path
2. optional query string
3. optional fragments"
2889,Email pattern regular expression,"^((([a-z0-9])+([\w.-]{1})?)+([^\W_]{1}))+@((([a-z0-9])+([\w-]{1})?)+([^\W_]{1}))+\.[a-z]{2,3}(\.[a-z]{2,4})?$","A simple email checking regex . Works with all regular email addresses . Allows only 'a-z' '-' '_' and '.'  to be included withing the user name which must to be started and teminated with 'a-z' and could not have any symbol sequence (like '-_' '._') in it's body .

Must have at least 1 and max 2 sub-domains and 1 TLD (2-4 letters long a must). 

Use tolower() before this regex or just add A-Z or ?i flag within the pattern in order to match both cases .

Please see the examples ."
2890,HTML Color,"^#[\dA-Fa-f]{3}(?:[\dA-Fa-f]{3}[\dA-Fa-f]{0,2})?$","matches # + 3 hex numbers + optional 3 more hex numbers and 2 more hex numbers for alpha

PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com"
2891,MySQL Connection String,Server=([\w\.]+?);\s*?(?:Port=(\d+?);\s*?)?Database=(\w+?);\s*?(?:(?:User)|(?:Uid))=(\w+?);\s*?(?:(?:Password)|(?:Pwd))=(\w*?);.*,"Matches a MySQL connection string if the arguments are in the specified order.

Fails if arguments are missing."
2893,XML/XSD URL,"((http|https|ftp|telnet|gopher|ms\-help|file|notes)://)?(([a-z][\w~%!&amp;',;=\-\.$\(\)\*\+]*)(:.*)?@)?(([a-z0-9][\w\-]*[a-z0-9]*\.)*(((([a-z0-9][\w\-]*[a-z0-9]*)(\.[a-z0-9]+)?)|(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(:[0-9]+)?))?(((/([\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(%\d\d))+)*/([\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(%\d\d))*)(\?[^#]+)?(#[a-z0-9]\w*)?)?",I think this is the ultimate url match expression to every possible url pattern including named or ip address domain PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com
2894,Pakistan Phone Number,"^(\+)?([9]{1}[2]{1})?-? ?(\()?([0]{1})?[1-9]{2,4}(\))?-? ??(\()?[1-9]{4,7}(\))?$",Mathes all mobile and landline numbers in pakistan
2895,DTMF,^[0-9#\*abcdABCD]+$,"Tests expression for DTMF combinations (numbers 0-9, asterisk, octothorpe and A,B,C,D or a,b,c,d). Does not limit number of occurrences or their order."
2896,PESEL,[0-9]{4}[0-3]{1}[0-9}{1}[0-9]{5},Polish national ID number PESEL (Powszechny Elektroniczny System Ewidencji Ludnosci).
2897,clipvn,clipvn,[CLIPVN]Put Clip.vn URL Here[/CLIPVN]
2898,clipvn,clipvn,[CLIPVN]Put Clip.vn URL Here[/CLIPVN]
2899,Numero de tel,((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4},Mise en forme du num&#233;ro de t&#233;l&#233;phone
2900,CSV - Numbers,"^[0-9]+(,[0-9]+)*$",Parses comma-separated numbers. Doesn't allow spaces inbetween numbers and/or between numbers and commas. Allows single number to be added. Doesn't allow sequence to end with a comma.
2901,Validate Time,^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$,Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
2902,Validate Time,^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$,Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
2903,Validate Time,^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$,Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
2904,erik,sdgsdf,dfgdfg
2905,URL Validator,"/^(https?|ftp)(:\/\/)(([\w]{3,}\.[\w]+\.[\w]{2,6})|([\d]{3}\.[\d]{1,3}\.[\d]{3}\.[\d]{1,3}))(\:[0,9]+)*(\/?$|((\/[\w\W]+)+\.[\w]{3,4})?$)/","This expression will test against most URLs and return whether they are valid URL's or not. It will allow some false positives in that it is only checking for the correct character count, but this could be enhanced by adjusting it to check for specific TLDs or file extensions."
2906,India Mobile Number,for mobile:^[0][1-9]{1}[0-9]{9}$,"India mobile number, accept 0  prefix "
2907,India phone number..that is Landline number,^[0][1-9]{2}(-)[0-9]{8}$  and  ^[0][1-9]{3}(-)[0-9]{7}$  and  ^[0][1-9]{4}(-)[0-9]{6}$,"India phone(landline) number, accept 0 for prefix and - (hifen) after the STD code."
2908,E maill format,\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*,This can check the email of any kind..
2909,Check Decimal values,"^[\-]{0,1}\d{0,8}$|^[\-]{0,1}\d{0,8}(\.\d{0,4})$","check your decimal 13,4 values"
2910,India Mobile Number with +91,^((\+){1}91){1}[1-9]{1}[0-9]{9}$,In this Pattern +91 will be the prefix in the Mobile number(of 10 digits).
2916,Numeric 0 to 29,^(([0-2])?([0-9]))$,It is use for 0 to 29.
2918,SKK-XML-All child nodes with no nested nodes,"<(\w+)(\s(\w*="".*?"")?)*((/>)|((/*?)>.*?</\1>))","All child nodes with no nested nodes
----------------------
http://regexlib.com/REDetails.aspx?regexp_id=433"
2919,IPv6 addresses including compressed and IPv4-embedded variants (RFC 2373),"(::|(((0:){5}(0|[fF]{4})|:(:[fF]{4})?):((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?|0)(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?|0)){3}))|([a-fA-F0-9]{1,4}:){7}([a-fA-F0-9]{1,4})|(:(:[a-fA-F0-9]{1,4}){1,6})|(([a-fA-F0-9]{1,4}:){1,6}:)|(([a-fA-F0-9]{1,4}:)(:[a-fA-F0-9]{1,4}){1,6})|(([a-fA-F0-9]{1,4}:){2}(:[a-fA-F0-9]{1,4}){1,5})|(([a-fA-F0-9]{1,4}:){3}(:[a-fA-F0-9]{1,4}){1,4})|(([a-fA-F0-9]{1,4}:){4}(:[a-fA-F0-9]{1,4}){1,3})|(([a-fA-F0-9]{1,4}:){5}(:[a-fA-F0-9]{1,4}){1,2}))","This RE recognizes IPv6 addresses for all the representations described by RFC 2373:
1) extended format (with both upper and lowercase HEX)
2) compressed format (eg 2001::6:a)
3) IPv4-embedded format (eg ::ffff:1.2.3.4)

Resulting from observation of real-world implementations, case 2) is extended to allow ""::"" for one 0-group alone. Although the RFC is clear on ""::"" being for ""multiple groups of 16-bits of zeros"" only, some tools like ""dig"" for the mac produce those values.

The RE is simple and quite elegant; it has been tested on over 300 IPv6 addresses collected by dig-ing IPv6-enabled domains; it is used in sshguard's log parser, see http://www.sshguard.net ."
2920,Simple date,"(^\d{1,2}\.\d{1,2}\.\d{4})|(^\d{1,2}\.\d{1,2})|(^\d{1,2})$",simple test for C# inputs and CZ locale. No all accepted inputs are corect.
2921,Numbers 1-10,^[1-9]0?$,Numbers ranging from 1 through 10 
2922,IP address,^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$,This regular expression validates an IP address within the range of 1.0.0.0 to 255.255.255.255
2923,UK Limited Company Number,"^\d{8,8}$|^[SC]{2,2}\d{6,6}$","Matches against a valid UK Limited company numer, either Scotland, Wales England or Northern Ireland. Either 8 numerical digits or SC followed by 6 numerical digits are allowed"
2924,Megaupload link,megaupload\.com.*(?:\?|&)(?:(?:folderi)?d|f)=([A-Z-a-z0-9]{8}),Detects megaupload files and folders links.
2925,Not contain blank or 0,"^[^ ,0]*$",Used for a dropdown list that might have a couple of default selections you want to include.
2926,Test integer value,"^\d{4,}$|^[3-9]\d{2}$|^2[5-9]\d$","This particular expression tests an integer value to see if it's equal to or greater than 250. 
Obviously you can alter it to test other values.
The first section passes all four-digit or greater integers.
The second section passes all 3-digit integers greater than 300.
The last section requires that three digit integers with ""2"" at their start must have 5 or greater for their second digit."
2927,U.S. Phone Number,(\+?1[- .]?)?[.\(]?[\d^01]\d{2}\)?[- .]?\d{3}[- .]?\d{4},Matches most format of valid U.S. phone number. Only numbers whose first digit of area code is between 2 and 9 and whose country code is 1 would be matched. Does not match phones contain characters. See examples for more information.
2930,1 to 9999 Positive Numbers,^[1-9]{1}$|^[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}$|^9999$,This is only +ive numbers excluding 0. It takes 1 to 9999.
2931,For Accepting only Indian mobile numbers with exactly 10 Digits or blank,^[89][0-9]{9},This will accept all the Mobile nos starting with 8 or 9 and having exactly 10 digits (total) or it must be blank
2932,RecID,((<data name=){4}[^=]+>)([^=]*)(</data>){4},Unecsape Bad Characters
2933,Dutch date & time combination,^([3]{1}[0-1]{1}|[1-1]?[0-9]{1})-([0-1]?[0-2]{1}|[0-9]{1})-[0-9]{4}([\s]+([2]{1}[0-3]{1}|[0-1]?[0-9]{1})[:]{1}([0-5]?[0-9]{1})([:]{1}([0-5]?[0-9]{1}))?)?$,"Validates dutch (european) date and time combination (dd-mm-yyyy). Dates are accepted, date and time is accepted. The time notation (hh:mm:ss) may or may not contain a value for seconds"
2934,Pattern to validate an Email,"/^[a-z][\w\.]+@([\w\-]+\.)+[a-z]{2,7}$/i",This pattern is set to case in-sensitive (i.e '/i').
2935,US Phone Validation,^[\d]{3}[\s\-]*[\d]{3}[\s\-]*[\d]{4}\s*$,Used to check US phone pattern
2936,Style background-image attribute,background-image.[^<]*?;,returns the background-image property with its value. It will not return the uppercase property value like Background-image. 
2937,Javascript regex for URL with optional domain name,"^(http|https)\://((([a-z]+)(([a-z0-9\.\,\?\'\\\+&%\#\=~_\-]+)?([a-z0-9\/]+))?)|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]|0)))(\:[0-9]+)*(([a-z0-9\.\,\?\'\\\+&%\#\=~_\-]+)?([a-z0-9\/]+))?\$","Matches the folloings -

http://a (without domain name, for local network machines)
http://abcd (any length)
http://www.abcd.com
http://www.abcd.com/a
http://www.abcd.com:800
http://www.abcd.com:800/a
http://255.255.255.255
http://255.255.255.255:800
http://www.google.co.in/setprefs?sig...fAvHcHs=&hl=hi

The following URLs are invalid

http://a. (any string ending with special character)
http://*a (starting with special character)

One limitation of the regex is that it doesn't check the list of valid domains. I purposefully kept it out since that list is very long (http://www.norid.no/domenenavnbaser/domreg.html). Otherwise I think it will work fine."
2939,101/ or 101-,^\d[0-9]*[-/]\d[0-9]*$,"\d[0-9]*
1)start should be from 0 to 9, any digit number, should not be blank.

[-/]
2)- or / compulsary.

\d[0-9]*
3)start should be from 0 to 9, any digit number, should not be blank.

4)Blank not allowed"
2940,Time in HHMMSS format,^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])([0-5][0-9])$,Validates time in HHMMSS format where valid times range from 000000 to 235959
2941,Path extraction,(^(?:\w\:)?(?:/|\\\\){1}[^/|\\]*(?:/|\\){1}),"To extract the first path from both windows and unix complete path (need / or \ at the end if we have only one path, but can be easily change)"
2942,IP address,"^(([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])$",This is a standard perl-compatible regexp for ip4 address validation
2943,Seven digit number with leading zeros,^(000000[1-9])$|^(00000[1-9][0-9])$|^(0000[1-9][0-9][0-9])$|^(000[1-9][0-9][0-9][0-9])$|^(00[1-9][0-9][0-9][0-9][0-9])$|^(0[1-9][0-9][0-9][0-9][0-9][0-9])$|^([1-9][0-9][0-9][0-9][0-9][0-9][0-9])$,This will check to see if the string entered is all digits and is seven digits long. It will allow for leading zeros and also not allow for all zeros to be entered.
2944,date validation javascript,^((((0?[13578]|1[02])\/([0-2]?[1-9]|20|3[0-1]))|((0?[469]|11)\/([0-2]?[1-9]|20|30))|(0?2\/([0-1]?[1-9]|2[0-8])))\/((19|20)?\d{2}))|(0?2\/29\/((19|20)?(04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)|2000))$,Check that a valid date has been entered. Uses mm/dd/yyyy or m/d/yy format or various combinations. Checks for valid leap years.
2945,Regular expression for comma separated integer values,"^[0-9][0-9,]*[0-9]$","It is for Comma separated integer values only.it won't allow comma before and end string.
Valid Expression :
123,345,4444444,56,6
Invalid Expressions :
12,@@34,fsff,333,
,12,234,456
34,567,3456,
111,11fff,&*,fff,567

the above all invalid."
2946,MySQL Query File,"(?:
 ""(?:(?:(?:\\.)|[^""\\\r\n])*)""| #double-quoted strings
 '(?:(?:(?:\\.)|[^'\\\r\n])*)'| #single-quoted strings
 `(?:(?:(?:\\.)|[^`\\\r\n])*)`| #backticked names
 (?:\s?(?:\#|--\ ).*(?=[\r\n]))| #hash comments or double-dash comments
 (?:/\*(?:(?!\*/)[\s\S]*(?!\*/)[\s\S])\*/)| #multiline comments
 (?:[^;`'""](?!(?:--\ |\#|/\*)))* #everything else not quote or followed by comment
 (?:[^;`'""](?=(?:--\ |\#|/\*)))? #that last possible character before that comment
) * #space at the end in case ""ignore comments/whitespace"" is turned off","Splits a mysql query file by matching everything but the semicolon at the end. Handles all three comments (""-- "", ""#"", ""/*...*/""), all three quotes ("", ', `), and all three line break styles (\r, \n, \r\n).

Use with multiline and ignore whitespace/comments."
2947,italian mobile number,^(([+]|00)39)?((3[1-6][0-9]))(\d{7})$,"Check if the number is a valid italian mobile number. Note: even though 35X is non given yet, this regular expression consider it a valid number just in case it will be!"
2948,ip_regex,"^((0*[0-1]?[0-9]{1,2}\.)|(0*((2[0-4][0-9])|(25[0-5]))\.)){3}((0*[0-1]?[0-9]{1,2})|(0*((2[0-4][0-9])|(25[0-5]))))$",Matches ip addresses. Takes into account trailing left zeros.
2949,Password Validation,"^(?!.*(.)\1{3})((?=.*[\d])(?=.*[A-Za-z])|(?=.*[^\w\d\s])(?=.*[A-Za-z])).{8,20}$","8-20 chars;
at least one alpha;
at least one number or special char;
up to 3 repeating chars, no more"
2950,UK NINO - National Insurance Number,\b([A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}(?<!BG|GB|NK|KN|TN|NT|ZZ))[0-9]{6}[A-DFM]{1}\b,"First letter cannot be: D, F, I, Q, U, or V
Second letter cannot be: D, F, I, O, Q, U, or V
The first two character combinations BG, GB, NK, KN, TN, NT, and ZZ are not used.
Followed by 6 digits (0-9)
Finished by a suffix: A, B, C, D, F, or M
"
2951,strip html tags,"<(/|/?(a|p|img|br|table|td|tr))(\s+\w+\s*=(|\s*[^""\s>]+|\s*""[^""]*""))*/?>","Strip html tags, e.g. the ones that can be replaced by a space. Add more tags if needed. Can be used as a weak replacement of HTML tools to convert html to raw text. Could be used for html structure syntax highlighting."
2952,german telephone numbers,"^(((((00|\+)49[ \-/]{0,1})|0)[1-9][0-9]{1,4}[ \-/]{0,1}|(((00|\+)49\()|\(0)[1-9][0-9]{1,4}\))[0-9]{1,7}[ \-/]{0,1}[0-9]{1,5})$","Matches German phone and fax numbers (including cell phone numbers) in various formats like:
004989123456, 
+49 89 123456, 
+49(89)123456, 
089-1234-5678, 
089 1234 5678, 
(089)1234-5678
Max. number of digits is 16.


"
2953,Stub URL,"^[a-zA-Z]([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*[a-zA-Z])?$",Validation for stub urls
2955,Strong Password,"(?=^.{6,15}$)(?=.*\d)(?=.*\W+)(?![.\n])(?=.*[a-zA-Z]).*$","Password length must be between 6-15 and it must contain at least one letter,one special character, and a number."
2956,Validate ZA Phone Numbers,^((?:\+27|27)|0)(\d{2})-?(\d{3})-?(\d{4})$,"Matches South African telephone/mobile numbers, with or without the country code. Can also include spaces or hyphens between values. Doesn't match brackets around the area code, but that would be easy to add in. Hope it helps someone..."
2957,SQL Server Connection String,(?:(?:Data Source)|(?:Server))=([\w\.]+?);\s*?(?:(?:Initial Catalog)|(?:Database))=(\w+?);\s*?(?:(?:User Id)|(?:Uid))=(\w+?);\s*?(?:(?:Password)|(?:Pwd))=(\w*?);.*,Matches an SQL Server 2008 Connection String
2958,4 digit year format YYYY,"(1[8,9]|20)[0-9]{2}",Valid for years 1800-2099. Can be easily modified to extend the range
2959,HTTP head,^([^\r\n]*\r?\n(?!\r?\n))*[^\r\n]*\r?\n,Matches everything from the beginning to the first empty line. Used to match the head of an HTTP response.
2961,Portuguese Postal Code,^(\d{4}-\d{3})|\d{4}$,Validates complete portuguese postal code xxxx-yyy or old postal code xxxx
2962,Verify Absolute and UNC paths,"(([A-Z]:{1}\\)|\\{2})[(\w\.~`!@#$%^&\(\)+=\{\}\[\];',.\\)]{0,}","Allows to match Absolute and UNC paths in Windows.  Can find all characters except the Windows illegal file/filename characters: \/:*?""<>|"
2963,"(=""<SCRIPT>ALERT(""HELLO..."")", [^<>?&amp;^!*@\\+'&quot;`],"security contractor gigged me on what i posted in the title. the validator that detects it, is the expression i posted."
2965,ffsdd,aaa999,sdfsfa
2966,Persian Date,^1[34][0-9][0-9]\/((1[0-2])|([1-9]))\/(([12][0-9])|(3[01])|[1-9])$,a simple expression to validate Persian dates.
2967,Indonesian Cell Phone Number Validation,^((?:\+62|62)|0)[2-9]{1}[0-9]+$,"Validate Indonesian ""Mobile Numbers Only"" with or without the country code, also base on regular phone number format at http://id.wikipedia.org/wiki/Daftar_kode_telepon_di_Indonesia. This regex only allowed characters that accepted by mobile phone/sms gateway only :D"
2968,Allow user to enter AlphaNumeric Values,[a-zA-Z0-9]*,"This will allow user to enter only AlphaNumeric values. you can use as a Regular expression in Asp.net from version 1.1,2.0,3.5

eg: Your Textbox can not contain special characters like @ # $ % ^ & * ( )
"
2969,Email,(\w+[\.\_\-]*)*\w+@[\w]+(.)*\w+$,match the common email format
2971,Head Parser,(<meta [.\w\W]*?\>)|(<style [.\w\W]*?</style>)|(<link [.\w\W]*?\>)|(<script [.\w\W]*?</script>),"Parses the objects out from an html header. These objects are: meta, style, link, and script. Use with the multiline option to pull from multine scripts and styles."
2972,Location cordinates,"[NS] \d{1,}(\:[0-5]\d){2}.{0,1}\d{0,},[EW] \d{1,}(\:[0-5]\d){2}.{0,1}\d{0,}","Latitude and longitude coordinates separated by a comma in the form: 
N 0:59:59.99,E 0:59:59.99 No restriction on degrees. Use split on comma to separate Latitude and Longitude then on colon and space for parts to convert into a decimal value. "
2973,Tex / Latex Matcher,(?<=[[]tex[]]).*?(?=[[]/tex[]]),This expression helps in finding any text inside [tex] – [/tex] tags. For example returns x+y=z for the following input [tex]x+y=z[/tex] Was written for parsing LaTex equations written by users in Html editor. Despite its’ original purpose it can be used for matching of any arbitrary tags in squared brackets.
2974,extract packge and class from imports,import (.*);,"used in java code to get the imported classes together with their package.
test string: 
package mysecondpackage;
import mypackage.level0.MyClass;"
2975,CUIT CUIL,^(20|23|27|30|33)-[0-9]{8}-[0-9]$,Valida nros de CUIT y CUIL de la AFIP - Argentina. No valida el digito verificador
2976,Numeric range from 1-10,(^[1-9]$)|(^10$),Matches the numbers 1-10 and only the numbers 1-10.
2977,Email address validation,"^([+a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,6}|[0-9]{1,3})(\]?)$",Checks if an email address is valid.
2978,One letter and only one letter,^[A-Za-z]$,Matches a string that contains exactly one letter in the range A-Z or a-z. 
2979,Match Website,http://(www\.)?([^\.]+)\.com ,This regex matches 'http://' optionally followed by 'www.' then starts a group and matches one or more of any character that is not a full stop/period (.) closes the group then matches '.com'.
2980,RegEx to match Invalid XML character,[^\u0009\u000A\u000D\u0020-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF],RegEx to match Invalid XML character
2981,Sassy Date Match,"([A-Za-z]{0,}[\.\,\s]{0,}[A-Za-z]{1,}[\.\s]{1,}[0-9]{1,2}[\,\s]{0,}[0-9]{4})| ([0-9]{0,4}[-,\s]{0,}[A-Za-z]{3,9}[-,\s]{0,}[0-9]{1,2}[-,\s]{0,}[A-Za-z]{0,8})| ([0-9]{1,4}[\/\.\-][0-9]{1,4}[\/\.\-][0-9]{1,4})","Will match a variety of different date formats; however, it is not a good example of ""simple"" regex and can really contribute to processing time.  This was made for a very specific purpose and should only be used when no other faster methods are available."
2982,Sassy Time Match,"([0-9]{1,2}[:][0-9]{1,2}[:]{0,2}[0-9]{0,2}[\s]{0,}[AMPamp]{0,2})",Made for a very specific purpose.  It's likely pretty slow.  Use at your own risk and don't complain.
2983,Strong Password,"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,20}$","Password between 8 and 20 characters; must contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character, but cannot contain whitespace."
